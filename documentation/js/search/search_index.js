var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/About.html",[0,0.259]],["body/classes/About.html",[0,0.134,1,0.26,2,0.166,3,0.166,4,0.138,5,1.603,6,0.084,7,0.453,8,0.553,9,1.879,10,0.622,11,0.549,12,0.622,13,0.294,14,1.937,15,2.471,16,2.986,17,1.508,18,2.986,19,3.644,20,3.374,21,2.986,22,2.986,23,0.26,24,0.038,25,0.835,26,0.262,27,0.227,28,0.4,29,0.453,30,0.33,31,0.509,32,0.4,33,1.879,34,0.453,35,3.644,36,0.702,37,1.937,38,1.937,39,0.294,40,0.73,41,1.937,42,1.603,43,0.5,44,1.937,45,1.937,46,3.389,47,5.909,48,5.16,49,1.937,50,5.909,51,2.299,52,1.603,53,3.868,54,1.676,55,3.98,56,5.513,57,1.603,58,2.299,59,2.986,60,1.937,61,1.603,62,1.603,63,1.603,64,1.676,65,1.937,66,1.603,67,2.986,68,2.471,69,2.471,70,1.879,71,1.603,72,2.471,73,1.603,74,2.471,75,1.603,76,1.937,77,4.424,78,4.031,79,2.986,80,1.603,81,2.068,82,1.671,83,2.924,84,1.603,85,2.471,86,1.603,87,2.471,88,2.132,89,0.848,90,1.603,91,2.471,92,1.937,93,1.937,94,1.937,95,2.471,96,1.603,97,2.986,98,2.471,99,1.937,100,1.603,101,2.046,102,1.937,103,0.73,104,1.603,105,1.603,106,2.471,107,2.471,108,1.603,109,1.603,110,1.937,111,2.986,112,2.986,113,1.603,114,2.471,115,1.603,116,1.603,117,2.046,118,1.603,119,1.937,120,1.603,121,2.471,122,3.644,123,1.937,124,1.937,125,2.986,126,1.937,127,1.937,128,0.73,129,0.294,130,0.018,131,0.018]],["title/classes/Authentication.html",[0,0.207,132,2.145]],["body/classes/Authentication.html",[0,0.282,1,0.548,2,0.351,3,0.351,4,0.291,6,0.178,7,0.763,8,0.826,10,0.861,11,0.781,12,0.861,13,0.621,23,0.548,24,0.037,25,0.548,26,0.178,27,0.479,28,0.674,29,0.763,30,0.698,31,0.857,32,0.674,34,0.763,39,0.621,82,1.725,128,1.542,129,0.621,130,0.03,131,0.03,132,3.885,133,3.387,134,2.822,135,2.822,136,4.093,137,1.725,138,3.163,139,5.028,140,2.922,141,4.093,142,4.093]],["title/classes/Currency.html",[0,0.207,58,1.686]],["body/classes/Currency.html",[0,0.255,1,0.495,2,0.316,3,0.316,4,0.262,6,0.16,7,0.715,8,0.788,10,0.83,11,0.733,12,0.83,13,0.56,15,3.9,23,0.495,24,0.037,25,0.495,26,0.16,27,0.432,28,0.632,29,0.715,30,0.63,31,0.804,32,0.632,34,0.715,36,0.432,39,0.715,40,1.391,43,0.953,51,2.072,58,3.338,62,3.9,63,4.296,89,1.049,129,0.56,130,0.028,131,0.028,143,3.055,144,4.713,145,4.713,146,3.692,147,4.713,148,2.38,149,1.956,150,1.776,151,0.864,152,0.897,153,1.049,154,3.692,155,1.956,156,3.692,157,1.391,158,0.781,159,1.391,160,3.692,161,3.692,162,3.692,163,3.692,164,0.864,165,0.989,166,1.53,167,0.864,168,1.153,169,1.153,170,1.391]],["title/classes/EpitechDoors.html",[0,0.207,171,1.89]],["body/classes/EpitechDoors.html",[0,0.253,1,0.491,2,0.314,3,0.314,4,0.26,6,0.159,7,0.712,8,0.785,10,0.828,11,0.731,12,0.828,13,0.556,23,0.491,24,0.037,25,0.491,26,0.159,27,0.429,28,0.628,29,0.712,30,0.625,31,0.8,32,0.628,34,0.712,36,0.549,39,0.712,43,0.946,78,3.881,83,3.693,95,3.881,98,3.881,100,3.032,129,0.556,130,0.028,131,0.028,148,2.368,149,1.949,150,1.767,151,0.857,152,0.698,153,1.041,155,2.055,157,1.38,158,0.775,159,1.38,164,0.857,165,0.985,166,1.518,167,0.857,168,1.144,169,1.144,170,1.38,171,3.254,172,3.032,173,4.69,174,4.69,175,3.663,176,4.69,177,4.69,178,3.032,179,1.38,180,3.663,181,3.663,182,3.663,183,3.663,184,3.663]],["title/classes/Gmail.html",[0,0.207,117,1.686]],["body/classes/Gmail.html",[0,0.225,1,0.437,2,0.28,3,0.28,4,0.232,6,0.142,7,0.66,8,0.742,10,0.792,11,0.699,12,0.792,13,0.495,23,0.437,24,0.038,25,0.437,26,0.142,27,0.382,28,0.583,29,0.66,30,0.557,31,0.742,32,0.583,34,0.66,36,0.382,39,0.66,40,1.23,43,0.843,70,2.736,88,3.493,117,2.746,118,4.048,121,3.6,129,0.495,130,0.026,131,0.026,149,1.966,150,1.843,151,0.764,152,0.828,153,0.928,155,1.966,157,1.23,158,0.92,159,1.639,164,1.018,165,0.931,166,1.353,167,0.764,168,1.02,169,1.02,170,1.23,185,2.702,186,4.35,187,4.35,188,3.265,189,1.802,190,4.35,191,4.35,192,2.442,193,1.639,194,2.702,195,3.106,196,3.106,197,3.106,198,3.265,199,3.265,200,2.331,201,3.265,202,1.986,203,3.265,204,3.265,205,4.892,206,1.12,207,5.217,208,3.265,209,4.317,210,4.892,211,4.892,212,3.265,213,3.265,214,3.265,215,2.702,216,1.491,217,1.23]],["title/classes/IntraEpitech.html",[0,0.207,218,1.89]],["body/classes/IntraEpitech.html",[0,0.165,1,0.321,2,0.205,3,0.205,4,0.17,6,0.104,7,0.532,8,0.855,10,0.881,11,0.778,12,0.881,13,0.692,17,1.769,23,0.611,24,0.038,25,0.611,26,0.198,27,0.534,28,0.701,29,0.794,30,0.777,31,0.706,32,0.47,34,0.769,36,0.628,39,0.692,43,0.905,68,2.9,81,2.301,82,1.421,83,4.174,85,2.9,87,2.9,88,1.711,89,0.681,91,1.983,130,0.021,131,0.021,137,1.421,149,1.971,150,1.908,151,0.969,152,0.964,153,1.177,155,2.187,157,1.561,158,1.026,159,1.827,164,0.82,165,0.964,166,1.452,167,0.82,168,1.094,178,3.428,189,2.168,192,2.936,200,2.502,206,0.822,218,2.204,219,1.983,220,3.504,221,3.504,222,3.504,223,3.504,224,2.396,225,2.396,226,3.504,227,2.396,228,3.504,229,2.396,230,3.504,231,3.504,232,3.504,233,2.396,234,2.325,235,2.325,236,1.6,237,1.508,238,4.142,239,4.142,240,4.142,241,1.345,242,2.396,243,1.345,244,2.396,245,1.345,246,2.396,247,1.345,248,2.396,249,1.345,250,2.396,251,1.345,252,2.396,253,2.396,254,2.396,255,2.396,256,2.396,257,2.396,258,2.396,259,1.094]],["title/interfaces/IntraEpitechUser.html",[236,1.372,260,1.132]],["body/interfaces/IntraEpitechUser.html",[2,0.303,3,0.303,4,0.251,6,0.154,24,0.037,26,0.259,36,0.746,89,1.72,103,1.332,130,0.027,131,0.027,137,1.846,169,1.681,193,1.332,202,1.614,234,3.021,235,3.021,236,2.093,241,3.021,243,3.021,245,3.021,247,3.021,249,3.021,251,3.021,260,2.028,261,1.984,262,1.984,263,2.883,264,1.332,265,1.465,266,1.614,267,1.465,268,1.614,269,1.465,270,1.614,271,1.465,272,1.614,273,1.614,274,1.614,275,1.984,276,1.984,277,1.984,278,1.984,279,1.984,280,1.984,281,1.984,282,1.614,283,1.984,284,1.984,285,1.984,286,1.984]],["title/classes/LeagueOfLegends.html",[0,0.207,287,1.89]],["body/classes/LeagueOfLegends.html",[0,0.18,1,0.35,2,0.224,3,0.224,4,0.185,6,0.113,7,0.566,8,0.66,10,0.72,11,0.636,12,0.72,13,0.396,17,1.883,23,0.35,24,0.038,25,0.583,26,0.113,27,0.306,28,0.5,29,0.566,30,0.445,31,0.742,32,0.5,34,0.566,36,0.509,39,0.66,43,0.674,51,1.466,81,2.634,82,0.896,89,0.742,114,3.086,115,2.161,116,2.161,129,0.396,130,0.022,131,0.022,149,1.787,150,1.639,151,0.611,152,0.828,153,0.742,155,1.405,157,0.984,158,0.789,159,1.405,164,0.611,165,0.955,166,1.082,167,0.611,168,0.816,169,0.816,170,0.984,189,1.545,192,2.093,200,1.865,202,1.192,206,2.064,237,1.643,274,1.192,275,2.816,276,2.816,277,3.014,278,2.816,279,2.816,280,2.816,281,2.816,282,1.703,283,2.441,284,2.441,285,2.441,286,2.663,287,2.736,288,2.161,289,3.729,290,3.729,291,2.612,292,3.729,293,3.729,294,3.729,295,3.729,296,3.729,297,4.349,298,2.612,299,2.612,300,2.612,301,2.612,302,3.729,303,2.612,304,2.612,305,2.612,306,2.612,307,4.349,308,2.612,309,2.612,310,2.612,311,2.612,312,2.612,313,2.612,314,2.612,315,2.612,316,2.612,317,4.349,318,3.729,319,2.612,320,3.729,321,1.703,322,3.729,323,4.349,324,3.729,325,4.349,326,5.49,327,2.612,328,2.612,329,2.612,330,2.612,331,2.612]],["title/interfaces/LeagueOfLegendsGameData.html",[260,1.132,274,1.372]],["body/interfaces/LeagueOfLegendsGameData.html",[2,0.311,3,0.311,4,0.258,6,0.158,24,0.037,26,0.254,36,0.743,89,1.758,103,1.367,130,0.027,131,0.027,137,1.245,169,1.697,193,1.367,202,1.657,234,2.037,235,2.037,236,1.657,241,2.037,243,2.037,245,2.037,247,2.037,249,2.037,251,2.037,260,2.048,261,2.037,262,2.037,263,2.932,264,1.367,265,1.504,266,1.657,267,1.504,268,1.657,269,1.504,270,1.657,271,1.504,272,1.657,273,1.657,274,2.128,275,3.051,276,3.051,277,3.051,278,3.051,279,3.051,280,3.051,281,3.051,282,1.657,283,2.037,284,2.037,285,2.037,286,2.037]],["title/interfaces/LeagueOfLegendsProfileData.html",[260,1.132,282,1.372]],["body/interfaces/LeagueOfLegendsProfileData.html",[2,0.324,3,0.324,4,0.268,6,0.164,24,0.036,26,0.24,36,0.743,89,1.714,103,1.424,130,0.028,131,0.028,137,1.296,169,1.723,193,1.424,202,2.397,234,2.121,235,2.121,236,1.725,241,2.121,243,2.121,245,2.121,247,2.121,249,2.121,251,2.121,260,2.079,261,2.121,262,2.121,263,3.009,264,1.424,265,1.566,266,1.725,267,1.566,268,1.725,269,1.566,270,1.725,271,1.566,272,1.725,273,1.725,274,1.725,275,2.121,276,2.121,277,2.121,278,2.121,279,2.121,280,2.121,281,2.121,282,2.184,283,3.097,284,3.097,285,3.097,286,3.097]],["title/classes/Login.html",[0,0.207,137,1.03]],["body/classes/Login.html",[0,0.207,1,0.402,2,0.257,3,0.257,4,0.213,6,0.13,7,0.623,8,0.765,10,0.765,11,0.675,12,0.765,13,0.455,23,0.402,24,0.038,25,0.402,26,0.13,27,0.351,28,0.55,29,0.623,30,0.511,31,0.9,32,0.55,33,2.584,34,0.623,36,0.351,39,0.801,40,1.13,82,1.728,89,0.852,103,1.13,128,1.13,129,0.455,130,0.024,131,0.024,134,2.306,135,2.306,137,1.81,152,1.005,153,0.852,158,0.869,165,0.571,167,0.961,179,1.989,193,2.198,206,1.029,217,1.989,237,1.887,259,2.301,264,1.548,265,1.243,266,1.37,267,1.243,268,1.37,269,1.243,270,1.37,271,1.243,272,1.37,273,2.489,332,2.482,333,2.999,334,3.399,335,1.887,336,1.887,337,1.887,338,1.514,339,1.37,340,3.399,341,2.544,342,2.999,343,3.627,344,3.768,345,2.482,346,3.399,347,3.399,348,4.17,349,2.482,350,1.37,351,2.999,352,3.06,353,4.108,354,1.684,355,2.999,356,2.999,357,2.999,358,3.399,359,3.399,360,3.399,361,3.399,362,2.999,363,2.482,364,2.482,365,1.13]],["title/classes/Nasa.html",[0,0.207,64,1.686]],["body/classes/Nasa.html",[0,0.213,1,0.414,2,0.265,3,0.265,4,0.219,6,0.134,7,0.636,8,0.835,10,0.835,11,0.767,12,0.835,13,0.636,23,0.562,24,0.037,25,0.562,26,0.182,27,0.491,28,0.684,29,0.774,30,0.715,31,0.715,32,0.786,34,0.774,39,0.774,43,1.082,51,2.354,55,2.994,64,3.158,69,4.223,70,2.638,72,3.47,73,3.47,74,4.223,75,2.558,129,0.469,130,0.025,131,0.025,149,1.923,150,1.793,151,0.981,152,0.972,153,1.191,155,2.072,157,2.072,158,0.887,159,1.58,164,0.981,165,1.047,167,0.981,168,1.309,169,0.965,170,1.165,189,2.114,366,2.558,367,4.193,368,4.193,369,4.193,370,3.091,371,4.223,372,4.223,373,4.193,374,3.091,375,3.091,376,2.558,377,3.091,378,3.091,379,2.207,380,3.091,381,3.091,382,4.193,383,3.091]],["title/classes/Office.html",[0,0.207,101,1.686]],["body/classes/Office.html",[0,0.256,1,0.497,2,0.318,3,0.318,4,0.263,6,0.161,7,0.717,8,0.789,10,0.831,11,0.734,12,0.831,13,0.562,23,0.497,24,0.037,25,0.497,26,0.161,27,0.434,28,0.633,29,0.717,30,0.632,31,0.806,32,0.633,34,0.717,39,0.717,43,0.957,70,2.972,101,3.3,103,1.78,106,3.91,107,3.91,108,3.067,109,3.067,129,0.562,130,0.028,131,0.028,149,1.96,150,1.78,151,0.867,152,0.9,153,1.053,155,1.78,157,1.396,158,0.784,159,1.396,164,0.867,165,0.99,166,1.536,167,0.867,168,1.157,169,1.157,170,1.396,189,1.958,195,2.646,196,2.646,197,2.646,371,3.91,376,3.067,384,3.067,385,4.725,386,4.725,387,3.706,388,4.725,389,4.725,390,3.706]],["title/classes/Profile.html",[0,0.207,81,1.517]],["body/classes/Profile.html",[0,0.227,1,0.44,2,0.282,3,0.282,4,0.233,6,0.143,7,0.663,8,0.745,9,2.749,10,0.794,11,0.701,12,0.794,13,0.499,17,2.206,23,0.44,24,0.038,25,0.44,26,0.143,27,0.385,28,0.586,29,0.663,30,0.561,31,0.837,32,0.586,34,0.663,36,0.512,39,0.85,40,1.239,43,0.849,81,2.478,82,1.921,128,1.239,129,0.499,130,0.026,131,0.026,151,0.769,152,0.626,158,0.695,164,0.769,165,1.037,167,0.769,168,1.026,179,2.052,189,1.811,193,1.239,206,1.127,216,1.501,217,2.11,259,1.995,265,1.362,267,1.362,269,1.362,271,1.362,321,1.501,335,2.068,337,2.068,338,1.66,339,1.501,341,2.478,350,1.501,352,2.453,354,1.845,365,2.153,391,2.72,392,3.287,393,2.347,394,1.66,395,2.755,396,2.755,397,1.66,398,2.453,399,1.845,400,1.845,401,2.453,402,3.287,403,2.347,404,2.347,405,3.287,406,3.287,407,3.287,408,3.287,409,3.287,410,3.287,411,3.287,412,3.287,413,3.287]],["title/classes/ProfileUpdate.html",[0,0.207,414,2.145]],["body/classes/ProfileUpdate.html",[0,0.251,1,0.488,2,0.312,3,0.312,4,0.259,6,0.158,7,0.709,8,0.783,10,0.826,11,0.754,12,0.826,13,0.553,17,2.359,23,0.488,24,0.037,25,0.488,26,0.158,27,0.427,28,0.626,29,0.709,30,0.621,31,0.88,32,0.626,34,0.709,36,0.547,39,0.783,82,1.603,128,1.372,129,0.553,130,0.027,131,0.027,148,2.359,151,0.852,152,0.694,158,0.77,164,0.852,165,0.694,179,1.944,217,1.944,321,1.663,338,1.839,339,1.663,341,2.842,350,1.663,365,2.235,394,1.839,395,2.896,396,2.045,397,1.839,398,2.623,399,2.045,400,2.045,401,2.623,414,3.683,415,3.014,416,3.867,417,3.867,418,3.643,419,3.336,420,2.601,421,3.643,422,3.643]],["title/classes/Register.html",[0,0.207,138,1.89]],["body/classes/Register.html",[0,0.243,1,0.472,2,0.302,3,0.302,4,0.25,6,0.153,7,0.694,8,0.771,10,0.816,11,0.72,12,0.816,13,0.535,23,0.472,24,0.037,25,0.472,26,0.153,27,0.413,28,0.613,29,0.694,30,0.601,31,0.866,32,0.613,34,0.694,39,0.771,40,1.327,82,1.742,103,1.327,128,1.327,129,0.535,130,0.027,131,0.027,134,2.567,135,2.567,138,3.504,152,0.871,153,1.001,158,0.745,165,0.967,167,0.824,179,1.723,193,1.913,216,2.318,217,1.913,237,2.216,259,2.088,264,1.723,265,1.459,266,1.608,267,1.459,268,1.608,269,1.459,270,1.608,271,1.459,272,1.608,273,2.318,334,3.784,343,3.745,423,2.915,424,3.522,425,2.515,426,3.522,427,2.915,428,3.522,429,3.784,430,4.447,431,2.915,432,2.915,433,3.522,434,2.515]],["title/classes/Temperature.html",[0,0.207,54,1.686]],["body/classes/Temperature.html",[0,0.226,1,0.438,2,0.28,3,0.28,4,0.232,6,0.142,7,0.661,8,0.849,10,0.88,11,0.777,12,0.88,13,0.661,23,0.584,24,0.037,25,0.584,26,0.189,27,0.51,28,0.7,29,0.792,30,0.743,31,0.743,32,0.584,34,0.792,36,0.51,39,0.792,43,1.124,46,3.604,51,2.444,53,4.627,54,3.052,129,0.496,130,0.026,131,0.026,149,1.967,150,1.845,151,1.019,152,0.994,153,1.237,155,2.107,157,1.641,158,0.921,159,1.641,164,1.019,165,1.065,166,1.804,167,1.019,168,1.36,169,1.021,170,1.232,189,2.163,435,2.706,436,4.355,437,4.355,438,4.355,439,3.27,440,4.355,441,3.27,442,4.355,443,3.27,444,3.27]],["title/classes/Token.html",[0,0.207,365,1.132]],["body/classes/Token.html",[0,0.203,1,0.395,2,0.253,3,0.253,4,0.209,6,0.128,7,0.616,8,0.796,9,2.554,10,0.823,11,0.727,12,0.823,13,0.616,23,0.544,24,0.038,25,0.544,26,0.176,27,0.475,28,0.622,29,0.705,30,0.692,31,0.925,32,0.544,33,2.921,34,0.616,36,0.475,39,0.843,40,1.111,43,0.761,89,0.838,128,1.111,129,0.616,130,0.024,131,0.024,134,2.279,135,1.655,148,2.345,151,0.69,152,0.561,164,0.69,165,0.773,167,0.69,168,0.921,179,2.043,206,1.393,216,1.346,217,2.093,259,2.396,321,1.346,336,1.855,337,1.855,338,1.489,339,1.346,341,2.964,343,1.855,344,2.899,348,2.44,350,1.346,352,2.606,354,1.655,365,2.283,394,1.489,395,2.945,396,2.606,397,1.489,398,2.279,399,1.655,400,1.655,401,2.808,434,2.105,445,2.44,446,2.949,447,3.36,448,2.949,449,2.44,450,2.44,451,1.855,452,2.949,453,2.105,454,2.949,455,2.949,456,2.949,457,2.949,458,4.06,459,2.949,460,2.949,461,4.06,462,2.949,463,2.949,464,2.44]],["title/interfaces/UserInformations.html",[260,1.132,264,1.132]],["body/interfaces/UserInformations.html",[2,0.284,3,0.284,4,0.235,6,0.144,24,0.037,26,0.26,27,0.731,36,0.747,89,1.627,103,1.978,130,0.026,131,0.026,137,1.137,169,1.639,193,1.978,202,1.514,234,1.861,235,1.861,236,1.514,241,1.861,243,1.861,245,1.861,247,1.861,249,1.861,251,1.861,260,1.978,261,1.861,262,1.861,263,2.765,264,1.656,265,2.175,266,2.397,267,2.175,268,2.397,269,2.175,270,2.397,271,2.175,272,2.397,273,2.397,274,1.514,275,1.861,276,1.861,277,1.861,278,1.861,279,1.861,280,1.861,281,1.861,282,1.514,283,1.861,284,1.861,285,1.861,286,1.861]],["title/classes/Utils.html",[0,0.207,451,1.89]],["body/classes/Utils.html",[0,0.28,1,0.544,2,0.348,3,0.348,4,0.288,6,0.176,7,0.759,13,0.616,23,0.544,24,0.037,25,0.544,26,0.176,27,0.475,29,0.759,34,0.616,36,0.723,55,2.897,89,1.651,130,0.029,131,0.029,148,2.525,206,1.392,449,4.139,451,3.146,465,3.359,466,5.002,467,5.002,468,4.058,469,5.659,470,6.203,471,5.002,472,5.002,473,5.002,474,4.058,475,4.058,476,4.058]],["title/classes/Widget.html",[0,0.207,477,1.89]],["body/classes/Widget.html",[0,0.208,1,0.404,2,0.258,3,0.258,4,0.214,6,0.131,7,0.625,8,0.713,10,0.766,11,0.817,12,0.766,13,0.457,20,2.592,23,0.404,24,0.037,25,0.404,26,0.204,27,0.353,28,0.552,29,0.625,30,0.514,31,0.996,32,0.552,34,0.625,36,0.55,39,0.926,52,2.494,54,2.313,57,2.494,58,2.313,61,2.494,64,2.313,66,2.494,71,2.494,80,2.494,84,2.494,86,2.494,90,2.494,96,2.494,101,2.313,105,2.494,113,2.494,117,2.313,120,2.494,128,1.135,129,0.457,130,0.024,131,0.024,134,2.313,135,2.313,151,0.705,152,0.785,158,1.265,164,0.705,165,0.785,170,1.135,171,2.592,179,1.77,216,1.882,217,1.902,218,2.592,287,2.592,321,1.376,338,1.522,339,1.376,341,2.549,350,1.376,365,2.057,394,1.522,395,2.636,396,2.313,397,1.522,398,2.313,399,1.692,400,1.692,401,2.313,404,2.151,477,3.176,478,2.494,479,3.013,480,3.41,481,4.121,482,2.494,483,2.494,484,2.494,485,4.95,486,3.013,487,3.013,488,3.013,489,3.013,490,3.013,491,3.013,492,3.013,493,3.013,494,3.013,495,3.013,496,3.013,497,3.013,498,3.013]],["title/classes/WidgetsDB.html",[0,0.207,499,2.145]],["body/classes/WidgetsDB.html",[0,0.16,1,0.311,2,0.199,3,0.199,4,0.165,6,0.101,7,0.52,8,0.76,9,2.153,10,0.807,11,0.712,12,0.807,13,0.52,20,3.258,23,0.459,24,0.038,25,0.459,26,0.149,27,0.401,28,0.601,29,0.681,30,0.584,31,0.693,32,0.459,34,0.681,36,0.526,39,0.894,40,1.532,82,1.539,128,0.875,129,0.617,130,0.02,131,0.02,151,0.801,152,0.774,153,0.66,158,1.059,164,0.801,165,1.033,166,1.418,167,1.212,179,2.174,189,1.418,192,2.519,206,1.395,215,3.365,216,1.857,217,2.219,259,2.365,321,1.563,337,1.46,338,1.172,339,1.06,341,2.974,350,1.563,352,3.046,354,1.303,365,2.109,379,2.903,394,1.728,395,2.687,396,2.519,397,1.728,398,2.519,399,1.921,400,1.921,401,2.283,403,3.575,404,2.444,416,2.833,417,2.833,419,2.444,450,2.833,499,2.903,500,1.921,501,2.321,502,3.714,503,2.321,504,3.423,505,3.423,506,3.423,507,3.423,508,1.657,509,1.657,510,1.657,511,1.657,512,3.423,513,4.066,514,3.423,515,2.833,516,3.423,517,3.423,518,2.321,519,2.321]],["title/coverage.html",[520,3.403]],["body/coverage.html",[0,0.42,4,0.206,5,2.403,24,0.037,26,0.126,43,0.75,54,1.63,58,1.63,64,1.63,81,1.466,101,1.63,117,1.63,129,0.441,130,0.024,131,0.024,132,2.073,133,2.403,137,0.996,138,1.827,140,2.073,143,2.403,171,1.827,172,2.403,185,2.403,206,2.104,218,1.827,219,2.403,236,1.326,260,1.873,262,2.79,264,1.094,274,1.326,282,1.326,287,1.827,288,2.403,332,2.403,335,1.827,336,1.827,365,1.094,366,2.403,384,2.403,391,2.403,393,2.073,414,2.073,415,2.403,420,2.073,423,2.403,425,2.073,435,2.403,445,2.403,451,1.827,453,2.073,465,2.403,477,1.827,478,2.403,499,2.073,500,2.403,508,2.073,509,2.073,510,2.073,511,2.073,520,2.403,521,2.904,522,2.904,523,2.904,524,2.403,525,6.135,526,2.403,527,6.046,528,4.796,529,2.403,530,2.403,531,5.397,532,5.397,533,2.403,534,2.904,535,2.904,536,2.904,537,2.904,538,3.325,539,2.403,540,2.868,541,3.325,542,2.403,543,2.403,544,2.868,545,2.403,546,2.403,547,5.947,548,5.947,549,3.325,550,2.403,551,2.403,552,4.97,553,4.97,554,2.403,555,2.403,556,2.904,557,2.904,558,2.904,559,2.403]],["title/dependencies.html",[560,2.503,561,2.993]],["body/dependencies.html",[24,0.036,32,0.629,33,2.953,130,0.032,131,0.032,339,2.143,561,3.884,562,4.694,563,4.694,564,4.694,565,4.694,566,4.694,567,4.694,568,4.694,569,4.694,570,4.694,571,4.694]],["title/miscellaneous/functions.html",[572,1.574,573,2.993]],["body/miscellaneous/functions.html",[6,0.198,11,0.719,23,0.719,24,0.035,25,0.719,26,0.198,27,0.628,28,0.611,36,0.628,130,0.032,131,0.032,540,3.255,542,4.44,544,3.255,545,4.44,572,2.868,573,3.773,574,3.773,575,3.773,576,4.56,577,5.365,578,4.56,579,4.56,580,5.365]],["title/index.html",[6,0.13,581,2.486]],["body/index.html",[1,0.653,24,0.033,130,0.033,131,0.033,261,2.735,581,4.032,582,4.872,583,4.872]],["title/modules.html",[584,3.403]],["body/modules.html",[24,0.033,130,0.033,131,0.033,584,4.073]],["title/miscellaneous/variables.html",[572,1.574,585,2.993]],["body/miscellaneous/variables.html",[6,0.034,8,0.676,10,0.21,11,0.186,12,0.21,17,1.326,20,1.438,24,0.038,26,0.197,28,0.186,32,0.104,36,0.616,39,0.776,40,1.099,42,0.642,43,0.874,82,1.781,89,0.22,103,0.861,104,1.147,129,0.21,130,0.008,131,0.008,137,0.266,140,0.99,148,0.392,149,1.099,150,0.522,151,0.912,152,0.713,153,0.394,155,1.099,157,1.275,158,0.977,159,1.099,164,0.943,165,0.995,167,0.741,168,1.057,170,1.837,179,1.857,192,0.435,193,1.099,194,1.147,195,2.083,196,2.083,197,2.083,202,0.633,206,0.784,209,4.035,216,2.2,217,1.894,259,2.617,264,1.099,265,0.947,266,1.044,267,0.947,268,1.044,269,0.947,270,0.633,271,0.947,272,0.354,273,1.332,321,0.858,335,0.872,336,0.872,340,1.147,343,3.191,344,1.875,345,0.642,346,1.147,347,1.147,349,0.642,350,0.354,352,3.273,354,0.778,358,2.174,359,2.174,360,2.174,361,2.174,363,2.174,364,1.147,365,1.956,372,1.147,379,0.99,393,0.99,394,0.392,397,0.392,403,1.342,419,1.632,420,0.99,425,0.99,427,2.414,429,1.147,430,1.555,431,1.892,432,1.892,434,0.99,447,0.642,453,0.99,464,0.642,477,1.182,480,0.642,482,1.555,483,1.147,484,1.147,485,2.621,502,1.555,508,0.99,509,0.99,510,0.99,511,0.99,515,2.801,524,0.642,526,1.147,528,0.642,529,1.147,530,1.147,533,1.147,538,0.642,539,1.147,540,0.554,541,3.223,543,1.147,544,0.554,546,1.147,549,0.642,550,1.147,551,0.642,554,0.642,555,0.642,559,0.642,572,0.488,574,0.642,575,0.642,585,0.642,586,3.744,587,1.386,588,0.776,589,0.776,590,1.386,591,0.776,592,0.776,593,3.895,594,5.027,595,1.386,596,3.385,597,5.226,598,2.917,599,2.917,600,1.386,601,2.917,602,0.776,603,2.917,604,0.776,605,2.917,606,0.776,607,2.917,608,0.776,609,3.575,610,4.818,611,3.895,612,2.286,613,0.776,614,1.879,615,1.386,616,0.776,617,0.776,618,1.879,619,2.627,620,1.386,621,0.776,622,0.776,623,0.776,624,0.776,625,1.879,626,0.776,627,2.917,628,0.776,629,0.776,630,0.776,631,0.776,632,0.776,633,0.776,634,0.776,635,0.776,636,0.776,637,4.756,638,3.895,639,3.385,640,1.386,641,0.776,642,3.385,643,2.286,644,3.167,645,3.385,646,1.386,647,2.286,648,3.385,649,0.776,650,2.286,651,1.386,652,4.455,653,3.744,654,1.879,655,1.386,656,0.776,657,2.917,658,0.776,659,0.776,660,4.363,661,0.776,662,0.776,663,0.776,664,0.776,665,0.776,666,0.776,667,0.776,668,1.386,669,1.386,670,4.03,671,1.386,672,1.386,673,1.386,674,2.286,675,2.286,676,2.286,677,1.386,678,1.386,679,0.776,680,0.776,681,0.776,682,1.879,683,1.386,684,0.776,685,0.776,686,0.776,687,0.776,688,2.286,689,0.776,690,0.776,691,0.776,692,0.776]]],"invertedIndex":[["",{"_index":24,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":206,"title":{},"body":{"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0/1",{"_index":527,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":534,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":537,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":536,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":535,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":321,"title":{},"body":{"classes/LeagueOfLegends.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["1/1",{"_index":532,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":548,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":531,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":582,"title":{},"body":{"index.html":{}}}],["2.29.1",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":563,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":302,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["365",{"_index":102,"title":{},"body":{"classes/About.html":{}}}],["4",{"_index":583,"title":{},"body":{"index.html":{}}}],["4.17.1",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":547,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":346,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["66",{"_index":552,"title":{},"body":{"coverage.html":{}}}],["8.5.1",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["_result",{"_index":353,"title":{},"body":{"classes/Login.html":{}}}],["_result['token",{"_index":356,"title":{},"body":{"classes/Login.html":{}}}],["_result['token_created_at",{"_index":357,"title":{},"body":{"classes/Login.html":{}}}],["abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789",{"_index":476,"title":{},"body":{"classes/Utils.html":{}}}],["access_token",{"_index":637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["account",{"_index":667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addroute",{"_index":545,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["addroute(endpoint",{"_index":576,"title":{},"body":{"miscellaneous/functions.html":{}}}],["addusers",{"_index":529,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["addusers(infos",{"_index":674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addwidget",{"_index":510,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["addwidget(userid",{"_index":518,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["already",{"_index":431,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["api",{"_index":371,"title":{},"body":{"classes/Nasa.html":{},"classes/Office.html":{}}}],["api_key",{"_index":51,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{}}}],["api_url",{"_index":48,"title":{},"body":{"classes/About.html":{}}}],["apod",{"_index":66,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["app",{"_index":539,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apple_mail",{"_index":269,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["apple_token",{"_index":270,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["apple_user",{"_index":654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argument",{"_index":472,"title":{},"body":{"classes/Utils.html":{}}}],["array",{"_index":202,"title":{},"body":{"classes/Gmail.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["astronomy",{"_index":67,"title":{},"body":{"classes/About.html":{}}}],["async",{"_index":8,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["async(err",{"_index":513,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["authactions",{"_index":141,"title":{},"body":{"classes/Authentication.html":{}}}],["authentication",{"_index":132,"title":{"classes/Authentication.html":{}},"body":{"classes/Authentication.html":{},"coverage.html":{}}}],["authorization",{"_index":196,"title":{},"body":{"classes/Gmail.html":{},"classes/Office.html":{},"miscellaneous/variables.html":{}}}],["autologin",{"_index":83,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{}}}],["autologin.startswith(\"https://intra.epitech.eu",{"_index":178,"title":{},"body":{"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{}}}],["autologin.substring(25",{"_index":238,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["awailable",{"_index":21,"title":{},"body":{"classes/About.html":{}}}],["await",{"_index":158,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["axios",{"_index":149,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["axiosresponse",{"_index":150,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["bad",{"_index":651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base_currency",{"_index":162,"title":{},"body":{"classes/Currency.html":{}}}],["basic",{"_index":334,"title":{},"body":{"classes/Login.html":{},"classes/Register.html":{}}}],["bearer",{"_index":197,"title":{},"body":{"classes/Gmail.html":{},"classes/Office.html":{},"miscellaneous/variables.html":{}}}],["before",{"_index":505,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["boolean",{"_index":482,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["break",{"_index":644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calendar",{"_index":106,"title":{},"body":{"classes/About.html":{},"classes/Office.html":{}}}],["callback",{"_index":593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(err",{"_index":610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["camera",{"_index":75,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["campus",{"_index":177,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["case",{"_index":485,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":164,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["check",{"_index":447,"title":{},"body":{"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["checktoken",{"_index":453,"title":{},"body":{"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checktoken(token",{"_index":455,"title":{},"body":{"classes/Token.html":{}}}],["city",{"_index":53,"title":{},"body":{"classes/About.html":{},"classes/Temperature.html":{}}}],["city_temperature",{"_index":52,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["city_weather",{"_index":57,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["class",{"_index":0,"title":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{}}}],["classes",{"_index":1,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"index.html":{}}}],["client",{"_index":41,"title":{},"body":{"classes/About.html":{}}}],["console.debug(\"firsturl",{"_index":300,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug(\"profile",{"_index":328,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug(\"response",{"_index":641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"secondurl",{"_index":310,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug(\"setting",{"_index":327,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug('[handleoauthusersaction",{"_index":660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(err",{"_index":403,"title":{},"body":{"classes/Profile.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["console.debug(result",{"_index":614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error(\"test",{"_index":213,"title":{},"body":{"classes/Gmail.html":{}}}],["console.log(\"heeeeerererere2",{"_index":687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"response",{"_index":649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('autologin",{"_index":181,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["console.log('bearer",{"_index":640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('currency",{"_index":161,"title":{},"body":{"classes/Currency.html":{}}}],["console.log(error",{"_index":166,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"classes/WidgetsDB.html":{}}}],["console.log(from",{"_index":154,"title":{},"body":{"classes/Currency.html":{}}}],["const",{"_index":152,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["converter",{"_index":59,"title":{},"body":{"classes/About.html":{}}}],["correspond",{"_index":631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cors",{"_index":562,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":520,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":507,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["created",{"_index":657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdat",{"_index":457,"title":{},"body":{"classes/Token.html":{}}}],["credits",{"_index":235,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["curiosity",{"_index":72,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["curiosity_image",{"_index":71,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["currency",{"_index":58,"title":{"classes/Currency.html":{}},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["currency.getexchangerate(req",{"_index":486,"title":{},"body":{"classes/Widget.html":{}}}],["currency_converter",{"_index":61,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["current",{"_index":147,"title":{},"body":{"classes/Currency.html":{}}}],["current_time",{"_index":44,"title":{},"body":{"classes/About.html":{}}}],["dashboard",{"_index":22,"title":{},"body":{"classes/About.html":{}}}],["data",{"_index":379,"title":{},"body":{"classes/Nasa.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["data.leaguepoints",{"_index":319,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.losses",{"_index":318,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.queuetype",{"_index":314,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.rank",{"_index":316,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.tier",{"_index":315,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.wins",{"_index":317,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data[0",{"_index":382,"title":{},"body":{"classes/Nasa.html":{}}}],["database",{"_index":502,"title":{},"body":{"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["database/databaseactions",{"_index":337,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{}}}],["database/interfaces",{"_index":237,"title":{},"body":{"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Register.html":{}}}],["date",{"_index":70,"title":{},"body":{"classes/About.html":{},"classes/Gmail.html":{},"classes/Nasa.html":{},"classes/Office.html":{}}}],["day",{"_index":69,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["db",{"_index":526,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["db.query(query",{"_index":609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db.query(querystring",{"_index":630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dd",{"_index":360,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["decoded",{"_index":398,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["default",{"_index":170,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["delete",{"_index":616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletewidget",{"_index":530,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":561,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":55,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{},"classes/Utils.html":{}}}],["diff",{"_index":461,"title":{},"body":{"classes/Token.html":{}}}],["display",{"_index":56,"title":{},"body":{"classes/About.html":{}}}],["display_name",{"_index":47,"title":{},"body":{"classes/About.html":{}}}],["documentation",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["door",{"_index":98,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{}}}],["door_name",{"_index":100,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{}}}],["doors",{"_index":94,"title":{},"body":{"classes/About.html":{}}}],["dotenv",{"_index":564,"title":{},"body":{"dependencies.html":{}}}],["emails",{"_index":191,"title":{},"body":{"classes/Gmail.html":{}}}],["end",{"_index":389,"title":{},"body":{"classes/Office.html":{}}}],["end_date",{"_index":109,"title":{},"body":{"classes/About.html":{},"classes/Office.html":{}}}],["endpoint",{"_index":578,"title":{},"body":{"miscellaneous/functions.html":{}}}],["epitech",{"_index":78,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{}}}],["epitech_doors",{"_index":93,"title":{},"body":{"classes/About.html":{}}}],["epitech_doors_open_door",{"_index":96,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["epitechdoors",{"_index":171,"title":{"classes/EpitechDoors.html":{}},"body":{"classes/EpitechDoors.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["epitechdoors.opendoor(req",{"_index":494,"title":{},"body":{"classes/Widget.html":{}}}],["equal",{"_index":471,"title":{},"body":{"classes/Utils.html":{}}}],["err",{"_index":352,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":165,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["error.response.data",{"_index":214,"title":{},"body":{"classes/Gmail.html":{}}}],["error[addusers",{"_index":675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error[getusers",{"_index":673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error[updateuserauthtoken",{"_index":661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["events",{"_index":107,"title":{},"body":{"classes/About.html":{},"classes/Office.html":{}}}],["exchange",{"_index":62,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{}}}],["existed",{"_index":504,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["exists",{"_index":432,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":344,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":169,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"interfaces/UserInformations.html":{}}}],["express",{"_index":32,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["express.request",{"_index":10,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["express.response",{"_index":12,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["facebook_mail",{"_index":267,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["facebook_token",{"_index":268,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["facebook_user",{"_index":645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["facebookuser",{"_index":647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":179,"title":{},"body":{"classes/EpitechDoors.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{}}}],["firstname",{"_index":241,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["firsturl",{"_index":297,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["found",{"_index":396,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["function",{"_index":541,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":573,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["game's",{"_index":295,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["gamedata",{"_index":286,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["gamedata.length",{"_index":320,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["gamedata[0].queuetype",{"_index":322,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["gamedata[1",{"_index":324,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["general",{"_index":16,"title":{},"body":{"classes/About.html":{}}}],["generate",{"_index":449,"title":{},"body":{"classes/Token.html":{},"classes/Utils.html":{}}}],["generated",{"_index":473,"title":{},"body":{"classes/Utils.html":{}}}],["get(req",{"_index":9,"title":{},"body":{"classes/About.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{}}}],["getcalendarevents",{"_index":385,"title":{},"body":{"classes/Office.html":{}}}],["getcalendarevents(req",{"_index":386,"title":{},"body":{"classes/Office.html":{}}}],["getexchangerate",{"_index":144,"title":{},"body":{"classes/Currency.html":{}}}],["getexchangerate(req",{"_index":145,"title":{},"body":{"classes/Currency.html":{}}}],["getgrades",{"_index":220,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getgrades(req",{"_index":224,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getlastfivemail",{"_index":186,"title":{},"body":{"classes/Gmail.html":{}}}],["getlastfivemail(req",{"_index":187,"title":{},"body":{"classes/Gmail.html":{}}}],["getnasadayimage",{"_index":367,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasadayimage(req",{"_index":369,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasaroverimage",{"_index":368,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasaroverimage(req",{"_index":373,"title":{},"body":{"classes/Nasa.html":{}}}],["getnotifications",{"_index":221,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getnotifications(req",{"_index":226,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getpartners",{"_index":222,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getpartners(req",{"_index":228,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getprofile",{"_index":223,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getprofile(req",{"_index":232,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getrandomstring",{"_index":466,"title":{},"body":{"classes/Utils.html":{}}}],["getrandomstring(length",{"_index":467,"title":{},"body":{"classes/Utils.html":{}}}],["getrow",{"_index":393,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrow('token",{"_index":402,"title":{},"body":{"classes/Profile.html":{}}}],["gettemperature",{"_index":436,"title":{},"body":{"classes/Temperature.html":{}}}],["gettemperature(req",{"_index":438,"title":{},"body":{"classes/Temperature.html":{}}}],["getting",{"_index":331,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["getuserbytoken",{"_index":509,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuserbytoken(token",{"_index":512,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["getuserprofile",{"_index":289,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["getuserprofile(req",{"_index":290,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["getusers",{"_index":335,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getusers(infos",{"_index":672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getusers(user",{"_index":351,"title":{},"body":{"classes/Login.html":{}}}],["getweather",{"_index":437,"title":{},"body":{"classes/Temperature.html":{}}}],["getweather(req",{"_index":440,"title":{},"body":{"classes/Temperature.html":{}}}],["getwidgetsbyuserid",{"_index":508,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getwidgetsbyuserid(userid",{"_index":517,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["given",{"_index":148,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Utils.html":{},"miscellaneous/variables.html":{}}}],["gmail",{"_index":117,"title":{"classes/Gmail.html":{}},"body":{"classes/About.html":{},"classes/Gmail.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["gmail.getlastfivemail(req",{"_index":498,"title":{},"body":{"classes/Widget.html":{}}}],["gmail_inbox",{"_index":120,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["google",{"_index":119,"title":{},"body":{"classes/About.html":{}}}],["google/facebook/office",{"_index":666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["google_api_key",{"_index":118,"title":{},"body":{"classes/About.html":{},"classes/Gmail.html":{}}}],["google_mail",{"_index":265,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["google_token",{"_index":266,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["google_user",{"_index":639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googleuser",{"_index":643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gpa",{"_index":234,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["grades",{"_index":91,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{}}}],["handle",{"_index":480,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusers",{"_index":140,"title":{},"body":{"classes/Authentication.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusers(req",{"_index":142,"title":{},"body":{"classes/Authentication.html":{}}}],["handleoauthusersaction",{"_index":550,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusersaction(infos",{"_index":656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["header",{"_index":211,"title":{},"body":{"classes/Gmail.html":{}}}],["header.name",{"_index":207,"title":{},"body":{"classes/Gmail.html":{}}}],["headers",{"_index":195,"title":{},"body":{"classes/Gmail.html":{},"classes/Office.html":{},"miscellaneous/variables.html":{}}}],["hh:mm:ss",{"_index":361,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":42,"title":{},"body":{"classes/About.html":{},"miscellaneous/variables.html":{}}}],["http://api.openweathermap.org",{"_index":49,"title":{},"body":{"classes/About.html":{}}}],["http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key",{"_index":442,"title":{},"body":{"classes/Temperature.html":{}}}],["https://${region}.api.riotgames.com/lol/league/v4/entries/by",{"_index":308,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["https://${region}.api.riotgames.com/lol/summoner/v4/summoners/by",{"_index":298,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["https://api.nasa.gov",{"_index":65,"title":{},"body":{"classes/About.html":{}}}],["https://api.nasa.gov/mars",{"_index":377,"title":{},"body":{"classes/Nasa.html":{}}}],["https://api.nasa.gov/planetary/apod?api_key=${api_key}&date=${date",{"_index":375,"title":{},"body":{"classes/Nasa.html":{}}}],["https://ddragon.leagueoflegends.com/cdn/11.23.1/img/profileicon/${response.data['profileiconid']}.png",{"_index":304,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["https://epi",{"_index":182,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["https://freecurrencyapi.net",{"_index":60,"title":{},"body":{"classes/About.html":{}}}],["https://freecurrencyapi.net/api/v2/latest?base_currency=${from}&apikey=${api_key",{"_index":156,"title":{},"body":{"classes/Currency.html":{}}}],["https://gmail.googleapis.com/gmail/v1/users/${mail}/messages?maxresults=${max_results",{"_index":199,"title":{},"body":{"classes/Gmail.html":{}}}],["https://graph.facebook.com/me/?fields=id,name,email",{"_index":646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://graph.microsoft.com/v1.0/me",{"_index":104,"title":{},"body":{"classes/About.html":{},"miscellaneous/variables.html":{}}}],["https://graph.microsoft.com/v1.0/me/calendarview?startdatetime=${start_date}&enddatetime=${end_date",{"_index":390,"title":{},"body":{"classes/Office.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/binome/?format=json",{"_index":256,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/notification/message?format=json",{"_index":258,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user?format=json",{"_index":239,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${intra_autologin",{"_index":180,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["https://intra.epitech.eu/admin/autolog",{"_index":79,"title":{},"body":{"classes/About.html":{}}}],["https://www.googleapis.com/oauth2/v1/userinfo?alt=json",{"_index":194,"title":{},"body":{"classes/Gmail.html":{},"miscellaneous/variables.html":{}}}],["icon",{"_index":292,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["id",{"_index":617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifier",{"_index":522,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":74,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["import",{"_index":31,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["inbox",{"_index":121,"title":{},"body":{"classes/About.html":{},"classes/Gmail.html":{}}}],["incorrect",{"_index":355,"title":{},"body":{"classes/Login.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["informations",{"_index":17,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"miscellaneous/variables.html":{}}}],["infos",{"_index":427,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["infos.apple_mail",{"_index":605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.apple_token",{"_index":606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.facebook_mail",{"_index":603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.facebook_token",{"_index":604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.google_mail",{"_index":601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.google_token",{"_index":602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.mail",{"_index":598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.office_mail",{"_index":607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.office_token",{"_index":608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.password",{"_index":600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insert",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":260,"title":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["interfaces",{"_index":261,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"index.html":{}}}],["internal",{"_index":168,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["intra",{"_index":77,"title":{},"body":{"classes/About.html":{}}}],["intra_autologin",{"_index":95,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{}}}],["intra_epitech",{"_index":76,"title":{},"body":{"classes/About.html":{}}}],["intra_epitech_grades",{"_index":90,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_notifications",{"_index":86,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_partners",{"_index":84,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_profile",{"_index":80,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intraepitech",{"_index":218,"title":{"classes/IntraEpitech.html":{}},"body":{"classes/IntraEpitech.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["intraepitech.getgrades(req",{"_index":495,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getnotifications(req",{"_index":493,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getpartners(req",{"_index":492,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getprofile(req",{"_index":491,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitechuser",{"_index":236,"title":{"interfaces/IntraEpitechUser.html":{}},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["invalid",{"_index":401,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["ip",{"_index":35,"title":{},"body":{"classes/About.html":{}}}],["ip.split(\":\")[3",{"_index":38,"title":{},"body":{"classes/About.html":{}}}],["json.stringify(widget",{"_index":613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jsonwebtoken",{"_index":339,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"dependencies.html":{}}}],["jwt",{"_index":338,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwt.jwtpayload",{"_index":399,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwt.sign",{"_index":349,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["jwt.verify(token",{"_index":400,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwttoken",{"_index":627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":190,"title":{},"body":{"classes/Gmail.html":{}}}],["lastname",{"_index":243,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["league",{"_index":111,"title":{},"body":{"classes/About.html":{}}}],["league_of_legends",{"_index":110,"title":{},"body":{"classes/About.html":{}}}],["league_of_legends_summoner_profile",{"_index":113,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["leagueoflegends",{"_index":287,"title":{"classes/LeagueOfLegends.html":{}},"body":{"classes/LeagueOfLegends.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["leagueoflegends.getuserprofile(req",{"_index":497,"title":{},"body":{"classes/Widget.html":{}}}],["leagueoflegendsgamedata",{"_index":274,"title":{"interfaces/LeagueOfLegendsGameData.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["leagueoflegendsprofiledata",{"_index":282,"title":{"interfaces/LeagueOfLegendsProfileData.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["leaguepoints",{"_index":280,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["legends",{"_index":112,"title":{},"body":{"classes/About.html":{}}}],["length",{"_index":470,"title":{},"body":{"classes/Utils.html":{}}}],["level",{"_index":293,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["limit",{"_index":620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["list",{"_index":18,"title":{},"body":{"classes/About.html":{}}}],["literal",{"_index":680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":249,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["logged",{"_index":364,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":137,"title":{"classes/Login.html":{}},"body":{"classes/Authentication.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"interfaces/UserInformations.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logue.eu/api/doors_open?login=${autologin}&door_name=${door_name",{"_index":183,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["losses",{"_index":279,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["mail",{"_index":193,"title":{},"body":{"classes/Gmail.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":131,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["max_results",{"_index":88,"title":{},"body":{"classes/About.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{}}}],["message",{"_index":217,"title":{},"body":{"classes/Gmail.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["messageids",{"_index":201,"title":{},"body":{"classes/Gmail.html":{}}}],["messageids.push(message.id",{"_index":204,"title":{},"body":{"classes/Gmail.html":{}}}],["messages",{"_index":205,"title":{},"body":{"classes/Gmail.html":{}}}],["messages.push(msg",{"_index":212,"title":{},"body":{"classes/Gmail.html":{}}}],["method",{"_index":159,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":7,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["miscellaneous",{"_index":572,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":359,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["module.exports",{"_index":128,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["modules",{"_index":584,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moment",{"_index":33,"title":{},"body":{"classes/About.html":{},"classes/Login.html":{},"classes/Token.html":{},"dependencies.html":{}}}],["moment().format('yyyy",{"_index":358,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["moment().unix",{"_index":45,"title":{},"body":{"classes/About.html":{}}}],["moment(result[0].token_created_at",{"_index":459,"title":{},"body":{"classes/Token.html":{}}}],["moment.moment",{"_index":458,"title":{},"body":{"classes/Token.html":{}}}],["montpellier",{"_index":99,"title":{},"body":{"classes/About.html":{}}}],["mysql.createconnection",{"_index":632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":25,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["name/${summoner_name}?api_key=${api_key",{"_index":299,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["nasa",{"_index":64,"title":{"classes/Nasa.html":{}},"body":{"classes/About.html":{},"classes/Nasa.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["nasa.getnasadayimage(req",{"_index":489,"title":{},"body":{"classes/Widget.html":{}}}],["nasa.getnasaroverimage(req",{"_index":490,"title":{},"body":{"classes/Widget.html":{}}}],["new",{"_index":129,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newtoken",{"_index":348,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{}}}],["newvalues",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["next",{"_index":580,"title":{},"body":{"miscellaneous/functions.html":{}}}],["none",{"_index":658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notifications",{"_index":87,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{}}}],["now",{"_index":460,"title":{},"body":{"classes/Token.html":{}}}],["now.diff(createdat",{"_index":462,"title":{},"body":{"classes/Token.html":{}}}],["null",{"_index":456,"title":{},"body":{"classes/Token.html":{}}}],["number",{"_index":89,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"miscellaneous/variables.html":{}}}],["number(process.env.expire_time",{"_index":345,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["oauth",{"_index":139,"title":{},"body":{"classes/Authentication.html":{}}}],["oauth's",{"_index":664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["office",{"_index":101,"title":{"classes/Office.html":{}},"body":{"classes/About.html":{},"classes/Office.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["office.getcalendarevents(req",{"_index":496,"title":{},"body":{"classes/Widget.html":{}}}],["office_calendar_events",{"_index":105,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["office_mail",{"_index":271,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["office_token",{"_index":103,"title":{},"body":{"classes/About.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Office.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["office_user",{"_index":648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["officeuser",{"_index":650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["one",{"_index":450,"title":{},"body":{"classes/Token.html":{},"classes/WidgetsDB.html":{}}}],["open",{"_index":97,"title":{},"body":{"classes/About.html":{}}}],["opendoor",{"_index":173,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["opendoor(req",{"_index":174,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["opens",{"_index":176,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["optional",{"_index":27,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["otherwise",{"_index":506,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["outlook_mail",{"_index":410,"title":{},"body":{"classes/Profile.html":{}}}],["overview",{"_index":581,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":560,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":34,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["parameters",{"_index":23,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":50,"title":{},"body":{"classes/About.html":{}}}],["partners",{"_index":85,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{}}}],["password",{"_index":273,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":416,"title":{},"body":{"classes/ProfileUpdate.html":{},"classes/WidgetsDB.html":{}}}],["patch(req",{"_index":417,"title":{},"body":{"classes/ProfileUpdate.html":{},"classes/WidgetsDB.html":{}}}],["payload",{"_index":347,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["people",{"_index":230,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["photo",{"_index":381,"title":{},"body":{"classes/Nasa.html":{}}}],["photos/api/v1/rovers/curiosity/photos?earth_date=${date}&camera=${camera}&api_key=${api_key",{"_index":378,"title":{},"body":{"classes/Nasa.html":{}}}],["picture",{"_index":68,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{}}}],["plain_user",{"_index":682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plainuser",{"_index":683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["playlist",{"_index":126,"title":{},"body":{"classes/About.html":{}}}],["playlist_id",{"_index":127,"title":{},"body":{"classes/About.html":{}}}],["possible",{"_index":475,"title":{},"body":{"classes/Utils.html":{}}}],["post",{"_index":134,"title":{},"body":{"classes/Authentication.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["post(req",{"_index":135,"title":{},"body":{"classes/Authentication.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["process.env.jwt_secret",{"_index":350,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["process.env.my_sql_database",{"_index":636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_host",{"_index":633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_password",{"_index":635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_user",{"_index":634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["profile",{"_index":81,"title":{"classes/Profile.html":{}},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Profile.html":{},"coverage.html":{}}}],["profileactions",{"_index":421,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["profileiconurl",{"_index":285,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["profilepicture",{"_index":245,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["profileupdate",{"_index":414,"title":{"classes/ProfileUpdate.html":{}},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{}}}],["project",{"_index":231,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["promise",{"_index":668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise(async",{"_index":669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promo",{"_index":247,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["properties",{"_index":263,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["query",{"_index":594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["querystring",{"_index":629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queuetype",{"_index":275,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["random",{"_index":469,"title":{},"body":{"classes/Utils.html":{}}}],["rank",{"_index":277,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["ranked",{"_index":294,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["ranked_flex_sr",{"_index":325,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["ranked_solo_5x5",{"_index":323,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["rate",{"_index":63,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{}}}],["rc.0",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["region",{"_index":116,"title":{},"body":{"classes/About.html":{},"classes/LeagueOfLegends.html":{}}}],["register",{"_index":138,"title":{"classes/Register.html":{}},"body":{"classes/Authentication.html":{},"classes/Register.html":{},"coverage.html":{}}}],["registeractions",{"_index":426,"title":{},"body":{"classes/Register.html":{}}}],["registerbasicuser",{"_index":425,"title":{},"body":{"classes/Register.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registerbasicuser(infos",{"_index":428,"title":{},"body":{"classes/Register.html":{}}}],["register|login",{"_index":681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registration",{"_index":663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reject",{"_index":671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req",{"_index":28,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["req.body",{"_index":153,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["req.body.mail",{"_index":684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.body.password",{"_index":685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":394,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["req.ip",{"_index":37,"title":{},"body":{"classes/About.html":{}}}],["req.params.type",{"_index":483,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":372,"title":{},"body":{"classes/Nasa.html":{},"miscellaneous/variables.html":{}}}],["requesthandler",{"_index":542,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["requesthandler(req",{"_index":579,"title":{},"body":{"miscellaneous/functions.html":{}}}],["requests",{"_index":481,"title":{},"body":{"classes/Widget.html":{}}}],["require(\"http\").server(app",{"_index":628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":342,"title":{},"body":{"classes/Login.html":{}}}],["res",{"_index":11,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["res.status(200).json",{"_index":40,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/Gmail.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["res.status(200).json(photo",{"_index":383,"title":{},"body":{"classes/Nasa.html":{}}}],["res.status(200).json(profile",{"_index":329,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["res.status(200).json(response.data",{"_index":376,"title":{},"body":{"classes/Nasa.html":{},"classes/Office.html":{}}}],["res.status(200).json(response.data['main",{"_index":443,"title":{},"body":{"classes/Temperature.html":{}}}],["res.status(200).json(response.data['weather",{"_index":444,"title":{},"body":{"classes/Temperature.html":{}}}],["res.status(200).json(response2.data['binomes",{"_index":257,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(user",{"_index":255,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(400).json",{"_index":340,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["res.status(401).json",{"_index":395,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["res.status(403).json",{"_index":433,"title":{},"body":{"classes/Register.html":{}}}],["res.status(404).json",{"_index":404,"title":{},"body":{"classes/Profile.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["res.status(500).json",{"_index":167,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["res.status(response.status).json(response.data",{"_index":184,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["res.status(response2.status).json",{"_index":330,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["resolve",{"_index":670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":157,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["response.data",{"_index":642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response.data.data[to",{"_index":160,"title":{},"body":{"classes/Currency.html":{}}}],["response.data.email",{"_index":198,"title":{},"body":{"classes/Gmail.html":{}}}],["response.data.photos",{"_index":380,"title":{},"body":{"classes/Nasa.html":{}}}],["response.data['credits",{"_index":253,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['firstname",{"_index":242,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['gpa'][0]['gpa",{"_index":254,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['groups'][0]['name",{"_index":250,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['id",{"_index":303,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response.data['lastname",{"_index":244,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['login",{"_index":240,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['name",{"_index":306,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response.data['picture",{"_index":246,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['promo",{"_index":248,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['semester_code",{"_index":252,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['summonerlevel",{"_index":305,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response.status",{"_index":301,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response2",{"_index":200,"title":{},"body":{"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{}}}],["response2.data.length",{"_index":312,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response2.data.map((data",{"_index":313,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response2.data.messages.foreach((message",{"_index":203,"title":{},"body":{"classes/Gmail.html":{}}}],["response2.status",{"_index":311,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response3.data.payload.headers.find",{"_index":210,"title":{},"body":{"classes/Gmail.html":{}}}],["result",{"_index":259,"title":{},"body":{"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["result.affectedrows",{"_index":464,"title":{},"body":{"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["result.error",{"_index":429,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["result.length",{"_index":354,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["result.message",{"_index":430,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["result.result",{"_index":434,"title":{},"body":{"classes/Register.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["result[0",{"_index":406,"title":{},"body":{"classes/Profile.html":{}}}],["result[addusers",{"_index":676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[getusers",{"_index":677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[updateuserauthtoken",{"_index":662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["results",{"_index":130,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":15,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{}}}],["retrieves",{"_index":189,"title":{},"body":{"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/WidgetsDB.html":{}}}],["return",{"_index":39,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":29,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["routes",{"_index":546,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rover",{"_index":73,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["row",{"_index":618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rows",{"_index":621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rslt",{"_index":405,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['apple_mail",{"_index":412,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['facebook_mail",{"_index":409,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['google_mail",{"_index":408,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['mail",{"_index":407,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['office_mail",{"_index":413,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['outlook_mail",{"_index":411,"title":{},"body":{"classes/Profile.html":{}}}],["save",{"_index":678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seconds",{"_index":463,"title":{},"body":{"classes/Token.html":{}}}],["secondurl",{"_index":307,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["select",{"_index":619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["semester_code",{"_index":92,"title":{},"body":{"classes/About.html":{}}}],["semestercode",{"_index":251,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["server",{"_index":43,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":577,"title":{},"body":{"miscellaneous/functions.html":{}}}],["services",{"_index":19,"title":{},"body":{"classes/About.html":{}}}],["set",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signed",{"_index":665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":3,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["spoitfy.com",{"_index":123,"title":{},"body":{"classes/About.html":{}}}],["spotify",{"_index":122,"title":{},"body":{"classes/About.html":{}}}],["spotify_tracklist",{"_index":124,"title":{},"body":{"classes/About.html":{}}}],["src/.../authactions.ts",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.ts",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../databaseactions.ts",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../profileactions.ts",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../registeractions.ts",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../request_handler.ts",{"_index":575,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../routes.ts",{"_index":574,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../tokenaction.ts",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/database/database.ts",{"_index":524,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/databaseactions.ts",{"_index":528,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/interfaces.ts",{"_index":262,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["src/index.ts",{"_index":538,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/request_handler.ts",{"_index":540,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/routes.ts",{"_index":544,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/routes/about/about.ts",{"_index":5,"title":{},"body":{"classes/About.html":{},"coverage.html":{}}}],["src/routes/about/about.ts:11",{"_index":14,"title":{},"body":{"classes/About.html":{}}}],["src/routes/auth/authactions.ts",{"_index":549,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/auth/login.ts",{"_index":332,"title":{},"body":{"classes/Login.html":{},"coverage.html":{}}}],["src/routes/auth/login.ts:14",{"_index":333,"title":{},"body":{"classes/Login.html":{}}}],["src/routes/auth/oauth.ts",{"_index":133,"title":{},"body":{"classes/Authentication.html":{},"coverage.html":{}}}],["src/routes/auth/oauth.ts:12",{"_index":136,"title":{},"body":{"classes/Authentication.html":{}}}],["src/routes/auth/register.ts",{"_index":423,"title":{},"body":{"classes/Register.html":{},"coverage.html":{}}}],["src/routes/auth/register.ts:13",{"_index":424,"title":{},"body":{"classes/Register.html":{}}}],["src/routes/auth/registeractions.ts",{"_index":551,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/auth/token.ts",{"_index":445,"title":{},"body":{"classes/Token.html":{},"coverage.html":{}}}],["src/routes/auth/token.ts:16",{"_index":446,"title":{},"body":{"classes/Token.html":{}}}],["src/routes/auth/token.ts:52",{"_index":448,"title":{},"body":{"classes/Token.html":{}}}],["src/routes/auth/tokenaction.ts",{"_index":554,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/profile/profile.ts",{"_index":391,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{}}}],["src/routes/profile/profile.ts:13",{"_index":392,"title":{},"body":{"classes/Profile.html":{}}}],["src/routes/profile/profileactions.ts",{"_index":555,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/profile/profileupdate.ts",{"_index":415,"title":{},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{}}}],["src/routes/profile/profileupdate.ts:13",{"_index":418,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["src/routes/widgets/currency.ts",{"_index":143,"title":{},"body":{"classes/Currency.html":{},"coverage.html":{}}}],["src/routes/widgets/currency.ts:12",{"_index":146,"title":{},"body":{"classes/Currency.html":{}}}],["src/routes/widgets/epitechdoors.ts",{"_index":172,"title":{},"body":{"classes/EpitechDoors.html":{},"coverage.html":{}}}],["src/routes/widgets/epitechdoors.ts:12",{"_index":175,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["src/routes/widgets/gmail.ts",{"_index":185,"title":{},"body":{"classes/Gmail.html":{},"coverage.html":{}}}],["src/routes/widgets/gmail.ts:11",{"_index":188,"title":{},"body":{"classes/Gmail.html":{}}}],["src/routes/widgets/intraepitech.ts",{"_index":219,"title":{},"body":{"classes/IntraEpitech.html":{},"coverage.html":{}}}],["src/routes/widgets/intraepitech.ts:13",{"_index":233,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:136",{"_index":225,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:56",{"_index":229,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:94",{"_index":227,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/leagueoflegends.ts",{"_index":288,"title":{},"body":{"classes/LeagueOfLegends.html":{},"coverage.html":{}}}],["src/routes/widgets/leagueoflegends.ts:13",{"_index":291,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["src/routes/widgets/nasa.ts",{"_index":366,"title":{},"body":{"classes/Nasa.html":{},"coverage.html":{}}}],["src/routes/widgets/nasa.ts:11",{"_index":370,"title":{},"body":{"classes/Nasa.html":{}}}],["src/routes/widgets/nasa.ts:34",{"_index":374,"title":{},"body":{"classes/Nasa.html":{}}}],["src/routes/widgets/office.ts",{"_index":384,"title":{},"body":{"classes/Office.html":{},"coverage.html":{}}}],["src/routes/widgets/office.ts:12",{"_index":387,"title":{},"body":{"classes/Office.html":{}}}],["src/routes/widgets/temperature.ts",{"_index":435,"title":{},"body":{"classes/Temperature.html":{},"coverage.html":{}}}],["src/routes/widgets/temperature.ts:12",{"_index":439,"title":{},"body":{"classes/Temperature.html":{}}}],["src/routes/widgets/temperature.ts:36",{"_index":441,"title":{},"body":{"classes/Temperature.html":{}}}],["src/routes/widgets/widget.ts",{"_index":478,"title":{},"body":{"classes/Widget.html":{},"coverage.html":{}}}],["src/routes/widgets/widget.ts:20",{"_index":479,"title":{},"body":{"classes/Widget.html":{}}}],["src/routes/widgets/widgetsdb.ts",{"_index":500,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{}}}],["src/routes/widgets/widgetsdb.ts:13",{"_index":501,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["src/routes/widgets/widgetsdb.ts:79",{"_index":503,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["src/utils/utils.ts",{"_index":465,"title":{},"body":{"classes/Utils.html":{},"coverage.html":{}}}],["src/utils/utils.ts:7",{"_index":468,"title":{},"body":{"classes/Utils.html":{}}}],["start",{"_index":388,"title":{},"body":{"classes/Office.html":{}}}],["start_date",{"_index":108,"title":{},"body":{"classes/About.html":{},"classes/Office.html":{}}}],["statements",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":36,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":208,"title":{},"body":{"classes/Gmail.html":{}}}],["success",{"_index":215,"title":{},"body":{"classes/Gmail.html":{},"classes/WidgetsDB.html":{}}}],["summoner",{"_index":114,"title":{},"body":{"classes/About.html":{},"classes/LeagueOfLegends.html":{}}}],["summoner/${summoner_id}?api_key=${api_key",{"_index":309,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["summoner_id",{"_index":296,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["summoner_name",{"_index":115,"title":{},"body":{"classes/About.html":{},"classes/LeagueOfLegends.html":{}}}],["summonerlevel",{"_index":284,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["summonername",{"_index":283,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["switch",{"_index":484,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":559,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["target_currency",{"_index":163,"title":{},"body":{"classes/Currency.html":{}}}],["temperature",{"_index":54,"title":{"classes/Temperature.html":{}},"body":{"classes/About.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["temperature.gettemperature(req",{"_index":487,"title":{},"body":{"classes/Widget.html":{}}}],["temperature.getweather(req",{"_index":488,"title":{},"body":{"classes/Widget.html":{}}}],["text",{"_index":474,"title":{},"body":{"classes/Utils.html":{}}}],["tier",{"_index":276,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["token",{"_index":365,"title":{"classes/Token.html":{}},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token.split",{"_index":397,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["token_created_at",{"_index":363,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["token_wl",{"_index":543,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenaction",{"_index":454,"title":{},"body":{"classes/Token.html":{}}}],["tracklist",{"_index":125,"title":{},"body":{"classes/About.html":{}}}],["true",{"_index":216,"title":{},"body":{"classes/Gmail.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":151,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":26,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":343,"title":{},"body":{"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["unknown",{"_index":30,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["unranked",{"_index":326,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["update",{"_index":419,"title":{},"body":{"classes/ProfileUpdate.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["updated",{"_index":688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos",{"_index":336,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateinfos(['facebook_mail",{"_index":690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['google_mail",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['mail",{"_index":691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['office_mail",{"_index":689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['token",{"_index":362,"title":{},"body":{"classes/Login.html":{}}}],["updates",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuserauthtoken",{"_index":533,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateuserauthtoken(infos",{"_index":659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuserinformations",{"_index":420,"title":{},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateuserinformations(req",{"_index":422,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["updatewidget",{"_index":511,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updatewidget(userid",{"_index":519,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["url",{"_index":155,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":82,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":192,"title":{},"body":{"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["user.length",{"_index":514,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["user.type",{"_index":652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.email",{"_index":653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.mail",{"_index":655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.password",{"_index":692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user[0]['id",{"_index":516,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["user_id",{"_index":612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":515,"title":{},"body":{"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["userinformations",{"_index":264,"title":{"interfaces/UserInformations.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userjson",{"_index":638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["username",{"_index":272,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils",{"_index":451,"title":{"classes/Utils.html":{}},"body":{"classes/Token.html":{},"classes/Utils.html":{},"coverage.html":{}}}],["utils/utils",{"_index":452,"title":{},"body":{"classes/Token.html":{}}}],["valid",{"_index":341,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["value",{"_index":209,"title":{},"body":{"classes/Gmail.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":525,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":585,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["wasfound",{"_index":597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["weather",{"_index":46,"title":{},"body":{"classes/About.html":{},"classes/Temperature.html":{}}}],["whererow",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wherevalue",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["widget",{"_index":477,"title":{"classes/Widget.html":{}},"body":{"classes/Widget.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["widgetid",{"_index":615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["widgets",{"_index":20,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["widgetsdb",{"_index":499,"title":{"classes/WidgetsDB.html":{}},"body":{"classes/WidgetsDB.html":{},"coverage.html":{}}}],["winrate",{"_index":281,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["wins",{"_index":278,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/About.html":{"url":"classes/About.html","title":"class - About","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  About\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/about/about.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/about/about.ts:11\n                \n            \n\n\n            \n                \n                    retrieve general informations and a list of services and their widgets awailable in the dashboard\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport moment from \"moment\";\n\nclass About {\n  /**\n   * retrieve general informations and a list of services and their widgets awailable in the dashboard\n   * @param {express.Request} req\n   * @param {express.Response} res\n   * @returns\n   */\n  async get(req: express.Request, res: express.Response) {\n    let ip: string = req.ip;\n    ip = ip.split(\":\")[3];\n\n    return res.status(200).json({\n      client: {\n        host: ip,\n      },\n      server: {\n        current_time: moment().unix(),\n        services: [\n          {\n            name: \"weather\",\n            display_name: \"Weather\",\n            api_url: \"http://api.openweathermap.org\",\n            params: [\n              {\n                name: \"api_key\",\n                type: \"string\",\n              },\n            ],\n            widgets: [\n              {\n                name: \"city_temperature\",\n                display_name: \"City temperature\",\n                description: \"Display temperature for a city\",\n                params: [\n                  {\n                    name: \"city\",\n                    type: \"string\",\n                  },\n                ],\n              },\n              {\n                name: \"city_weather\",\n                display_name: \"City weather\",\n                description: \"Display weather for a city\",\n                params: [\n                  {\n                    name: \"city\",\n                    type: \"string\",\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: \"currency\",\n            display_name: \"Currency Converter\",\n            api_url: \"https://freecurrencyapi.net/\",\n            params: [\n              {\n                name: \"api_key\",\n                type: \"string\",\n              },\n            ],\n            widgets: [\n              {\n                name: \"currency_converter\",\n                display_name: \"Currency Converter\",\n                description: \"Display the exchange rate of a currency\",\n                params: [\n                  {\n                    name: \"from\",\n                    type: \"string\",\n                  },\n                  {\n                    name: \"to\",\n                    type: \"string\",\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: \"nasa\",\n            display_name: \"NASA\",\n            api_url: \"https://api.nasa.gov/\",\n            params: [\n              {\n                name: \"api_key\",\n                type: \"string\",\n              },\n            ],\n            widgets: [\n              {\n                name: \"apod\",\n                display_name: \"Astronomy Picture of the Day\",\n                description: \"Display the Astronomy Picture of the Day\",\n                params: [\n                  {\n                    name: \"date\",\n                    type: \"string\",\n                  },\n                ],\n              },\n              {\n                name: \"curiosity_image\",\n                display_name: \"Curiosity Rover Image\",\n                description: \"Display an image from a curiosity\",\n                params: [\n                  {\n                    name: \"date\",\n                    type: \"string\",\n                  },\n                  {\n                    name: \"camera\",\n                    type: \"string\",\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: \"intra_epitech\",\n            display_name: \"Intra Epitech\",\n            params: [],\n            api_url: \"https://intra.epitech.eu/admin/autolog\",\n            widgets: [\n              {\n                name: \"intra_epitech_profile\",\n                display_name: \"Profile\",\n                description: \"Display the profile of an intra epitech user\",\n                params: [\n                  {\n                    name: \"autologin\",\n                    type: \"string\",\n                  },\n                ],\n              },\n              {\n                name: \"intra_epitech_partners\",\n                display_name: \"Partners\",\n                description: \"Display the partners of an intra epitech user\",\n                params: [\n                  {\n                    name: \"autologin\",\n                    type: \"string\",\n                  },\n                ],\n              },\n              {\n                name: \"intra_epitech_notifications\",\n                display_name: \"Notifications\",\n                description:\n                  \"Display the notifications of an intra epitech user\",\n                params: [\n                  {\n                    name: \"autologin\",\n                    type: \"string\",\n                  },{\n                    name: \"max_results\",\n                    type: \"number\",\n                  }\n                ],\n              },\n              {\n                name: \"intra_epitech_grades\",\n                display_name: \"Grades\",\n                description: \"Display the grades of an intra epitech user\",\n                params: [\n                  {\n                    name: \"autologin\",\n                    type: \"string\",\n                  },{\n                    name: \"semester_code\",\n                    type: \"string\",\n                  }\n                ],\n              },\n            ],\n          },\n          {\n            name: \"epitech_doors\",\n            display_name: \"Epitech Doors\",\n            params: [\n              {\n                name: \"intra_autologin\",\n                type: \"string\",\n              },\n            ],\n            api_url: \"https://intra.epitech.eu/admin/autolog\",\n            widgets: [\n              {\n                name: \"epitech_doors_open_door\",\n                display_name: \"Open door\",\n                description: \"Open the door in epitech montpellier\",\n                params: [\n                  {\n                    name: \"door_name\",\n                    type: \"string\",\n                  },\n                  {\n                    name: \"intra_autologin\",\n                    type: \"string\",\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: \"office\",\n            display_name: \"Office 365\",\n            params: [\n              {\n                name: \"office_token\",\n                type: \"string\",\n              },\n            ],\n            api_url: \"https://graph.microsoft.com/v1.0/me/\",\n            widgets: [\n              {\n                name: \"office_calendar_events\",\n                display_name: \"Calendar events\",\n                description: \"Display the calendar events of an office user\",\n                params: [\n                  {\n                    name: \"start_date\",\n                    type: \"string\",\n                  },\n                  {\n                    name: \"end_date\",\n                    type: \"string\",\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: \"league_of_legends\",\n            display_name: \"League of Legends\",\n            params: [\n              {\n                name: \"api_key\",\n                type: \"string\",\n              },\n            ],\n            api_url: \"\",\n            widgets: [\n              {\n                name: \"league_of_legends_summoner_profile\",\n                display_name: \"Summoner profile\",\n                description:\n                  \"Display the summoner profile of a league of legends user\",\n                params: [\n                  {\n                    name: \"summoner_name\",\n                    type: \"string\",\n                  },\n                  {\n                    name: \"region\",\n                    type: \"string\",\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: \"gmail\",\n            display_name: \"Gmail\",\n            params: [\n              {\n                name: \"google_api_key\",\n                type: \"string\",\n              },\n            ],\n            api_url: \"google\",\n            widgets: [\n              {\n                name: \"gmail_inbox\",\n                display_name: \"Inbox\",\n                description: \"Display the inbox of a gmail user\",\n                params: [\n                  {\n                    name: \"max_results\",\n                    type: \"number\",\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: \"spotify\",\n            display_name: \"Spotify\",\n            params: [],\n            api_url: \"spoitfy.com\",\n            widgets: [\n              {\n                name: \"spotify_tracklist\",\n                display_name: \"Tracklist\",\n                description: \"Display the tracklist of a spotify playlist\",\n                params: [\n                  {\n                    name: \"playlist_id\",\n                    type: \"string\",\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      },\n    });\n  }\n}\n\nmodule.exports = new About();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Authentication.html":{"url":"classes/Authentication.html","title":"class - Authentication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Authentication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/OAuth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/OAuth.ts:12\n                \n            \n\n\n            \n                \n                    login / register a OAuth user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport { handleOAuthUsers } from './authActions';\n\nclass Authentication {\n    \n    /**\n     * login / register a OAuth user\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async post(req: express.Request, res: express.Response) {\n        return handleOAuthUsers(req, res);\n    }\n}\n\nmodule.exports = new Authentication();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Currency.html":{"url":"classes/Currency.html","title":"class - Currency","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Currency\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/currency.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getExchangeRate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getExchangeRate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getExchangeRate(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/currency.ts:12\n                \n            \n\n\n            \n                \n                    retrieve the current exchange rate for a given currency\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Currency {\n\n    /**\n     * retrieve the current exchange rate for a given currency\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getExchangeRate(req: express.Request, res: express.Response) {\n        try {\n            const { from, to, api_key } = req.body;\n            console.log(from, to);\n            const url: string = `https://freecurrencyapi.net/api/v2/latest?base_currency=${from}&apikey=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            let currency: number = response.data.data[to];\n            console.log('currency == ', currency);\n            return res.status(200).json({\n                \"base_currency\": from,\n                \"target_currency\": to,\n                \"rate\": currency\n            });\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Currency();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EpitechDoors.html":{"url":"classes/EpitechDoors.html","title":"class - EpitechDoors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EpitechDoors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/epitechDoors.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                openDoor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        openDoor\n                        \n                    \n                \n            \n            \n                \n                    \n                    openDoor(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/epitechDoors.ts:12\n                \n            \n\n\n            \n                \n                    opens the given door of the Epitech campus\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass EpitechDoors {\n\n    /**\n     * opens the given door of the Epitech campus\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async openDoor(req: express.Request, res: express.Response) {\n        try {\n            const { intra_autologin, door_name } = req.body;\n            let autoLogin: string = intra_autologin;\n            let url: string = \"\";\n\n            if (autoLogin.startsWith(\"https://intra.epitech.eu/\") == false) {\n                autoLogin = `https://intra.epitech.eu/${intra_autologin}`;\n            }\n            console.log('autologin == ', autoLogin);\n            url = `https://epi-logue.eu/api/doors_open?login=${autoLogin}&door_name=${door_name}`;\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(response.status).json(response.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n};\n\nexport default new EpitechDoors();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Gmail.html":{"url":"classes/Gmail.html","title":"class - Gmail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Gmail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/gmail.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getLastFiveMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getLastFiveMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLastFiveMail(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/gmail.ts:11\n                \n            \n\n\n            \n                \n                    retrieves the last max_results emails from the user's inbox\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport axios, { AxiosResponse } from \"axios\";\n\nclass Gmail {\n  /**\n   * retrieves the last max_results emails from the user's inbox\n   * @param {express.Request} req\n   * @param {express.Response} res\n   * @returns\n   */\n  async getLastFiveMail(req: express.Request, res: express.Response) {\n    try {\n      const { google_api_key, max_results } = req.body;\n      let mail: string = \"\";\n\n      let response: AxiosResponse = await axios({\n        method: \"GET\",\n        url: \"https://www.googleapis.com/oauth2/v1/userinfo?alt=json\",\n        headers: {\n          Authorization: `Bearer ${google_api_key}`,\n        },\n      });\n      mail = response.data.email;\n      const url = `https://gmail.googleapis.com/gmail/v1/users/${mail}/messages?maxResults=${max_results}`;\n      let response2: AxiosResponse = await axios({\n        method: \"GET\",\n        url: url,\n        headers: {\n          Authorization: `Bearer ${google_api_key}`,\n        },\n      });\n      let messageIds: Array = [];\n      response2.data.messages.forEach((message: any) => {\n        messageIds.push(message.id);\n      });\n      let messages: Array = [];\n      for (let i = 0; i  header.name === \"Subject\"\n            ).value,\n            date: response3.data.payload.headers.find(\n              (header: any) => header.name === \"Date\"\n            ).value,\n            from: response3.data.payload.headers.find(\n              (header: any) => header.name === \"From\"\n            ).value,\n            to: response3.data.payload.headers.find(\n              (header: any) => header.name === \"To\"\n            ).value,\n          };\n          messages.push(msg);\n        } catch (error) {\n          console.error(\"Test\", error.response.data);\n        }\n      }\n      return res.status(200).json({\n        success: true,\n        messages: messages,\n      });\n    } catch (error) {\n      console.log(error);\n      return res.status(500).json({\n        message: \"Internal Server Error\",\n      });\n    }\n  }\n}\n\nexport default new Gmail();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IntraEpitech.html":{"url":"classes/IntraEpitech.html","title":"class - IntraEpitech","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IntraEpitech\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/intraEpitech.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getGrades\n                            \n                            \n                                    Async\n                                getNotifications\n                            \n                            \n                                    Async\n                                getPartners\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getGrades\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGrades(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:136\n                \n            \n\n\n            \n                \n                    retrieves the user's grades\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNotifications(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:94\n                \n            \n\n\n            \n                \n                    retrieves user's notifications\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPartners\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPartners(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:56\n                \n            \n\n\n            \n                \n                    retrieves the user's partners (the people with whom the user did a project with)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:13\n                \n            \n\n\n            \n                \n                    retrieves the user's profile informations (gpa, credits, profile picture ...)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\nimport { IntraEpitechUser } from '../../database/interfaces';\n\nclass IntraEpitech {\n\n    /**\n     * retrieves the user's profile informations (gpa, credits, profile picture ...)\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getProfile(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n            url = `https://intra.epitech.eu/${autoLogin}/user?format=json`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            const user: IntraEpitechUser = {\n                login: response.data['login'],\n                firstname: response.data['firstname'],\n                lastname: response.data['lastname'],\n                profilePicture: response.data['picture'],\n                promo: response.data['promo'],\n                location: response.data['groups'][0]['name'],\n                semesterCode: response.data['semester_code'],\n                credits: response.data['credits'],\n                gpa: response.data['gpa'][0]['gpa'],\n            };\n            return res.status(200).json(user);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    /**\n     * retrieves the user's partners (the people with whom the user did a project with)\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getPartners(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n    \n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n    \n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: `https://intra.epitech.eu/${autoLogin}/user?format=json`\n            });\n            const login: string = response.data['login'];\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/binome/?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response2.data['binomes']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n\n    /**\n     * retrieves user's notifications\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getNotifications(req: express.Request, res: express.Response) {\n        try {\n            const { autologin, max_results } = req.body;            \n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: `https://intra.epitech.eu/${autoLogin}/user?format=json`\n            });\n            const login: string = response.data['login'];\n\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/notification/message?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            let result = [];\n\n            for (let i: number = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IntraEpitechUser.html":{"url":"interfaces/IntraEpitechUser.html","title":"interface - IntraEpitechUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IntraEpitechUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            credits\n                                        \n                                \n                                \n                                        \n                                            firstname\n                                        \n                                \n                                \n                                        \n                                            gpa\n                                        \n                                \n                                \n                                        \n                                            lastname\n                                        \n                                \n                                \n                                        \n                                            location\n                                        \n                                \n                                \n                                        \n                                            login\n                                        \n                                \n                                \n                                        \n                                            profilePicture\n                                        \n                                \n                                \n                                        \n                                            promo\n                                        \n                                \n                                \n                                        \n                                            semesterCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        credits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        credits:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gpa\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gpa:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        location:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profilePicture\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profilePicture:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        promo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        promo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        semesterCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        semesterCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeagueOfLegends.html":{"url":"classes/LeagueOfLegends.html","title":"class - LeagueOfLegends","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeagueOfLegends\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/leagueoflegends.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/leagueoflegends.ts:13\n                \n            \n\n\n            \n                \n                    retrieves the summoner profile informations (user's icon, level, name, ranked game's rank ...)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import axios, { AxiosResponse } from 'axios';\nimport express from 'express';\nimport { LeagueOfLegendsProfileData, LeagueOfLegendsGameData } from '../../database/interfaces';\n\nclass LeagueOfLegends {\n\n    /**\n     * retrieves the summoner profile informations (user's icon, level, name, ranked game's rank ...)\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getUserProfile(req: express.Request, res: express.Response) {\n        try {\n            const { api_key, summoner_name, region } = req.body;\n            let summoner_id: string = '';\n            let profileIconURL: string = '';\n            let summonerLevel: number = 0;\n            let summonerName: string = '';\n            let gameData: Array = [];\n            \n            const firstURL = `https://${region}.api.riotgames.com/lol/summoner/v4/summoners/by-name/${summoner_name}?api_key=${api_key}`;\n            \n            console.debug(\"firstURL: \", firstURL);\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: firstURL,\n            });\n            if (response.status === 200) {\n                summoner_id = response.data['id'];\n                profileIconURL = `https://ddragon.leagueoflegends.com/cdn/11.23.1/img/profileicon/${response.data['profileIconId']}.png`;\n                summonerLevel = response.data['summonerLevel'];\n                summonerName = response.data['name'];\n            }\n            const secondURL = `https://${region}.api.riotgames.com/lol/league/v4/entries/by-summoner/${summoner_id}?api_key=${api_key}`;\n            console.debug(\"secondURL: \", secondURL);\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: secondURL,\n            });\n            if (response2.status == 200) {\n                if (response2.data.length > 0) {\n                    gameData = response2.data.map((data: any) => {\n                        return {\n                            queueType: data.queueType,\n                            tier: data.tier,\n                            rank: data.rank,\n                            wins: data.wins,\n                            losses: data.losses,\n                            leaguePoints: data.leaguePoints,\n                            winRate: data.wins / (data.wins + data.losses),\n                        };\n                    });\n                    if (gameData.length == 1 && gameData[0].queueType == 'RANKED_SOLO_5x5') {\n                        gameData[1] = {\n                            queueType: 'RANKED_FLEX_SR',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        };\n                    }\n                    else if (gameData.length == 1 && gameData[0].queueType == 'RANKED_FLEX_SR') {\n                        gameData[1] = {\n                            queueType: 'RANKED_SOLO_5x5',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        };\n                    }\n                }\n                else {\n                    gameData = [\n                        {\n                            queueType: 'RANKED_FLEX_SR',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        },\n                        {\n                            queueType: 'RANKED_SOLO_5x5',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        },\n                    ];\n                }\n                console.debug(\"setting profile\");\n                let profile: LeagueOfLegendsProfileData = {\n                    summonerName,\n                    summonerLevel,\n                    profileIconURL,\n                    gameData,\n                };\n                console.debug(\"profile: \", profile);\n                return res.status(200).json(profile);\n            }\n            else {\n                return res.status(response2.status).json({\n                    error: 'Error getting user profile',\n                });\n            }\n        } catch (error) {\n            console.log(error);\n            res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new LeagueOfLegends();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LeagueOfLegendsGameData.html":{"url":"interfaces/LeagueOfLegendsGameData.html","title":"interface - LeagueOfLegendsGameData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LeagueOfLegendsGameData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            leaguePoints\n                                        \n                                \n                                \n                                        \n                                            losses\n                                        \n                                \n                                \n                                        \n                                            queueType\n                                        \n                                \n                                \n                                        \n                                            rank\n                                        \n                                \n                                \n                                        \n                                            tier\n                                        \n                                \n                                \n                                        \n                                            winRate\n                                        \n                                \n                                \n                                        \n                                            wins\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        leaguePoints\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leaguePoints:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        losses\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        losses:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queueType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queueType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rank\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rank:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tier\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tier:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        winRate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        winRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wins\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        wins:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LeagueOfLegendsProfileData.html":{"url":"interfaces/LeagueOfLegendsProfileData.html","title":"interface - LeagueOfLegendsProfileData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LeagueOfLegendsProfileData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            gameData\n                                        \n                                \n                                \n                                        \n                                            profileIconURL\n                                        \n                                \n                                \n                                        \n                                            summonerLevel\n                                        \n                                \n                                \n                                        \n                                            summonerName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        gameData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gameData:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileIconURL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profileIconURL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        summonerLevel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        summonerLevel:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        summonerName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        summonerName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Login.html":{"url":"classes/Login.html","title":"class - Login","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Login\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/login.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/login.ts:14\n                \n            \n\n\n            \n                \n                    login a basic user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport { getUsers, updateInfos } from \"../../database/databaseActions\";\nimport { UserInformations } from \"../../database/interfaces\";\nimport jwt from 'jsonwebtoken';\nimport moment from \"moment\";\n\nclass Login {\n    /**\n     * login a basic user\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async post(req: express.Request, res: express.Response) {\n        const { mail, password } = req.body;\n\n        if (!mail || !password) {\n            return res.status(400).json({\n                valid: false,\n                message: \"mail and password are required\"\n            });\n        }\n\n        const user: UserInformations = {\n            mail: mail,\n            google_mail: undefined,\n            google_token: undefined,\n            facebook_mail: undefined,\n            facebook_token: undefined,\n            apple_mail: undefined,\n            apple_token: undefined,\n            office_mail: undefined,\n            office_token: undefined,\n            username: undefined,\n            password: password\n        };\n\n        const expiresIn: number = Number(process.env.EXPIRE_TIME) || 60 * 60;\n        const payload = {\n            mail: mail\n        };\n        const newToken: string = jwt.sign(\n            payload,\n            process.env.JWT_SECRET,\n            { expiresIn: expiresIn }\n        );\n\n        await getUsers(user, async (err: any, result: any) => {\n            if (err) {\n                return res.status(500).json({\n                    valid: false,\n                    message: err\n                });\n            } else {\n                let _result = result;\n                if (result.length === 0) {\n                    return res.status(400).json({\n                        valid: false,\n                        message: \"mail or password is incorrect\"\n                    });\n                } else {\n                    _result['token'] = newToken;\n                    _result['token_created_at'] = moment().format('YYYY-MM-DD HH:mm:ss');\n                    await updateInfos(['token', 'token_created_at'], [newToken, moment().format('YYYY-MM-DD HH:mm:ss')], 'mail', mail, (err: any, result: any) => {\n                        if (err) {\n                            return res.status(500).json({\n                                valid: false,\n                                message: err\n                            });\n                        } else {\n                            return res.status(200).json({ error: false, message: \"user logged in\", token: newToken, expiresIn: expiresIn, result: _result });\n                        }\n                    });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Login();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Nasa.html":{"url":"classes/Nasa.html","title":"class - Nasa","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Nasa\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/nasa.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getNasaDayImage\n                            \n                            \n                                    Async\n                                getNasaRoverImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNasaDayImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNasaDayImage(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/nasa.ts:11\n                \n            \n\n\n            \n                \n                    retrieves the image of the day from the nasa API\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        express request\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        express response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNasaRoverImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNasaRoverImage(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/nasa.ts:34\n                \n            \n\n\n            \n                \n                    retrieves the curiosity rover image of the day from the nasa API\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        express request\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        express response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport axios, { AxiosResponse } from \"axios\";\n\nclass Nasa {\n    /**\n     * retrieves the image of the day from the nasa API\n     * @param req express request\n     * @param res express response\n     * @returns\n     */\n    async getNasaDayImage(req: express.Request, res: express.Response) {\n        try {\n            const { date, api_key } = req.body;\n            const url = `https://api.nasa.gov/planetary/apod?api_key=${api_key}&date=${date}`;\n\n            let response: AxiosResponse = await axios({\n                method: \"get\",\n                url: url\n            });\n            return res.status(200).json(response.data);\n        } catch (error) {\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    /**\n     * retrieves the curiosity rover image of the day from the nasa API\n     * @param req express request\n     * @param res express response\n     * @returns \n     */\n    async getNasaRoverImage(req: express.Request, res: express.Response) {\n        try {\n            const { date, camera, api_key } = req.body;\n            const url = `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=${date}&camera=${camera}&api_key=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: \"get\",\n                url: url\n            });\n            let data = response.data.photos;\n            let photo: any = data[0] ? data[0] : {};\n\n            return res.status(200).json(photo);\n        } catch (error) {\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Nasa();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Office.html":{"url":"classes/Office.html","title":"class - Office","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Office\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/office.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCalendarEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCalendarEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCalendarEvents(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/office.ts:12\n                \n            \n\n\n            \n                \n                    retrieves the office calendar events from start to end date from the office api\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Office {\n\n    /**\n     * retrieves the office calendar events from start to end date from the office api\n     * @param {express.Request} req\n     * @param {express.Response} res \n     * @returns \n     */\n    async getCalendarEvents(req: express.Request, res: express.Response) {\n        try {\n            const { start_date, office_token, end_date } = req.body;\n            \n            const url = `https://graph.microsoft.com/v1.0/me/calendarview?startdatetime=${start_date}&enddatetime=${end_date}`;\n    \n            let response: AxiosResponse = await axios({\n                method: 'GET',\n                url,\n                headers: {\n                    'Authorization': `Bearer ${office_token}`\n                }\n            });\n            return res.status(200).json(response.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Office();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/profile/profile.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/profile/profile.ts:13\n                \n            \n\n\n            \n                \n                    retrieves the user informations\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport { getRow, getUsers } from '../../database/databaseActions';\n\nclass Profile {\n\n    /**\n     * retrieves the user informations\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async get(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n        await getRow('token', token, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                return res.status(500).json({ error: false, message: \"internal server error\" });\n            } else {\n                if (result.length === 0) {\n                    return res.status(404).json({ error: false, message: \"user not found\" });\n                } else {\n                    let rslt = result[0];\n                    let user = {\n                        mail: rslt['mail'],\n                        google_mail: rslt['google_mail'],\n                        facebook_mail: rslt['facebook_mail'],\n                        outlook_mail: rslt['outlook_mail'],\n                        apple_mail: rslt['apple_mail'],\n                        office_mail: rslt['office_mail'],\n                    };\n\n                    return res.status(200).json({ error: true, message: \"user found\", result: user });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Profile();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileUpdate.html":{"url":"classes/ProfileUpdate.html","title":"class - ProfileUpdate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileUpdate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/profile/profileUpdate.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/profile/profileUpdate.ts:13\n                \n            \n\n\n            \n                \n                    update a user informations if the given token is valid\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { updateUserInformations } from \"./profileActions\";\n\nclass ProfileUpdate {\n\n    /**\n     * update a user informations if the given token is valid\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async patch(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n        await updateUserInformations(req, res);\n    }\n}\n\nmodule.exports = new ProfileUpdate();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Register.html":{"url":"classes/Register.html","title":"class - Register","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Register\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/register.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/register.ts:13\n                \n            \n\n\n            \n                \n                    register a basic user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\"\nimport { UserInformations } from \"../../database/interfaces\";\nimport { registerBasicUser } from \"./registerActions\";\n\nclass Register {\n\n    /**\n     * register a basic user\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async post(req: express.Request, res: express.Response) {\n        const { mail, password } = req.body;\n\n        const infos: UserInformations = {\n            mail: mail,\n            google_mail: undefined,\n            google_token: undefined,\n            facebook_mail: undefined,\n            facebook_token: undefined,\n            apple_mail: undefined,\n            apple_token: undefined,\n            office_mail: undefined,\n            office_token: undefined,\n            username: undefined,\n            password: password,\n        };\n        let result = await registerBasicUser(infos);\n\n        if (result.error === true) {\n            return res.status(500).json({\n                error: true,\n                message: result.message,\n            });\n        }\n        if (result.error === false && result.message === \"user already exists\") {\n            return res.status(403).json({ error: true, message: result.message });\n        }\n        return res.status(200).json({ error: false, message: result.message, result: result.result });\n    }\n}\n\nmodule.exports = new Register();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Temperature.html":{"url":"classes/Temperature.html","title":"class - Temperature","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Temperature\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/temperature.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTemperature\n                            \n                            \n                                    Async\n                                getWeather\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTemperature\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTemperature(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/temperature.ts:12\n                \n            \n\n\n            \n                \n                    retrieves the temperature of a city\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getWeather\n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeather(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/temperature.ts:36\n                \n            \n\n\n            \n                \n                    retrieves the weather of a city\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Temperature {\n\n    /**\n     * retrieves the temperature of a city\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getTemperature(req: express.Request, res: express.Response) {\n        try {\n            const { city, api_key } = req.body;\n            const url: string = `http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response.data['main']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    /**\n     * retrieves the weather of a city\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getWeather(req: express.Request, res: express.Response) {\n        try {\n            const { city, api_key } = req.body;\n            const url: string = `http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response.data['weather']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n};\n\nexport default new Temperature();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Token.html":{"url":"classes/Token.html","title":"class - Token","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Token\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/token.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/token.ts:16\n                \n            \n\n\n            \n                \n                    check if the given token is valid\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/token.ts:52\n                \n            \n\n\n            \n                \n                    generate a new token if the given one is valid\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport moment from 'moment';\nimport { updateInfos } from '../../database/databaseActions';\nimport Utils from '../../utils/utils';\nimport { checkToken } from './tokenAction';\n\nclass Token {\n\n    /**\n     * check if the given token is valid\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async get(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n        checkToken(token, (err: any, result: any) => {\n            if (err || result === [] || result === null || result === undefined || result.length === 0) {\n                return res.status(401).json({ valid: false, message: \"token invalid or not found\" });\n            } else {\n                let createdAt: moment.Moment = moment(result[0].token_created_at);\n                let now: moment.Moment = moment();\n                let diff: number = now.diff(createdAt, 'seconds');\n                if (diff  {\n            if (err) {\n                return res.status(500).json({ valid: false, message: \"internal server error\" });\n            } else {\n                if (result.affectedRows === 0) {\n                    return res.status(401).json({ valid: false, message: \"token invalid or not found\" });\n                } else {\n                    return res.status(200).json({ valid: true, message: \"token valid\", expiresIn: expiresIn, token: newToken, result: result.result });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Token();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserInformations.html":{"url":"interfaces/UserInformations.html","title":"interface - UserInformations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserInformations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apple_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            apple_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            facebook_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            facebook_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            google_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            google_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            office_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            office_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apple_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apple_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        apple_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apple_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        facebook_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        facebook_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        google_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        google_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        office_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        office_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        office_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        office_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Utils.html":{"url":"classes/Utils.html","title":"class - Utils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Utils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/utils.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRandomString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRandomString\n                        \n                    \n                \n            \n            \n                \ngetRandomString(length: number)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/utils.ts:7\n                \n            \n\n\n            \n                \n                    generate a random string with a length equal to the given length argument\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the length of the generated string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        a random string of length {length}\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        class Utils {\n    /**\n     * generate a random string with a length equal to the given length argument\n     * @param {number} length the length of the generated string \n     * @returns {string} a random string of length {length}\n     */\n    getRandomString(length: number): string {\n        let text: string = \"\";\n        let possible: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!$&#@.\";\n        for (let i: number = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Widget.html":{"url":"classes/Widget.html","title":"class - Widget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Widget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/widget.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widget.ts:20\n                \n            \n\n\n            \n                \n                    handle widgets requests\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport Currency from './currency';\nimport Nasa from './nasa';\nimport Temperature from './temperature';\nimport IntraEpitech from './intraEpitech';\nimport Office from './office';\nimport leagueoflegends from './leagueoflegends';\nimport EpitechDoors from './epitechDoors';\nimport Gmail from './gmail';\n\nclass Widget {\n\n    /**\n     * handle widgets requests\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async post(req: express.Request, res: express.Response) {\n        let valid: boolean = true;\n        const type: string = req.params.type;\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n\n        switch (type) {\n            case 'currency_converter':\n                return await Currency.getExchangeRate(req, res);\n            case 'city_temperature':\n                return await Temperature.getTemperature(req, res);\n            case 'city_weather':\n                return await Temperature.getWeather(req, res);\n            case 'apod':\n                return await Nasa.getNasaDayImage(req, res);\n            case 'curiosity_image':\n                return await Nasa.getNasaRoverImage(req, res);\n            case 'intra_epitech_profile':\n                return await IntraEpitech.getProfile(req, res);\n            case 'intra_epitech_partners':\n                return await IntraEpitech.getPartners(req, res);\n            case 'intra_epitech_notifications':\n                return await IntraEpitech.getNotifications(req, res);\n            case 'epitech_doors_open_door':\n                return await EpitechDoors.openDoor(req, res);\n            case 'intra_epitech_grades':\n                return await IntraEpitech.getGrades(req, res);\n            case 'office_calendar_events':\n                return await Office.getCalendarEvents(req, res);\n            case 'league_of_legends_summoner_profile':\n                return await leagueoflegends.getUserProfile(req, res);\n            case 'gmail_inbox':\n                return await Gmail.getLastFiveMail(req, res);\n            default:\n                return res.status(404).json({ error: true, message: \"widget not found\" });\n        }\n    }\n}\n\nmodule.exports = new Widget();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WidgetsDB.html":{"url":"classes/WidgetsDB.html","title":"class - WidgetsDB","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WidgetsDB\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/widgetsdb.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widgetsdb.ts:13\n                \n            \n\n\n            \n                \n                    retrieves the user's widgets from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widgetsdb.ts:79\n                \n            \n\n\n            \n                \n                    Update the user's widgets in database if it existed before, otherwise create a new one\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport { getWidgetsByUserId, getUserByToken, addWidget, updateWidget } from '../../database/databaseActions';\nimport jwt from 'jsonwebtoken';\n\nclass WidgetsDB {\n\n    /**\n     * retrieves the user's widgets from the database\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async get(req: express.Request, res: express.Response) {\n        try {\n            let token: string = req.headers.authorization;\n\n            if (!token) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token not found\"\n                });\n            }\n            token = token.split(\" \")[1];\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n\n            if (!decoded) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token invalid\"\n                });\n            }\n            await getUserByToken(token, async(err: any, user: any) => {\n                if (err) {\n                    console.debug(err);\n                    return res.status(500).json({\n                        valid: false,\n                        message: \"error\"\n                    });\n                } else {\n                    if (user.length === 0) {\n                        return res.status(404).json({\n                            valid: false,\n                            message: \"user not found\"\n                        });\n                    } else {\n                        let userId = user[0]['id'];\n                        await getWidgetsByUserId(userId, (err: any, result: any) => {\n                            if (err) {\n                                console.debug(err);\n                                return res.status(500).json({\n                                    valid: false,\n                                    message: \"error\"\n                                });\n                            }\n                            return res.status(200).json({\n                                valid: true,\n                                message: \"success\",\n                                data: result\n                            });\n                        });\n                    }\n                }\n            });\n        } catch (error) {\n            console.log(error);\n            return res.status(401).json({\n                valid: false,\n                message: \"token invalid\"\n            });\n        }\n    }\n\n    /**\n     * Update the user's widgets in database if it existed before, otherwise create a new one\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async patch(req: express.Request, res: express.Response) {\n        try {\n            let token: string = req.headers.authorization;\n            const { widgets } = req.body;            \n\n            if (!token) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token not found\"\n                });\n            }\n            token = token.split(\" \")[1];\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n\n            if (!decoded) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token invalid\"\n                });\n            }\n            await getUserByToken(token, async(err: any, user: any) => {\n                if (err) {\n                    console.debug(err);\n                    return res.status(500).json({\n                        valid: false,\n                        message: \"error\"\n                    });\n                } else {\n                    if (user.length === 0) {\n                        return res.status(404).json({\n                            valid: false,\n                            message: \"user not found\"\n                        });\n                    } else {\n                        let userId = user[0]['id'];\n                        await getWidgetsByUserId(userId, async(err: any, result: any) => {\n                            if (err) {\n                                console.debug(err);\n                                return res.status(500).json({\n                                    valid: false,\n                                    message: \"error\"\n                                });\n                            }\n                            if (result.length === 0) {\n                                await addWidget(userId, widgets, (err: any, result: any) => {\n                                    if (err) {\n                                        console.debug(err);\n                                        return res.status(500).json({\n                                            valid: false,\n                                            message: \"error\"\n                                        });\n                                    }\n                                    return res.status(200).json({\n                                        valid: true,\n                                        message: \"success\",\n                                        data: result\n                                    });\n                                });\n                            }\n                            else {\n                                await updateWidget(userId, widgets, (err: any, result: any) => {\n                                    if (err) {\n                                        console.debug(err);\n                                        return res.status(500).json({\n                                            valid: false,\n                                            message: \"error\"\n                                        });\n                                    }\n                                    return res.status(200).json({\n                                        valid: true,\n                                        message: \"success\",\n                                        data: result\n                                    });\n                                });\n                            }\n                        });\n                    }\n                }\n            }\n        )}\n        catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                valid: false,\n                message: \"error\"\n            });\n        }\n    }\n};\n\nmodule.exports = new WidgetsDB();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/database/database.ts\n            \n            variable\n            db\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            addUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            addWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            deleteWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getRow\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getUserByToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getWidgetsByUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateInfos\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateUserAuthToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            IntraEpitechUser\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            LeagueOfLegendsGameData\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            LeagueOfLegendsProfileData\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            UserInformations\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            app\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            server\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/request_handler.ts\n            \n            function\n            requestHandler\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/request_handler.ts\n            \n            variable\n            TOKEN_WL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes.ts\n            \n            function\n            addRoute\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/about/about.ts\n            \n            class\n            About\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/auth/OAuth.ts\n            \n            class\n            Authentication\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/auth/authActions.ts\n            \n            variable\n            handleOAuthUsers\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/routes/auth/authActions.ts\n            \n            variable\n            handleOAuthUsersAction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/routes/auth/login.ts\n            \n            class\n            Login\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/auth/register.ts\n            \n            class\n            Register\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/auth/registerActions.ts\n            \n            variable\n            registerBasicUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/routes/auth/token.ts\n            \n            class\n            Token\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/routes/auth/tokenAction.ts\n            \n            variable\n            checkToken\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/routes/profile/profile.ts\n            \n            class\n            Profile\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/profile/profileActions.ts\n            \n            variable\n            updateUserInformations\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/routes/profile/profileUpdate.ts\n            \n            class\n            ProfileUpdate\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/currency.ts\n            \n            class\n            Currency\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/epitechDoors.ts\n            \n            class\n            EpitechDoors\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/gmail.ts\n            \n            class\n            Gmail\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/intraEpitech.ts\n            \n            class\n            IntraEpitech\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/routes/widgets/leagueoflegends.ts\n            \n            class\n            LeagueOfLegends\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/nasa.ts\n            \n            class\n            Nasa\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/routes/widgets/office.ts\n            \n            class\n            Office\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/temperature.ts\n            \n            class\n            Temperature\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/routes/widgets/widget.ts\n            \n            class\n            Widget\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/widgetsdb.ts\n            \n            class\n            WidgetsDB\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/utils/utils.ts\n            \n            class\n            Utils\n            \n                50 %\n                (1/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            cors : ^2.8.5\n        \n            dotenv : ^10.0.0\n        \n            express : ^4.17.1\n        \n            jsonwebtoken : ^8.5.1\n        \n            moment : ^2.29.1\n        \n            mysql2 : ^2.3.3-rc.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addRoute   (src/.../routes.ts)\n                        \n                        \n                            requestHandler   (src/.../request_handler.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addRoute\n                        \n                    \n                \n            \n            \n                \naddRoute(endpoint: string, service: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    service\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/request_handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        requestHandler\n                        \n                    \n                \n            \n            \n                \nrequestHandler(req, res, next)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    18 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addUsers   (src/.../databaseActions.ts)\n                        \n                        \n                            addWidget   (src/.../databaseActions.ts)\n                        \n                        \n                            app   (src/.../index.ts)\n                        \n                        \n                            checkToken   (src/.../tokenAction.ts)\n                        \n                        \n                            db   (src/.../database.ts)\n                        \n                        \n                            deleteWidget   (src/.../databaseActions.ts)\n                        \n                        \n                            getRow   (src/.../databaseActions.ts)\n                        \n                        \n                            getUserByToken   (src/.../databaseActions.ts)\n                        \n                        \n                            getUsers   (src/.../databaseActions.ts)\n                        \n                        \n                            getWidgetsByUserId   (src/.../databaseActions.ts)\n                        \n                        \n                            handleOAuthUsers   (src/.../authActions.ts)\n                        \n                        \n                            handleOAuthUsersAction   (src/.../authActions.ts)\n                        \n                        \n                            registerBasicUser   (src/.../registerActions.ts)\n                        \n                        \n                            routes   (src/.../routes.ts)\n                        \n                        \n                            server   (src/.../index.ts)\n                        \n                        \n                            TOKEN_WL   (src/.../request_handler.ts)\n                        \n                        \n                            updateInfos   (src/.../databaseActions.ts)\n                        \n                        \n                            updateUserAuthToken   (src/.../databaseActions.ts)\n                        \n                        \n                            updateUserInformations   (src/.../profileActions.ts)\n                        \n                        \n                            updateWidget   (src/.../databaseActions.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/databaseActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, callback: Function) => {\n    let query: string = \"INSERT into users (\";\n    let wasFound: boolean = false;\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"mail, password) VALUES ('\"\n                + infos.mail + \"', '\" + infos.password + \"');\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"google_mail, google_token) VALUES ('\"\n                + infos.google_mail + \"', '\" + infos.google_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"facebook_mail, facebook_token) VALUES ('\"\n                + infos.facebook_mail + \"', '\" + infos.facebook_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"apple_mail, apple_token) VALUES ('\"\n                + infos.apple_mail + \"', '\" + infos.apple_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"office_mail, office_token) VALUES ('\"\n                + infos.office_mail + \"', '\" + infos.office_token + \"');\";\n            wasFound = true;\n        }\n\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widget: string, callback: Function) => {\n    let query: string = \"INSERT INTO widgets (user_id, data) VALUES ('\" + userId + \"', '\" + JSON.stringify(widget) + \"');\";\n\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widgetId: string, callback: Function) => {\n    let query: string = \"DELETE FROM widgets WHERE user_id = '\" + userId + \"' AND id = '\" + widgetId + \"';\";\n\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRow\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (row: string, value: string, callback: Function) => {\n    let query: string = \"SELECT * FROM users WHERE \" + row + \" = '\" + value + \"' LIMIT 1;\";\n\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserByToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (token: string, callback: Function) => {\n    let query: string = \"SELECT * FROM users WHERE token = '\" + token + \"';\";\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, callback: Function) => {\n    let wasFound: boolean = false;\n    let query: string = \"SELECT * FROM users WHERE \";\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"mail = '\" + infos.mail + \"' AND password = '\" + infos.password + \"';\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"google_mail = '\" + infos.google_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"facebook_mail = '\" + infos.facebook_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"apple_mail = '\" + infos.apple_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"office_mail = '\" + infos.office_mail + \"';\";\n            wasFound = true;\n        }\n\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getWidgetsByUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, callback: Function) => {\n    let query: string = \"SELECT * FROM widgets WHERE user_id = '\" + userId + \"';\";\n\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateInfos\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n    rows: Array, newValues: Array,\n    whereRow: string, whereValue: string, callback: Function) => {\n    let query: string = 'UPDATE users SET ';\n\n    for (let i = 0; i  {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n            \n                \n                    updates a row in the users table\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserAuthToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, jwtToken: string, callback: Function) => {\n    let query: string = \"UPDATE users SET \";\n    let wasFound: boolean = false;\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE mail = '\" + infos.mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE google_mail = '\" + infos.google_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE facebook_mail = '\" + infos.facebook_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE apple_mail = '\" + infos.apple_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE office_mail = '\" + infos.office_mail + \"';\";\n            wasFound = true;\n        }\n\n        db.query(query, (err: any, result: any) => {\n            if (err || result.affectedRows === 0) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widget: string, callback: Function) => {\n    let query: string = \"UPDATE widgets SET data = '\" + widget + \"' WHERE user_id = '\" + userId + \"';\";\n\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n\n    src/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        app\n                        \n                    \n                \n            \n                \n                    \n                        Default value : express()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"http\").Server(app)\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/tokenAction.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        checkToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (token: string, callback: Function) => {\n    const queryString: string = \"SELECT * FROM users WHERE token = '\" + token + \"' LIMIT 1;\";\n    db.query(queryString, (err: any, result: any) => {\n        if (err) {\n            callback(err);\n        } else {\n            callback(null, result);\n        }\n    });\n}\n                    \n                \n\n            \n                \n                    check if the given token correspond to a user's token\n\n                \n            \n\n        \n    \n\n    src/database/database.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mysql.createConnection({\n    host: process.env.MY_SQL_HOST,\n    user: process.env.MY_SQL_USER,\n    password: process.env.MY_SQL_PASSWORD,\n    database: process.env.MY_SQL_DATABASE,\n})\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/authActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleOAuthUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (req: express.Request, res: express.Response) => {\n    try {\n        const type: string = req.params.type;\n        const { access_token } = req.body;\n        let user: { type: string, userJson: any } = { type: '', userJson: {} };\n        let response: AxiosResponse;\n\n        switch (type) {\n            case 'google_user':\n                console.log('bearer token == ', access_token);\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.debug(\"response == \", response.data);\n                let googleUser = response.data;\n                user = { type: 'google_user', userJson: googleUser };\n                break;\n            case 'facebook_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.facebook.com/me/?fields=id,name,email',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let facebookUser = response.data;\n                user = { type: 'facebook_user', userJson: facebookUser };\n                break;\n            case 'office_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.microsoft.com/v1.0/me',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.log(\"response == \", response.data);\n                let officeUser = response.data;\n                user = { type: 'office_user', userJson: officeUser };\n                break;\n            default:\n                return res.status(400).json({ message: 'Bad request' });\n        }\n\n        const infos: UserInformations = {\n            mail: undefined,\n            google_mail: (user.type === 'google_user') ? user.userJson.email : undefined,\n            google_token: (user.type === 'google_user') ? access_token : undefined,\n            facebook_mail: (user.type === 'facebook_user') ? user.userJson.email : undefined,\n            facebook_token: (user.type === 'facebook_user') ? access_token : undefined,\n            apple_mail: (user.type === 'apple_user') ? user.userJson.email : undefined,\n            apple_token: (user.type === 'apple_user') ? access_token : undefined,\n            office_mail: (user.type === 'office_user') ? user.userJson.mail : undefined,\n            office_token: (user.type === 'office_user') ? access_token : undefined,\n            username: undefined,\n            password: undefined,\n        };\n\n        const result = await handleOAuthUsersAction(infos);\n        if (result.error === true) {\n            return res.status(500).json({\n                error: result.error,\n                message: result.message,\n            });\n        }\n        if (result.message === \"user created\") {\n            return res.status(200).json({ error: false, message: \"user created\", result: result.result });\n        }\n        if (result.message === \"user already exists\") {\n            const expiresIn: number = Number(process.env.EXPIRE_TIME) || 60 * 60;\n            const payload = {\n                mail: (user.type === 'google_user') ? user.userJson.email : (user.type === 'facebook_user') ? user.userJson.email : (user.type === 'apple_user') ? user.userJson.email : (user.type === 'office_user') ? user.userJson.email : \"none\",\n            };\n            const token: string = jwt.sign(\n                payload,\n                process.env.JWT_SECRET,\n                { expiresIn: expiresIn }\n            );\n            await updateUserAuthToken(infos, token, (err: any, result: any) => {\n                if (err) {\n                    console.debug('[handleOAuthUsersAction] | error[updateUserAuthToken] = ', err);\n                } else {\n                    console.debug('[handleOAuthUsersAction] | result[updateUserAuthToken] = ', result);\n                }\n            });\n            return res.status(200).json({ error: false, message: \"user logged in\", expiresIn: expiresIn, token: token, result: result.result });\n        }\n    } catch (err) {\n        console.debug('[handleOAuthUsersAction] | error = ', err);\n        return res.status(500).json({ error: true, message: \"server error\" });\n    }\n}\n                    \n                \n\n            \n                \n                    handle the login or the registration of a OAuth's user (a user logged on signed in with a google/facebook/office account)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleOAuthUsersAction\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations): Promise => {\n    return new Promise(async (resolve, reject) => {\n        await getUsers(infos, async (err: any, result: any) => {\n            if (err) {\n                console.debug('[handleOAuthUsersAction] | error[getUsers] = ', err);\n                await addUsers(infos, (err: any, result: any) => {\n                    if (err) {\n                        console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                        return resolve({ error: true, message: \"internal error\" });\n                    } else {\n                        console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                        return resolve({ error: false, message: \"user created\", result: result });\n                    }\n                });\n            } else {\n                console.debug('[handleOAuthUsersAction] | result[getUsers] = ', result);\n                if (result.length === 0) {\n                    await addUsers(infos, (err: any, result: any) => {\n                        if (err) {\n                            console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                            return resolve({ error: true, message: \"internal error\" });\n                        } else {\n                            console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                            return resolve({ error: false, message: \"user created\", result: result });\n                        }\n                    });\n                } else {\n                    return resolve({ error: false, message: \"user already exists\", result: result });\n                }\n            }\n        });\n    });\n}\n                    \n                \n\n            \n                \n                    save or get user from / in database\n\n                \n            \n\n        \n    \n\n    src/routes/auth/registerActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        registerBasicUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations): Promise => {\n    return new Promise(async (resolve, reject) => {\n        await getUsers(infos, async (err: any, result: any) => {\n            if (err) {\n                console.debug('[handleOAuthUsersAction] | error[getUsers] = ', err);\n                await addUsers(infos, (err: any, result: any) => {\n                    if (err) {\n                        console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                        return resolve({ error: true, message: \"internal error\" });\n                    } else {\n                        console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                        return resolve({ error: false, message: \"user created\", result: result });\n                    }\n                });\n            } else {\n                console.debug('[handleOAuthUsersAction] | result[getUsers] = ', result);\n                if (result.length === 0) {\n                    await addUsers(infos, (err: any, result: any) => {\n                        if (err) {\n                            console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                            return resolve({ error: true, message: \"internal error\" });\n                        } else {\n                            console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                            return resolve({ error: false, message: \"user created\", result: result });\n                        }\n                    });\n                } else {\n                    return resolve({ error: false, message: \"user already exists\", result: result });\n                }\n            }\n        });\n    });\n}\n                    \n                \n\n            \n                \n                    save a user in the database if it doesn't already exists\n\n                \n            \n\n        \n    \n\n    src/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        routes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n\n\n        \n    \n\n    src/request_handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TOKEN_WL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(register|login)/\n                    \n                \n\n\n        \n    \n\n    src/routes/profile/profileActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        updateUserInformations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (req: express.Request, res: express.Response) => {\n    try {\n        const type: string = req.params.type;\n        const { access_token } = req.body;\n        let token: string = req.headers.authorization;\n        token = token.split(\" \")[1];\n        let response: AxiosResponse;\n        let user: { type: string, userJson: any } = { type: '', userJson: {} };\n\n        switch (type) {\n            case 'google_user':\n                console.log('bearer token == ', access_token);\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let googleUser = response.data;\n                user = { type: 'google_user', userJson: googleUser };\n                break;\n            case 'facebook_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.facebook.com/me/?fields=id,name,email',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let facebookUser = response.data;\n                user = { type: 'facebook_user', userJson: facebookUser };\n                break;\n            case 'office_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.microsoft.com/v1.0/me',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let officeUser = response.data;\n                user = { type: 'office_user', userJson: officeUser };\n                break;\n            case 'plain_user':\n                let plainUser = {\n                    mail: req.body.mail,\n                    password: req.body.password,\n                };\n                user = { type: 'plain_user', userJson: plainUser };\n                break;\n            default:\n                return res.status(400).json({ message: 'Bad request' });\n        };\n\n        if (user.type === 'google_user') {\n            await updateInfos(['google_mail', 'google_token'], [user.userJson.email, access_token], \"token\", token, (err: Error, result: any) => {\n                if (err) {\n                    console.log(\"heeeeerererere2 \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated', google_token: access_token });\n            });\n        }\n        if (user.type === 'office_user') {\n            await updateInfos(['office_mail', 'office_token'], [user.userJson.email, access_token], \"token\", token, (err: Error, result: any) => {\n                if (err) {\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated', office_token: access_token });\n            });\n        }\n        if (user.type === 'facebook_user') {\n            await updateInfos(['facebook_mail', 'facebook_token'], [user.userJson.email, access_token], \"token\", token, (err: Error, result: any) => {\n                if (err) {\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated', facebook_token: access_token });\n            });\n        }\n        if (user.type === 'plain_user') {\n            await updateInfos(['mail', 'password'], [user.userJson.mail, user.userJson.password], \"token\", token, (err: Error, result: any) => {\n                if (err) {\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n    } catch (error) {\n        return res.status(500).json({ message: 'server error' });\n    }\n}\n                    \n                \n\n            \n                \n                    update a user informations\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
