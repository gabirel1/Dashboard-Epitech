var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/About.html",[0,0.259]],["body/classes/About.html",[0,0.142,1,0.277,2,0.177,3,0.177,4,0.147,5,1.709,6,0.09,7,0.476,8,0.576,9,1.973,10,0.643,11,0.567,12,0.643,13,0.314,14,2.066,15,2.596,16,3.137,17,1.584,18,3.137,19,3.793,20,3.373,21,3.137,22,3.137,23,0.277,24,0.038,25,0.835,26,0.261,27,0.242,28,0.42,29,0.476,30,0.352,31,0.535,32,0.42,33,1.973,34,0.476,35,3.793,36,0.703,37,2.066,38,2.066,39,0.314,40,0.778,41,2.066,42,1.709,43,0.533,44,2.066,45,2.066,46,3.505,47,5.91,48,5.134,49,2.066,50,5.91,51,2.377,52,1.709,53,3.968,54,1.761,55,3.991,56,5.524,57,1.709,58,2.377,59,3.137,60,2.066,61,1.709,62,1.709,63,1.709,64,1.761,65,2.066,66,1.709,67,3.137,68,2.596,69,2.596,70,1.973,71,1.709,72,2.596,73,1.709,74,2.596,75,1.709,76,2.066,77,4.554,78,4.123,79,3.137,80,1.709,81,2.138,82,1.709,83,3.024,84,1.709,85,2.596,86,1.709,87,2.596,88,1.709,89,2.596,90,2.066,91,2.066,92,2.596,93,1.709,94,3.137,95,2.596,96,2.066,97,1.709,98,2.129,99,2.066,100,1.709,101,1.709,102,2.596,103,2.596,104,1.709,105,1.709,106,0.778,107,2.066,108,3.137,109,3.137,110,1.709,111,2.596,112,1.709,113,1.709,114,2.129,115,1.709,116,2.066,117,1.709,118,2.596,119,1.709,120,0.645,121,0.778,122,0.277,123,0.018,124,0.018]],["title/classes/Authentication.html",[0,0.207,125,2.145]],["body/classes/Authentication.html",[0,0.282,1,0.549,2,0.351,3,0.351,4,0.291,6,0.178,7,0.763,8,0.826,10,0.862,11,0.781,12,0.862,13,0.622,23,0.549,24,0.037,25,0.549,26,0.178,27,0.48,28,0.674,29,0.763,30,0.698,31,0.858,32,0.674,34,0.763,39,0.622,82,1.725,121,1.543,122,0.549,123,0.03,124,0.03,125,3.886,126,3.389,127,2.823,128,2.823,129,4.096,130,1.725,131,3.164,132,5.03,133,2.924,134,4.096,135,4.096]],["title/classes/Currency.html",[0,0.207,58,1.686]],["body/classes/Currency.html",[0,0.255,1,0.495,2,0.317,3,0.317,4,0.262,6,0.16,7,0.716,8,0.788,10,0.83,11,0.733,12,0.83,13,0.561,15,3.902,23,0.495,24,0.037,25,0.495,26,0.16,27,0.433,28,0.632,29,0.716,30,0.63,31,0.804,32,0.632,34,0.716,36,0.433,39,0.716,40,1.392,43,0.954,51,2.074,58,3.339,62,3.902,63,4.298,120,1.154,122,0.495,123,0.028,124,0.028,136,3.058,137,4.716,138,4.716,139,3.695,140,4.716,141,2.381,142,1.957,143,1.777,144,0.865,145,0.898,146,1.05,147,3.695,148,1.957,149,3.695,150,1.392,151,0.781,152,1.392,153,3.695,154,3.695,155,3.695,156,3.695,157,0.865,158,0.989,159,1.531,160,0.865,161,1.154,162,1.05,163,1.267]],["title/classes/EpitechDoors.html",[0,0.207,164,1.89]],["body/classes/EpitechDoors.html",[0,0.253,1,0.491,2,0.314,3,0.314,4,0.26,6,0.159,7,0.712,8,0.785,10,0.828,11,0.731,12,0.828,13,0.556,23,0.491,24,0.037,25,0.491,26,0.159,27,0.429,28,0.629,29,0.712,30,0.625,31,0.8,32,0.629,34,0.712,36,0.55,39,0.712,43,0.947,78,3.883,83,3.695,92,3.883,95,3.883,97,3.034,122,0.491,123,0.028,124,0.028,141,2.369,142,1.95,143,1.768,144,0.858,145,0.698,146,1.042,148,2.056,150,1.382,151,0.776,152,1.382,157,0.858,158,0.985,159,1.519,160,0.858,161,1.145,162,1.042,163,1.258,164,3.256,165,3.034,166,4.693,167,4.693,168,3.667,169,4.693,170,4.693,171,3.034,172,1.382,173,3.667,174,3.667,175,3.667,176,3.667,177,3.667]],["title/classes/Gmail.html",[0,0.207,114,1.686]],["body/classes/Gmail.html",[0,0.23,1,0.447,2,0.286,3,0.286,4,0.237,6,0.145,7,0.67,8,0.751,10,0.799,11,0.705,12,0.799,13,0.506,23,0.447,24,0.038,25,0.447,26,0.145,27,0.391,28,0.591,29,0.67,30,0.569,31,0.753,32,0.591,34,0.67,36,0.391,39,0.67,40,1.257,43,0.861,70,2.099,114,2.776,115,4.092,118,3.652,119,4.092,122,0.447,123,0.026,124,0.026,142,1.983,143,1.863,144,0.781,145,0.84,146,0.948,148,1.983,150,1.257,151,0.933,152,1.663,157,0.781,158,0.84,159,1.382,160,0.781,161,1.042,162,0.948,163,1.144,178,2.761,179,4.413,180,4.413,181,3.336,182,1.829,183,4.413,184,4.413,185,2.477,186,1.663,187,2.761,188,3.151,189,3.151,190,3.151,191,3.336,192,3.336,193,2.382,194,3.336,195,2.015,196,3.336,197,3.336,198,4.945,199,1.257,200,5.262,201,3.336,202,4.945,203,3.336,204,3.336,205,3.336,206,3.336,207,2.761,208,1.523,209,1.257]],["title/classes/IntraEpitech.html",[0,0.207,210,1.89]],["body/classes/IntraEpitech.html",[0,0.147,1,0.285,2,0.182,3,0.182,4,0.151,6,0.092,7,0.487,8,0.844,10,0.876,11,0.773,12,0.876,13,0.652,17,1.62,23,0.576,24,0.038,25,0.576,26,0.187,27,0.503,28,0.694,29,0.786,30,0.733,31,0.658,32,0.43,34,0.786,36,0.643,39,0.786,43,1.11,68,2.654,81,2.171,82,1.324,83,4.196,85,2.654,87,2.654,89,2.654,122,0.285,123,0.019,124,0.019,130,1.475,142,1.997,143,1.952,144,1.006,145,0.986,146,1.221,148,2.236,150,1.62,151,1.064,152,1.896,157,1.006,158,1.059,159,1.781,160,1.006,161,1.342,162,0.604,163,0.73,171,3.557,182,2.146,185,2.908,193,2.756,210,2.429,211,1.76,212,3.207,213,3.207,214,3.207,215,3.207,216,3.207,217,2.127,218,3.207,219,2.127,220,3.207,221,2.127,222,3.207,223,3.207,224,3.207,225,2.127,226,2.167,227,2.167,228,1.465,229,1.338,230,4.299,231,4.299,232,4.299,233,1.194,234,2.127,235,1.194,236,2.127,237,1.194,238,2.127,239,1.194,240,2.127,241,1.194,242,2.127,243,1.194,244,2.127,245,2.127,246,2.127,247,2.127,248,2.127,249,2.127,250,2.127,251,2.127,252,2.127,253,2.127]],["title/interfaces/IntraEpitechUser.html",[228,1.372,254,1.132]],["body/interfaces/IntraEpitechUser.html",[2,0.303,3,0.303,4,0.251,6,0.154,24,0.037,26,0.259,36,0.746,106,1.333,120,1.89,123,0.027,124,0.027,130,1.847,162,1.53,186,1.333,195,1.616,226,3.022,227,3.022,228,2.094,233,3.022,235,3.022,237,3.022,239,3.022,241,3.022,243,3.022,254,2.029,255,1.986,256,1.986,257,2.885,258,1.333,259,1.466,260,1.616,261,1.466,262,1.616,263,1.466,264,1.616,265,1.466,266,1.616,267,1.616,268,1.616,269,1.986,270,1.986,271,1.986,272,1.986,273,1.986,274,1.986,275,1.986,276,1.616,277,1.986,278,1.986,279,1.986,280,1.986]],["title/classes/LeagueOfLegends.html",[0,0.207,281,1.89]],["body/classes/LeagueOfLegends.html",[0,0.18,1,0.35,2,0.224,3,0.224,4,0.186,6,0.114,7,0.567,8,0.661,10,0.72,11,0.636,12,0.72,13,0.397,17,1.885,23,0.35,24,0.038,25,0.583,26,0.114,27,0.306,28,0.5,29,0.567,30,0.446,31,0.742,32,0.5,34,0.567,36,0.51,39,0.661,43,0.675,51,1.468,81,2.635,82,0.897,111,3.089,112,2.165,113,2.165,120,0.817,122,0.35,123,0.022,124,0.022,142,1.788,143,1.64,144,0.612,145,0.829,146,0.743,148,1.407,150,0.986,151,0.79,152,1.407,157,0.612,158,0.956,159,1.084,160,0.612,161,0.817,162,0.743,163,0.897,182,1.547,185,2.095,193,1.867,195,1.194,199,2.267,229,1.645,268,1.194,269,2.817,270,2.817,271,3.015,272,2.817,273,2.817,274,2.817,275,2.817,276,1.704,277,2.443,278,2.443,279,2.443,280,2.664,281,2.738,282,2.165,283,3.733,284,3.733,285,2.616,286,3.733,287,3.733,288,3.733,289,3.733,290,3.733,291,4.353,292,2.616,293,2.616,294,2.616,295,2.616,296,3.733,297,2.616,298,2.616,299,2.616,300,2.616,301,4.353,302,2.616,303,2.616,304,2.616,305,2.616,306,2.616,307,2.616,308,2.616,309,2.616,310,2.616,311,4.353,312,3.733,313,2.616,314,3.733,315,1.704,316,3.733,317,4.353,318,3.733,319,4.353,320,5.492,321,2.616,322,2.616,323,2.616,324,2.616,325,2.616]],["title/interfaces/LeagueOfLegendsGameData.html",[254,1.132,268,1.372]],["body/interfaces/LeagueOfLegendsGameData.html",[2,0.311,3,0.311,4,0.258,6,0.158,24,0.037,26,0.254,36,0.743,106,1.369,120,1.933,123,0.027,124,0.027,130,1.246,162,1.545,186,1.369,195,1.658,226,2.039,227,2.039,228,1.658,233,2.039,235,2.039,237,2.039,239,2.039,241,2.039,243,2.039,254,2.049,255,2.039,256,2.039,257,2.934,258,1.369,259,1.505,260,1.658,261,1.505,262,1.658,263,1.505,264,1.658,265,1.505,266,1.658,267,1.658,268,2.13,269,3.052,270,3.052,271,3.052,272,3.052,273,3.052,274,3.052,275,3.052,276,1.658,277,2.039,278,2.039,279,2.039,280,2.039]],["title/interfaces/LeagueOfLegendsProfileData.html",[254,1.132,276,1.372]],["body/interfaces/LeagueOfLegendsProfileData.html",[2,0.324,3,0.324,4,0.269,6,0.164,24,0.036,26,0.24,36,0.743,106,1.425,120,1.884,123,0.028,124,0.028,130,1.297,162,1.568,186,1.425,195,2.397,226,2.123,227,2.123,228,1.727,233,2.123,235,2.123,237,2.123,239,2.123,241,2.123,243,2.123,254,2.079,255,2.123,256,2.123,257,3.011,258,1.425,259,1.567,260,1.727,261,1.567,262,1.727,263,1.567,264,1.727,265,1.567,266,1.727,267,1.727,268,1.727,269,2.123,270,2.123,271,2.123,272,2.123,273,2.123,274,2.123,275,2.123,276,2.185,277,3.098,278,3.098,279,3.098,280,3.098]],["title/classes/Login.html",[0,0.207,130,1.03]],["body/classes/Login.html",[0,0.207,1,0.402,2,0.257,3,0.257,4,0.213,6,0.13,7,0.624,8,0.765,10,0.765,11,0.676,12,0.765,13,0.456,23,0.402,24,0.038,25,0.402,26,0.13,27,0.352,28,0.551,29,0.624,30,0.512,31,0.901,32,0.551,33,2.586,34,0.624,36,0.352,39,0.801,40,1.132,82,1.729,106,1.132,120,0.938,121,1.132,122,0.402,123,0.024,124,0.024,127,2.308,128,2.308,130,1.811,145,1.005,146,0.853,151,0.87,158,0.572,160,0.962,172,1.99,186,2.198,199,1.132,209,1.99,229,1.889,258,1.549,259,1.244,260,1.371,261,1.244,262,1.371,263,1.244,264,1.371,265,1.244,266,1.371,267,2.49,326,2.485,327,3.003,328,3.402,329,1.889,330,1.889,331,1.889,332,1.516,333,1.371,334,3.402,335,2.546,336,3.003,337,3.628,338,3.77,339,2.485,340,3.402,341,3.402,342,4.172,343,2.485,344,1.371,345,3.003,346,3.061,347,2.546,348,4.111,349,1.686,350,3.003,351,3.003,352,3.003,353,3.402,354,3.402,355,3.402,356,3.402,357,3.003,358,2.485,359,2.485,360,1.132]],["title/classes/Nasa.html",[0,0.207,64,1.686]],["body/classes/Nasa.html",[0,0.213,1,0.415,2,0.265,3,0.265,4,0.22,6,0.134,7,0.637,8,0.835,10,0.835,11,0.767,12,0.835,13,0.637,23,0.562,24,0.037,25,0.562,26,0.182,27,0.491,28,0.684,29,0.775,30,0.716,31,0.716,32,0.786,34,0.775,39,0.775,43,1.083,51,2.356,55,2.996,64,3.159,69,4.225,70,2.64,72,3.473,73,3.473,74,4.225,75,2.561,122,0.415,123,0.025,124,0.025,142,1.924,143,1.794,144,0.982,145,0.972,146,1.192,148,2.073,150,2.073,151,0.888,152,1.581,157,0.982,158,1.048,160,0.982,161,1.311,162,0.879,163,1.062,182,2.115,361,2.561,362,4.197,363,4.197,364,4.197,365,3.095,366,4.225,367,4.225,368,4.197,369,3.095,370,3.095,371,2.561,372,3.095,373,3.095,374,2.21,375,3.095,376,3.095,377,4.197,378,3.095]],["title/classes/Office.html",[0,0.207,98,1.686]],["body/classes/Office.html",[0,0.256,1,0.497,2,0.318,3,0.318,4,0.263,6,0.161,7,0.717,8,0.79,10,0.832,11,0.734,12,0.832,13,0.563,23,0.497,24,0.037,25,0.497,26,0.161,27,0.434,28,0.633,29,0.717,30,0.633,31,0.806,32,0.633,34,0.717,39,0.717,43,0.957,70,2.974,98,3.301,102,3.912,103,3.912,104,3.069,105,3.069,106,1.781,122,0.497,123,0.028,124,0.028,142,1.961,143,1.781,144,0.868,145,0.9,146,1.054,148,1.781,150,1.398,151,0.784,152,1.398,157,0.868,158,0.991,159,1.537,160,0.868,161,1.158,162,1.054,163,1.272,182,1.959,188,2.648,189,2.648,190,2.648,366,3.912,371,3.069,379,3.069,380,4.727,381,4.727,382,3.709,383,4.727,384,4.727,385,3.709]],["title/classes/Profile.html",[0,0.207,81,1.517]],["body/classes/Profile.html",[0,0.224,1,0.435,2,0.278,3,0.278,4,0.23,6,0.141,7,0.658,8,0.74,9,2.726,10,0.79,11,0.698,12,0.79,13,0.493,17,2.188,23,0.435,24,0.038,25,0.435,26,0.141,27,0.38,28,0.581,29,0.658,30,0.554,31,0.832,32,0.581,34,0.658,36,0.508,39,0.847,40,1.223,43,0.838,81,2.463,82,1.914,121,1.223,122,0.435,123,0.025,124,0.025,144,0.76,145,0.618,151,0.687,157,0.76,158,1.033,160,0.76,161,1.014,172,2.044,182,1.796,186,1.223,199,1.223,208,1.482,209,2.102,259,1.345,261,1.345,263,1.345,265,1.345,315,1.482,329,2.042,331,2.042,332,1.639,333,1.482,335,2.463,344,1.482,346,2.433,347,2.463,349,1.822,360,2.146,386,2.686,387,3.246,388,2.318,389,1.822,390,2.738,391,2.738,392,1.822,393,2.433,394,1.822,395,1.822,396,2.433,397,3.246,398,2.318,399,2.318,400,3.246,401,3.246,402,4.334,403,3.246,404,3.246,405,3.246,406,3.246,407,3.246,408,3.246,409,3.246,410,3.246]],["title/classes/ProfileUpdate.html",[0,0.207,411,2.145]],["body/classes/ProfileUpdate.html",[0,0.251,1,0.489,2,0.312,3,0.312,4,0.259,6,0.158,7,0.71,8,0.783,10,0.826,11,0.754,12,0.826,13,0.553,17,2.361,23,0.489,24,0.037,25,0.489,26,0.158,27,0.427,28,0.627,29,0.71,30,0.622,31,0.88,32,0.627,34,0.71,36,0.548,39,0.783,82,1.604,121,1.374,122,0.489,123,0.027,124,0.027,141,2.361,144,0.853,145,0.694,151,0.771,157,0.853,158,0.694,172,1.945,209,1.945,315,1.665,332,1.841,333,1.665,335,2.843,344,1.665,360,2.235,389,2.046,390,2.897,391,2.046,392,2.046,393,2.624,394,2.046,395,2.046,396,2.624,411,3.685,412,3.017,413,3.869,414,3.869,415,3.646,416,3.338,417,2.603,418,3.646,419,3.646]],["title/classes/Register.html",[0,0.207,131,1.89]],["body/classes/Register.html",[0,0.243,1,0.472,2,0.302,3,0.302,4,0.25,6,0.153,7,0.694,8,0.771,10,0.816,11,0.72,12,0.816,13,0.535,23,0.472,24,0.037,25,0.472,26,0.153,27,0.413,28,0.613,29,0.694,30,0.601,31,0.866,32,0.613,34,0.694,39,0.771,40,1.328,82,1.742,106,1.328,121,1.328,122,0.472,123,0.027,124,0.027,127,2.568,128,2.568,131,3.505,145,0.871,146,1.002,151,0.746,158,0.967,160,0.825,172,1.724,186,1.914,208,2.319,209,1.914,229,2.218,258,1.724,259,1.461,260,1.61,261,1.461,262,1.61,263,1.461,264,1.61,265,1.461,266,1.61,267,2.319,328,3.786,337,3.746,347,2.31,420,2.918,421,3.526,422,2.517,423,3.526,424,2.918,425,3.526,426,3.786,427,4.449,428,2.918,429,2.918,430,3.526,431,2.517]],["title/classes/Temperature.html",[0,0.207,54,1.686]],["body/classes/Temperature.html",[0,0.226,1,0.439,2,0.281,3,0.281,4,0.232,6,0.142,7,0.661,8,0.849,10,0.88,11,0.777,12,0.88,13,0.661,23,0.584,24,0.037,25,0.584,26,0.189,27,0.51,28,0.7,29,0.793,30,0.743,31,0.743,32,0.584,34,0.793,36,0.51,39,0.793,43,1.125,46,3.606,51,2.446,53,4.628,54,3.053,122,0.439,123,0.026,124,0.026,142,1.968,143,1.846,144,1.02,145,0.994,146,1.238,148,2.107,150,1.642,151,0.922,152,1.642,157,1.02,158,1.065,159,1.806,160,1.02,161,1.361,162,0.93,163,1.123,182,2.164,432,2.709,433,4.358,434,4.358,435,4.358,436,3.274,437,4.358,438,3.274,439,4.358,440,3.274,441,3.274]],["title/classes/Token.html",[0,0.207,360,1.132]],["body/classes/Token.html",[0,0.204,1,0.396,2,0.253,3,0.253,4,0.21,6,0.128,7,0.617,8,0.797,9,2.556,10,0.823,11,0.727,12,0.823,13,0.617,23,0.545,24,0.038,25,0.545,26,0.176,27,0.476,28,0.623,29,0.705,30,0.693,31,0.925,32,0.545,33,2.923,34,0.617,36,0.476,39,0.844,40,1.113,43,0.762,120,0.922,121,1.113,122,0.545,123,0.024,124,0.024,127,2.281,128,1.657,141,2.346,144,0.691,145,0.562,157,0.691,158,0.774,160,0.691,161,0.922,172,2.044,199,1.531,208,1.348,209,2.094,315,1.348,330,1.857,331,1.857,332,1.491,333,1.348,335,2.965,337,1.857,338,2.901,342,2.443,344,1.348,346,2.608,347,2.65,349,1.657,360,2.283,389,1.657,390,2.946,391,2.608,392,1.657,393,2.281,394,1.657,395,1.657,396,2.81,431,2.108,442,2.443,443,2.953,444,3.363,445,2.953,446,2.443,447,2.443,448,1.857,449,2.953,450,2.108,451,2.953,452,2.953,453,2.953,454,2.953,455,4.064,456,2.953,457,2.953,458,4.064,459,2.953,460,2.953,461,2.443]],["title/interfaces/UserInformations.html",[254,1.132,258,1.132]],["body/interfaces/UserInformations.html",[2,0.284,3,0.284,4,0.236,6,0.144,24,0.037,26,0.26,27,0.731,36,0.747,106,1.979,120,1.789,123,0.026,124,0.026,130,1.138,162,1.492,186,1.979,195,1.515,226,1.863,227,1.863,228,1.515,233,1.863,235,1.863,237,1.863,239,1.863,241,1.863,243,1.863,254,1.979,255,1.863,256,1.863,257,2.767,258,1.657,259,2.176,260,2.398,261,2.176,262,2.398,263,2.176,264,2.398,265,2.176,266,2.398,267,2.398,268,1.515,269,1.863,270,1.863,271,1.863,272,1.863,273,1.863,274,1.863,275,1.863,276,1.515,277,1.863,278,1.863,279,1.863,280,1.863]],["title/classes/Utils.html",[0,0.207,448,1.89]],["body/classes/Utils.html",[0,0.28,1,0.544,2,0.348,3,0.348,4,0.288,6,0.176,7,0.759,13,0.616,23,0.544,24,0.037,25,0.544,26,0.176,27,0.476,29,0.759,34,0.616,36,0.723,55,2.899,120,1.815,123,0.029,124,0.029,141,2.526,199,1.53,446,4.141,448,3.148,462,3.361,463,5.004,464,5.004,465,4.061,466,5.661,467,6.203,468,5.004,469,5.004,470,5.004,471,4.061,472,4.061,473,4.061]],["title/classes/Widget.html",[0,0.207,474,1.89]],["body/classes/Widget.html",[0,0.208,1,0.404,2,0.259,3,0.259,4,0.214,6,0.131,7,0.626,8,0.713,10,0.767,11,0.817,12,0.767,13,0.458,20,2.595,23,0.404,24,0.037,25,0.404,26,0.204,27,0.353,28,0.553,29,0.626,30,0.515,31,0.996,32,0.553,34,0.626,36,0.55,39,0.926,52,2.497,54,2.315,57,2.497,58,2.315,61,2.497,64,2.315,66,2.497,71,2.497,80,2.497,84,2.497,86,2.497,88,2.497,93,2.497,98,2.315,101,2.497,110,2.497,114,2.315,117,2.497,121,1.137,122,0.404,123,0.024,124,0.024,127,2.315,128,2.315,144,0.706,145,0.785,151,1.265,157,0.706,158,0.785,163,1.035,164,2.595,172,1.771,208,1.883,209,1.903,210,2.595,281,2.595,315,1.378,332,1.524,333,1.378,335,2.551,344,1.378,360,2.058,389,1.694,390,2.638,391,2.315,392,1.694,393,2.315,394,1.694,395,1.694,396,2.315,399,2.154,474,3.178,475,2.497,476,3.017,477,3.413,478,4.125,479,2.497,480,2.497,481,2.497,482,4.951,483,3.017,484,3.017,485,3.017,486,3.017,487,3.017,488,3.017,489,3.017,490,3.017,491,3.017,492,3.017,493,3.017,494,3.017,495,3.017]],["title/classes/WidgetsDB.html",[0,0.207,496,2.145]],["body/classes/WidgetsDB.html",[0,0.16,1,0.312,2,0.199,3,0.199,4,0.165,6,0.101,7,0.52,8,0.76,9,2.156,10,0.807,11,0.713,12,0.807,13,0.52,20,3.26,23,0.459,24,0.038,25,0.459,26,0.149,27,0.401,28,0.602,29,0.682,30,0.584,31,0.694,32,0.459,34,0.682,36,0.526,39,0.894,40,1.534,82,1.541,121,0.876,122,0.545,123,0.02,124,0.02,144,0.802,145,0.775,146,0.661,151,1.06,157,0.802,158,1.034,159,1.42,160,1.213,172,2.175,182,1.42,185,2.521,199,1.534,207,3.368,208,1.859,209,2.22,315,1.565,331,1.463,332,1.174,333,1.062,335,2.975,344,1.565,346,3.047,347,2.616,349,1.305,360,2.11,374,2.906,389,1.924,390,2.688,391,2.521,392,1.924,393,2.521,394,1.924,395,1.924,396,2.285,398,3.577,399,2.447,413,2.836,414,2.836,416,2.447,447,2.836,496,2.906,497,1.924,498,2.325,499,3.717,500,2.325,501,3.427,502,3.427,503,3.427,504,3.427,505,1.66,506,1.66,507,1.66,508,1.66,509,3.427,510,4.07,511,3.427,512,2.836,513,3.427,514,3.427,515,2.325,516,2.325]],["title/coverage.html",[517,3.403]],["body/coverage.html",[0,0.42,4,0.206,5,2.406,24,0.037,26,0.126,43,0.751,54,1.632,58,1.632,64,1.632,81,1.468,98,1.632,114,1.632,122,0.39,123,0.024,124,0.024,125,2.076,126,2.406,130,0.997,131,1.829,133,2.076,136,2.406,164,1.829,165,2.406,178,2.406,199,2.312,210,1.829,211,2.406,228,1.328,254,1.874,256,2.792,258,1.096,268,1.328,276,1.328,281,1.829,282,2.406,326,2.406,329,1.829,330,1.829,360,1.096,361,2.406,379,2.406,386,2.406,388,2.076,411,2.076,412,2.406,417,2.076,420,2.406,422,2.076,432,2.406,442,2.406,448,1.829,450,2.076,462,2.406,474,1.829,475,2.406,496,2.076,497,2.406,505,2.076,506,2.076,507,2.076,508,2.076,517,2.406,518,2.908,519,2.908,520,2.908,521,2.406,522,6.135,523,2.406,524,6.047,525,4.797,526,2.406,527,2.406,528,5.399,529,5.399,530,2.406,531,2.908,532,2.908,533,2.908,534,2.908,535,3.328,536,2.406,537,2.871,538,3.328,539,2.406,540,2.406,541,2.871,542,2.406,543,2.406,544,5.948,545,5.948,546,3.328,547,2.406,548,2.406,549,4.973,550,4.973,551,2.406,552,2.406,553,2.908,554,2.908,555,2.908,556,2.406]],["title/dependencies.html",[557,2.503,558,2.993]],["body/dependencies.html",[24,0.036,32,0.629,33,2.953,123,0.032,124,0.032,333,2.144,558,3.885,559,4.695,560,4.695,561,4.695,562,4.695,563,4.695,564,4.695,565,4.695,566,4.695,567,4.695,568,4.695]],["title/miscellaneous/functions.html",[569,1.574,570,2.993]],["body/miscellaneous/functions.html",[6,0.198,11,0.719,23,0.719,24,0.035,25,0.719,26,0.198,27,0.628,28,0.611,36,0.628,123,0.032,124,0.032,537,3.256,539,4.441,541,3.256,542,4.441,569,2.869,570,3.775,571,3.775,572,3.775,573,4.561,574,5.366,575,4.561,576,4.561,577,5.366]],["title/index.html",[6,0.13,578,2.486]],["body/index.html",[1,0.653,24,0.033,123,0.033,124,0.033,255,2.735,578,4.032,579,4.873,580,4.873]],["title/modules.html",[581,3.403]],["body/modules.html",[24,0.033,123,0.033,124,0.033,581,4.074]],["title/miscellaneous/variables.html",[569,1.574,582,2.993]],["body/miscellaneous/variables.html",[6,0.034,8,0.678,10,0.212,11,0.187,12,0.212,17,1.334,20,1.447,24,0.038,26,0.198,28,0.187,32,0.105,36,0.613,39,0.778,40,1.105,42,0.647,43,0.878,82,1.784,100,1.156,106,0.713,120,0.244,122,0.187,123,0.008,124,0.008,130,0.268,133,0.997,141,0.395,142,1.105,143,0.526,144,0.915,145,0.716,146,0.397,148,1.105,150,1.281,151,0.979,152,1.105,157,0.947,158,0.997,160,0.745,161,1.062,163,1.677,172,1.862,185,0.439,186,1.105,187,1.156,188,2.094,189,2.094,190,2.094,195,0.638,199,0.867,208,2.206,209,1.899,258,1.105,259,0.953,260,0.864,261,0.953,262,0.864,263,0.953,264,0.638,265,0.953,266,0.357,267,1.339,315,0.638,329,0.879,330,0.879,334,1.156,337,3.198,338,1.887,339,0.647,340,1.156,341,1.156,343,0.647,344,0.357,346,3.271,347,2.897,349,0.784,353,2.187,354,2.187,355,2.187,356,2.187,358,2.187,359,1.156,360,1.772,367,1.156,374,0.997,388,0.997,398,1.351,416,1.643,417,0.997,422,0.997,424,2.427,426,1.156,427,1.566,428,1.904,429,1.904,431,0.997,444,0.647,450,0.997,461,0.647,474,1.191,477,0.647,479,1.566,480,1.156,481,1.156,482,2.634,499,1.566,505,0.997,506,0.997,507,0.997,508,0.997,512,2.814,521,0.647,523,1.156,525,0.647,526,1.156,527,1.156,530,1.156,535,0.647,536,1.156,537,0.559,538,3.236,540,1.156,541,0.559,543,1.156,546,0.647,547,1.156,548,0.647,551,0.647,552,0.647,556,0.647,569,0.492,571,0.647,572,0.647,582,0.647,583,3.76,584,1.397,585,0.782,586,0.782,587,1.397,588,0.782,589,0.782,590,4.888,591,3.911,592,5.039,593,1.397,594,3.401,595,5.237,596,2.933,597,2.933,598,1.397,599,2.933,600,0.782,601,2.933,602,0.782,603,2.933,604,0.782,605,2.933,606,0.782,607,3.592,608,4.83,609,3.911,610,2.301,611,0.782,612,1.893,613,1.397,614,0.782,615,0.782,616,1.893,617,2.643,618,1.397,619,0.782,620,0.782,621,0.782,622,0.782,623,1.893,624,0.782,625,2.933,626,0.782,627,0.782,628,0.782,629,0.782,630,0.782,631,0.782,632,0.782,633,0.782,634,0.782,635,4.553,636,3.911,637,3.401,638,1.397,639,0.782,640,3.401,641,2.301,642,3.183,643,3.401,644,1.397,645,2.301,646,3.401,647,0.782,648,2.301,649,1.397,650,4.469,651,3.76,652,1.893,653,1.397,654,0.782,655,2.933,656,0.782,657,0.782,658,4.377,659,0.782,660,0.782,661,0.782,662,0.782,663,0.782,664,0.782,665,0.782,666,1.397,667,1.397,668,4.045,669,1.397,670,1.397,671,1.397,672,2.301,673,2.301,674,2.301,675,1.397,676,1.397,677,0.782,678,0.782,679,0.782,680,2.643,681,2.643,682,1.893,683,1.397,684,0.782,685,0.782,686,0.782,687,2.301,688,0.782,689,0.782,690,0.782,691,0.782]]],"invertedIndex":[["",{"_index":24,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":199,"title":{},"body":{"classes/Gmail.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0/1",{"_index":524,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":531,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":534,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":533,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":532,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":315,"title":{},"body":{"classes/LeagueOfLegends.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["1/1",{"_index":529,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":545,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":562,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":528,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":579,"title":{},"body":{"index.html":{}}}],["2.29.1",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":560,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":550,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":296,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["365",{"_index":99,"title":{},"body":{"classes/About.html":{}}}],["4",{"_index":580,"title":{},"body":{"index.html":{}}}],["4.17.1",{"_index":563,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":544,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":340,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["66",{"_index":549,"title":{},"body":{"coverage.html":{}}}],["8.5.1",{"_index":564,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["_result",{"_index":348,"title":{},"body":{"classes/Login.html":{}}}],["_result['token",{"_index":351,"title":{},"body":{"classes/Login.html":{}}}],["_result['token_created_at",{"_index":352,"title":{},"body":{"classes/Login.html":{}}}],["abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789",{"_index":473,"title":{},"body":{"classes/Utils.html":{}}}],["access_token",{"_index":635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["account",{"_index":665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addroute",{"_index":542,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["addroute(endpoint",{"_index":573,"title":{},"body":{"miscellaneous/functions.html":{}}}],["addusers",{"_index":526,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["addusers(infos",{"_index":672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addwidget",{"_index":507,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["addwidget(userid",{"_index":515,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["already",{"_index":428,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["api",{"_index":366,"title":{},"body":{"classes/Nasa.html":{},"classes/Office.html":{}}}],["api_key",{"_index":51,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{}}}],["api_url",{"_index":48,"title":{},"body":{"classes/About.html":{}}}],["apod",{"_index":66,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["app",{"_index":536,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apple_mail",{"_index":263,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["apple_token",{"_index":264,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["apple_user",{"_index":652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argument",{"_index":469,"title":{},"body":{"classes/Utils.html":{}}}],["array",{"_index":195,"title":{},"body":{"classes/Gmail.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["astronomy",{"_index":67,"title":{},"body":{"classes/About.html":{}}}],["async",{"_index":8,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["async(err",{"_index":510,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["authactions",{"_index":134,"title":{},"body":{"classes/Authentication.html":{}}}],["authentication",{"_index":125,"title":{"classes/Authentication.html":{}},"body":{"classes/Authentication.html":{},"coverage.html":{}}}],["authorization",{"_index":189,"title":{},"body":{"classes/Gmail.html":{},"classes/Office.html":{},"miscellaneous/variables.html":{}}}],["autologin",{"_index":83,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{}}}],["autologin.startswith(\"https://intra.epitech.eu",{"_index":171,"title":{},"body":{"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{}}}],["autologin.substring(25",{"_index":230,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["awailable",{"_index":21,"title":{},"body":{"classes/About.html":{}}}],["await",{"_index":151,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["axios",{"_index":142,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["axiosresponse",{"_index":143,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["bad",{"_index":649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base_currency",{"_index":155,"title":{},"body":{"classes/Currency.html":{}}}],["basic",{"_index":328,"title":{},"body":{"classes/Login.html":{},"classes/Register.html":{}}}],["bearer",{"_index":190,"title":{},"body":{"classes/Gmail.html":{},"classes/Office.html":{},"miscellaneous/variables.html":{}}}],["before",{"_index":502,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["boolean",{"_index":479,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["break",{"_index":642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calendar",{"_index":102,"title":{},"body":{"classes/About.html":{},"classes/Office.html":{}}}],["callback",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(err",{"_index":608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["camera",{"_index":75,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["campus",{"_index":170,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["case",{"_index":482,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":157,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["check",{"_index":444,"title":{},"body":{"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["checktoken",{"_index":450,"title":{},"body":{"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checktoken(token",{"_index":452,"title":{},"body":{"classes/Token.html":{}}}],["city",{"_index":53,"title":{},"body":{"classes/About.html":{},"classes/Temperature.html":{}}}],["city_temperature",{"_index":52,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["city_weather",{"_index":57,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["class",{"_index":0,"title":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{}}}],["classes",{"_index":1,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"index.html":{}}}],["client",{"_index":41,"title":{},"body":{"classes/About.html":{}}}],["console.debug(\"firsturl",{"_index":294,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug(\"profile",{"_index":322,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug(\"response",{"_index":639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"secondurl",{"_index":304,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug(\"setting",{"_index":321,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug('[handleoauthusersaction",{"_index":658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(err",{"_index":398,"title":{},"body":{"classes/Profile.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["console.debug(result",{"_index":612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"response",{"_index":647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"result",{"_index":400,"title":{},"body":{"classes/Profile.html":{}}}],["console.log(\"result[0",{"_index":401,"title":{},"body":{"classes/Profile.html":{}}}],["console.log('autologin",{"_index":174,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["console.log('bearer",{"_index":638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('currency",{"_index":154,"title":{},"body":{"classes/Currency.html":{}}}],["console.log(error",{"_index":159,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"classes/WidgetsDB.html":{}}}],["console.log(from",{"_index":147,"title":{},"body":{"classes/Currency.html":{}}}],["const",{"_index":145,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["converter",{"_index":59,"title":{},"body":{"classes/About.html":{}}}],["correspond",{"_index":629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cors",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":517,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":504,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["created",{"_index":655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdat",{"_index":454,"title":{},"body":{"classes/Token.html":{}}}],["credits",{"_index":227,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["curiosity",{"_index":72,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["curiosity_image",{"_index":71,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["currency",{"_index":58,"title":{"classes/Currency.html":{}},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["currency.getexchangerate(req",{"_index":483,"title":{},"body":{"classes/Widget.html":{}}}],["currency_converter",{"_index":61,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["current",{"_index":140,"title":{},"body":{"classes/Currency.html":{}}}],["current_time",{"_index":44,"title":{},"body":{"classes/About.html":{}}}],["dashboard",{"_index":22,"title":{},"body":{"classes/About.html":{}}}],["data",{"_index":374,"title":{},"body":{"classes/Nasa.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["data.leaguepoints",{"_index":313,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.losses",{"_index":312,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.queuetype",{"_index":308,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.rank",{"_index":310,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.tier",{"_index":309,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.wins",{"_index":311,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data[0",{"_index":377,"title":{},"body":{"classes/Nasa.html":{}}}],["database",{"_index":499,"title":{},"body":{"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["database/databaseactions",{"_index":331,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{}}}],["database/interfaces",{"_index":229,"title":{},"body":{"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Register.html":{}}}],["date",{"_index":70,"title":{},"body":{"classes/About.html":{},"classes/Gmail.html":{},"classes/Nasa.html":{},"classes/Office.html":{}}}],["date').value",{"_index":203,"title":{},"body":{"classes/Gmail.html":{}}}],["day",{"_index":69,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["db",{"_index":523,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["db.query(query",{"_index":607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db.query(querystring",{"_index":628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dd",{"_index":355,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["decoded",{"_index":393,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["default",{"_index":163,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["delete",{"_index":614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletewidget",{"_index":527,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":558,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":55,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{},"classes/Utils.html":{}}}],["diff",{"_index":458,"title":{},"body":{"classes/Token.html":{}}}],["display",{"_index":56,"title":{},"body":{"classes/About.html":{}}}],["display_name",{"_index":47,"title":{},"body":{"classes/About.html":{}}}],["documentation",{"_index":518,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["door",{"_index":95,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{}}}],["door_name",{"_index":97,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{}}}],["doors",{"_index":91,"title":{},"body":{"classes/About.html":{}}}],["dotenv",{"_index":561,"title":{},"body":{"dependencies.html":{}}}],["emails",{"_index":184,"title":{},"body":{"classes/Gmail.html":{}}}],["end",{"_index":384,"title":{},"body":{"classes/Office.html":{}}}],["end_date",{"_index":105,"title":{},"body":{"classes/About.html":{},"classes/Office.html":{}}}],["endpoint",{"_index":575,"title":{},"body":{"miscellaneous/functions.html":{}}}],["epitech",{"_index":78,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{}}}],["epitech_doors",{"_index":90,"title":{},"body":{"classes/About.html":{}}}],["epitech_doors_open_door",{"_index":93,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["epitechdoors",{"_index":164,"title":{"classes/EpitechDoors.html":{}},"body":{"classes/EpitechDoors.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["epitechdoors.opendoor(req",{"_index":491,"title":{},"body":{"classes/Widget.html":{}}}],["equal",{"_index":468,"title":{},"body":{"classes/Utils.html":{}}}],["err",{"_index":346,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":158,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["error[addusers",{"_index":673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error[getusers",{"_index":671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error[updateuserauthtoken",{"_index":659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["events",{"_index":103,"title":{},"body":{"classes/About.html":{},"classes/Office.html":{}}}],["exchange",{"_index":62,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{}}}],["existed",{"_index":501,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["existinginformation",{"_index":680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existinginformationtype",{"_index":681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exists",{"_index":429,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":338,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":162,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"interfaces/UserInformations.html":{}}}],["express",{"_index":32,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["express.request",{"_index":10,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["express.response",{"_index":12,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["facebook_mail",{"_index":261,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["facebook_token",{"_index":262,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["facebook_user",{"_index":643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["facebookuser",{"_index":645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":172,"title":{},"body":{"classes/EpitechDoors.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{}}}],["firstname",{"_index":233,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["firsturl",{"_index":291,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["found",{"_index":391,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["from').value",{"_index":204,"title":{},"body":{"classes/Gmail.html":{}}}],["function",{"_index":538,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":570,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["game's",{"_index":289,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["gamedata",{"_index":280,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["gamedata.length",{"_index":314,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["gamedata[0].queuetype",{"_index":316,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["gamedata[1",{"_index":318,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["general",{"_index":16,"title":{},"body":{"classes/About.html":{}}}],["generate",{"_index":446,"title":{},"body":{"classes/Token.html":{},"classes/Utils.html":{}}}],["generated",{"_index":470,"title":{},"body":{"classes/Utils.html":{}}}],["get(req",{"_index":9,"title":{},"body":{"classes/About.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{}}}],["getcalendarevents",{"_index":380,"title":{},"body":{"classes/Office.html":{}}}],["getcalendarevents(req",{"_index":381,"title":{},"body":{"classes/Office.html":{}}}],["getexchangerate",{"_index":137,"title":{},"body":{"classes/Currency.html":{}}}],["getexchangerate(req",{"_index":138,"title":{},"body":{"classes/Currency.html":{}}}],["getgrades",{"_index":212,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getgrades(req",{"_index":216,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getlastfivemail",{"_index":179,"title":{},"body":{"classes/Gmail.html":{}}}],["getlastfivemail(req",{"_index":180,"title":{},"body":{"classes/Gmail.html":{}}}],["getnasadayimage",{"_index":362,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasadayimage(req",{"_index":364,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasaroverimage",{"_index":363,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasaroverimage(req",{"_index":368,"title":{},"body":{"classes/Nasa.html":{}}}],["getnotifications",{"_index":213,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getnotifications(req",{"_index":218,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getpartners",{"_index":214,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getpartners(req",{"_index":220,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getprofile",{"_index":215,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getprofile(req",{"_index":224,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getrandomstring",{"_index":463,"title":{},"body":{"classes/Utils.html":{}}}],["getrandomstring(length",{"_index":464,"title":{},"body":{"classes/Utils.html":{}}}],["getrow",{"_index":388,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrow('token",{"_index":397,"title":{},"body":{"classes/Profile.html":{}}}],["gettemperature",{"_index":433,"title":{},"body":{"classes/Temperature.html":{}}}],["gettemperature(req",{"_index":435,"title":{},"body":{"classes/Temperature.html":{}}}],["getting",{"_index":325,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["getuserbytoken",{"_index":506,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuserbytoken(token",{"_index":509,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["getuserprofile",{"_index":283,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["getuserprofile(req",{"_index":284,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["getusers",{"_index":329,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getusers(infos",{"_index":670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getusers(user",{"_index":345,"title":{},"body":{"classes/Login.html":{}}}],["getweather",{"_index":434,"title":{},"body":{"classes/Temperature.html":{}}}],["getweather(req",{"_index":437,"title":{},"body":{"classes/Temperature.html":{}}}],["getwidgetsbyuserid",{"_index":505,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getwidgetsbyuserid(userid",{"_index":514,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["given",{"_index":141,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Utils.html":{},"miscellaneous/variables.html":{}}}],["gmail",{"_index":114,"title":{"classes/Gmail.html":{}},"body":{"classes/About.html":{},"classes/Gmail.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["gmail.getlastfivemail(req",{"_index":495,"title":{},"body":{"classes/Widget.html":{}}}],["gmail_inbox",{"_index":117,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["google",{"_index":116,"title":{},"body":{"classes/About.html":{}}}],["google/facebook/office",{"_index":664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["google_api_key",{"_index":115,"title":{},"body":{"classes/About.html":{},"classes/Gmail.html":{}}}],["google_mail",{"_index":259,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["google_token",{"_index":260,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["google_user",{"_index":637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googleuser",{"_index":641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gpa",{"_index":226,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["grades",{"_index":89,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{}}}],["handle",{"_index":477,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusers",{"_index":133,"title":{},"body":{"classes/Authentication.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusers(req",{"_index":135,"title":{},"body":{"classes/Authentication.html":{}}}],["handleoauthusersaction",{"_index":547,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusersaction(infos",{"_index":654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["header.name",{"_index":200,"title":{},"body":{"classes/Gmail.html":{}}}],["headers",{"_index":188,"title":{},"body":{"classes/Gmail.html":{},"classes/Office.html":{},"miscellaneous/variables.html":{}}}],["hh:mm:ss",{"_index":356,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":42,"title":{},"body":{"classes/About.html":{},"miscellaneous/variables.html":{}}}],["http://api.openweathermap.org",{"_index":49,"title":{},"body":{"classes/About.html":{}}}],["http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key",{"_index":439,"title":{},"body":{"classes/Temperature.html":{}}}],["https://${region}.api.riotgames.com/lol/league/v4/entries/by",{"_index":302,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["https://${region}.api.riotgames.com/lol/summoner/v4/summoners/by",{"_index":292,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["https://api.nasa.gov",{"_index":65,"title":{},"body":{"classes/About.html":{}}}],["https://api.nasa.gov/mars",{"_index":372,"title":{},"body":{"classes/Nasa.html":{}}}],["https://api.nasa.gov/planetary/apod?api_key=${api_key}&date=${date",{"_index":370,"title":{},"body":{"classes/Nasa.html":{}}}],["https://ddragon.leagueoflegends.com/cdn/11.23.1/img/profileicon/${response.data['profileiconid']}.png",{"_index":298,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["https://epi",{"_index":175,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["https://freecurrencyapi.net",{"_index":60,"title":{},"body":{"classes/About.html":{}}}],["https://freecurrencyapi.net/api/v2/latest?base_currency=${from}&apikey=${api_key",{"_index":149,"title":{},"body":{"classes/Currency.html":{}}}],["https://gmail.googleapis.com/gmail/v1/users/${mail}/messages?maxresults=${max_results",{"_index":192,"title":{},"body":{"classes/Gmail.html":{}}}],["https://graph.facebook.com/me/?fields=id,name,email",{"_index":644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://graph.microsoft.com/v1.0/me",{"_index":100,"title":{},"body":{"classes/About.html":{},"miscellaneous/variables.html":{}}}],["https://graph.microsoft.com/v1.0/me/calendarview?startdatetime=${start_date}&enddatetime=${end_date",{"_index":385,"title":{},"body":{"classes/Office.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/binome/?format=json",{"_index":248,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/notes?format=json",{"_index":252,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/notification/message?format=json",{"_index":250,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user?format=json",{"_index":231,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${intra_autologin",{"_index":173,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["https://intra.epitech.eu/admin/autolog",{"_index":79,"title":{},"body":{"classes/About.html":{}}}],["https://www.googleapis.com/oauth2/v1/userinfo?alt=json",{"_index":187,"title":{},"body":{"classes/Gmail.html":{},"miscellaneous/variables.html":{}}}],["icon",{"_index":286,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["id",{"_index":615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifier",{"_index":519,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":74,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["import",{"_index":31,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["inbox",{"_index":118,"title":{},"body":{"classes/About.html":{},"classes/Gmail.html":{}}}],["incorrect",{"_index":350,"title":{},"body":{"classes/Login.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["informations",{"_index":17,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"miscellaneous/variables.html":{}}}],["infos",{"_index":424,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["infos.apple_mail",{"_index":603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.apple_token",{"_index":604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.facebook_mail",{"_index":601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.facebook_token",{"_index":602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.google_mail",{"_index":599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.google_token",{"_index":600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.mail",{"_index":596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.office_mail",{"_index":605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.office_token",{"_index":606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.password",{"_index":598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insert",{"_index":593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":254,"title":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["interfaces",{"_index":255,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"index.html":{}}}],["internal",{"_index":161,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["intra",{"_index":77,"title":{},"body":{"classes/About.html":{}}}],["intra_autologin",{"_index":92,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{}}}],["intra_epitech",{"_index":76,"title":{},"body":{"classes/About.html":{}}}],["intra_epitech_grades",{"_index":88,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_notifications",{"_index":86,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_partners",{"_index":84,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_profile",{"_index":80,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intraepitech",{"_index":210,"title":{"classes/IntraEpitech.html":{}},"body":{"classes/IntraEpitech.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["intraepitech.getgrades(req",{"_index":492,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getnotifications(req",{"_index":490,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getpartners(req",{"_index":489,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getprofile(req",{"_index":488,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitechuser",{"_index":228,"title":{"interfaces/IntraEpitechUser.html":{}},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["invalid",{"_index":396,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["ip",{"_index":35,"title":{},"body":{"classes/About.html":{}}}],["ip.split(':')[3",{"_index":38,"title":{},"body":{"classes/About.html":{}}}],["json.stringify(widget",{"_index":611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jsonwebtoken",{"_index":333,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"dependencies.html":{}}}],["jwt",{"_index":332,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwt.jwtpayload",{"_index":394,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwt.sign",{"_index":343,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["jwt.verify(token",{"_index":395,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwttoken",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":183,"title":{},"body":{"classes/Gmail.html":{}}}],["lastname",{"_index":235,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["league",{"_index":108,"title":{},"body":{"classes/About.html":{}}}],["league_of_legends",{"_index":107,"title":{},"body":{"classes/About.html":{}}}],["league_of_legends_summoner_profile",{"_index":110,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["leagueoflegends",{"_index":281,"title":{"classes/LeagueOfLegends.html":{}},"body":{"classes/LeagueOfLegends.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["leagueoflegends.getuserprofile(req",{"_index":494,"title":{},"body":{"classes/Widget.html":{}}}],["leagueoflegendsgamedata",{"_index":268,"title":{"interfaces/LeagueOfLegendsGameData.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["leagueoflegendsprofiledata",{"_index":276,"title":{"interfaces/LeagueOfLegendsProfileData.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["leaguepoints",{"_index":274,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["legends",{"_index":109,"title":{},"body":{"classes/About.html":{}}}],["length",{"_index":467,"title":{},"body":{"classes/Utils.html":{}}}],["level",{"_index":287,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["limit",{"_index":618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["list",{"_index":18,"title":{},"body":{"classes/About.html":{}}}],["literal",{"_index":678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":241,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["logged",{"_index":359,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":130,"title":{"classes/Login.html":{}},"body":{"classes/Authentication.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"interfaces/UserInformations.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logue.eu/api/doors_open?login=${autologin}&door_name=${door_name",{"_index":176,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["losses",{"_index":273,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["mail",{"_index":186,"title":{},"body":{"classes/Gmail.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":124,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["max_results",{"_index":119,"title":{},"body":{"classes/About.html":{},"classes/Gmail.html":{}}}],["message",{"_index":209,"title":{},"body":{"classes/Gmail.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["messageids",{"_index":194,"title":{},"body":{"classes/Gmail.html":{}}}],["messageids.push(message.id",{"_index":197,"title":{},"body":{"classes/Gmail.html":{}}}],["messages",{"_index":198,"title":{},"body":{"classes/Gmail.html":{}}}],["messages.push(msg",{"_index":206,"title":{},"body":{"classes/Gmail.html":{}}}],["method",{"_index":152,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":7,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["miscellaneous",{"_index":569,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":354,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["module.exports",{"_index":121,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["modules",{"_index":581,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moment",{"_index":33,"title":{},"body":{"classes/About.html":{},"classes/Login.html":{},"classes/Token.html":{},"dependencies.html":{}}}],["moment().format('yyyy",{"_index":353,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["moment().unix",{"_index":45,"title":{},"body":{"classes/About.html":{}}}],["moment(result[0].token_created_at",{"_index":456,"title":{},"body":{"classes/Token.html":{}}}],["moment.moment",{"_index":455,"title":{},"body":{"classes/Token.html":{}}}],["montpellier",{"_index":96,"title":{},"body":{"classes/About.html":{}}}],["mysql.createconnection",{"_index":630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":25,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["name/${summoner_name}?api_key=${api_key",{"_index":293,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["nasa",{"_index":64,"title":{"classes/Nasa.html":{}},"body":{"classes/About.html":{},"classes/Nasa.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["nasa.getnasadayimage(req",{"_index":486,"title":{},"body":{"classes/Widget.html":{}}}],["nasa.getnasaroverimage(req",{"_index":487,"title":{},"body":{"classes/Widget.html":{}}}],["new",{"_index":122,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newtoken",{"_index":342,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{}}}],["newvalues",{"_index":620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["next",{"_index":577,"title":{},"body":{"miscellaneous/functions.html":{}}}],["none",{"_index":656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notifications",{"_index":87,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{}}}],["now",{"_index":457,"title":{},"body":{"classes/Token.html":{}}}],["now.diff(createdat",{"_index":459,"title":{},"body":{"classes/Token.html":{}}}],["null",{"_index":453,"title":{},"body":{"classes/Token.html":{}}}],["number",{"_index":120,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"miscellaneous/variables.html":{}}}],["number(process.env.expire_time",{"_index":339,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["oauth",{"_index":132,"title":{},"body":{"classes/Authentication.html":{}}}],["oauth's",{"_index":662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["office",{"_index":98,"title":{"classes/Office.html":{}},"body":{"classes/About.html":{},"classes/Office.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["office.getcalendarevents(req",{"_index":493,"title":{},"body":{"classes/Widget.html":{}}}],["office_calendar_events",{"_index":101,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["office_mail",{"_index":265,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["office_token",{"_index":106,"title":{},"body":{"classes/About.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Office.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["office_user",{"_index":646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["officeuser",{"_index":648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["one",{"_index":447,"title":{},"body":{"classes/Token.html":{},"classes/WidgetsDB.html":{}}}],["open",{"_index":94,"title":{},"body":{"classes/About.html":{}}}],["opendoor",{"_index":166,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["opendoor(req",{"_index":167,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["opens",{"_index":169,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["optional",{"_index":27,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["otherwise",{"_index":503,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["outlook_mail",{"_index":407,"title":{},"body":{"classes/Profile.html":{}}}],["overview",{"_index":578,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":557,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":34,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["parameters",{"_index":23,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":50,"title":{},"body":{"classes/About.html":{}}}],["partners",{"_index":85,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{}}}],["password",{"_index":267,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":413,"title":{},"body":{"classes/ProfileUpdate.html":{},"classes/WidgetsDB.html":{}}}],["patch(req",{"_index":414,"title":{},"body":{"classes/ProfileUpdate.html":{},"classes/WidgetsDB.html":{}}}],["payload",{"_index":341,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["people",{"_index":222,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["photo",{"_index":376,"title":{},"body":{"classes/Nasa.html":{}}}],["photos/api/v1/rovers/curiosity/photos?earth_date=${date}&camera=${camera}&api_key=${api_key",{"_index":373,"title":{},"body":{"classes/Nasa.html":{}}}],["picture",{"_index":68,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{}}}],["plain_user",{"_index":682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plainuser",{"_index":683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["possible",{"_index":472,"title":{},"body":{"classes/Utils.html":{}}}],["post",{"_index":127,"title":{},"body":{"classes/Authentication.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["post(req",{"_index":128,"title":{},"body":{"classes/Authentication.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["process.env.jwt_secret",{"_index":344,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["process.env.my_sql_database",{"_index":634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_host",{"_index":631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_password",{"_index":633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_user",{"_index":632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["profile",{"_index":81,"title":{"classes/Profile.html":{}},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Profile.html":{},"coverage.html":{}}}],["profileactions",{"_index":418,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["profileiconurl",{"_index":279,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["profilepicture",{"_index":237,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["profileupdate",{"_index":411,"title":{"classes/ProfileUpdate.html":{}},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{}}}],["project",{"_index":223,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["promise",{"_index":666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise(async",{"_index":667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promo",{"_index":239,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["properties",{"_index":257,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["query",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["querystring",{"_index":627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queuetype",{"_index":269,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["random",{"_index":466,"title":{},"body":{"classes/Utils.html":{}}}],["rank",{"_index":271,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["ranked",{"_index":288,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["ranked_flex_sr",{"_index":319,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["ranked_solo_5x5",{"_index":317,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["rate",{"_index":63,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{}}}],["rc.0",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["region",{"_index":113,"title":{},"body":{"classes/About.html":{},"classes/LeagueOfLegends.html":{}}}],["register",{"_index":131,"title":{"classes/Register.html":{}},"body":{"classes/Authentication.html":{},"classes/Register.html":{},"coverage.html":{}}}],["registeractions",{"_index":423,"title":{},"body":{"classes/Register.html":{}}}],["registerbasicuser",{"_index":422,"title":{},"body":{"classes/Register.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registerbasicuser(infos",{"_index":425,"title":{},"body":{"classes/Register.html":{}}}],["register|login",{"_index":679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registration",{"_index":661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reject",{"_index":669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req",{"_index":28,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["req.body",{"_index":146,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["req.body.mail",{"_index":684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.body.password",{"_index":685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":389,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["req.ip",{"_index":37,"title":{},"body":{"classes/About.html":{}}}],["req.params.type",{"_index":480,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":367,"title":{},"body":{"classes/Nasa.html":{},"miscellaneous/variables.html":{}}}],["requesthandler",{"_index":539,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["requesthandler(req",{"_index":576,"title":{},"body":{"miscellaneous/functions.html":{}}}],["requests",{"_index":478,"title":{},"body":{"classes/Widget.html":{}}}],["require(\"http\").server(app",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":336,"title":{},"body":{"classes/Login.html":{}}}],["res",{"_index":11,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["res.status(200).json",{"_index":40,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/Gmail.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["res.status(200).json(photo",{"_index":378,"title":{},"body":{"classes/Nasa.html":{}}}],["res.status(200).json(profile",{"_index":323,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["res.status(200).json(response.data",{"_index":371,"title":{},"body":{"classes/Nasa.html":{},"classes/Office.html":{}}}],["res.status(200).json(response.data['main",{"_index":440,"title":{},"body":{"classes/Temperature.html":{}}}],["res.status(200).json(response.data['weather",{"_index":441,"title":{},"body":{"classes/Temperature.html":{}}}],["res.status(200).json(response2.data",{"_index":251,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(response2.data['binomes",{"_index":249,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(response2.data['modules",{"_index":253,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(user",{"_index":247,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(400).json",{"_index":334,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["res.status(401).json",{"_index":390,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["res.status(403).json",{"_index":430,"title":{},"body":{"classes/Register.html":{}}}],["res.status(404).json",{"_index":399,"title":{},"body":{"classes/Profile.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["res.status(500).json",{"_index":160,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["res.status(response.status).json(response.data",{"_index":177,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["res.status(response2.status).json",{"_index":324,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["resolve",{"_index":668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":150,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["response.data",{"_index":640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response.data.data[to",{"_index":153,"title":{},"body":{"classes/Currency.html":{}}}],["response.data.email",{"_index":191,"title":{},"body":{"classes/Gmail.html":{}}}],["response.data.photos",{"_index":375,"title":{},"body":{"classes/Nasa.html":{}}}],["response.data['credits",{"_index":245,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['firstname",{"_index":234,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['gpa'][0]['gpa",{"_index":246,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['groups'][0]['name",{"_index":242,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['id",{"_index":297,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response.data['lastname",{"_index":236,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['login",{"_index":232,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['name",{"_index":300,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response.data['picture",{"_index":238,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['promo",{"_index":240,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['semester_code",{"_index":244,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['summonerlevel",{"_index":299,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response.status",{"_index":295,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response2",{"_index":193,"title":{},"body":{"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{}}}],["response2.data.length",{"_index":306,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response2.data.map((data",{"_index":307,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response2.data.messages.foreach((message",{"_index":196,"title":{},"body":{"classes/Gmail.html":{}}}],["response2.status",{"_index":305,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response3.data.payload.headers.find((header",{"_index":202,"title":{},"body":{"classes/Gmail.html":{}}}],["result",{"_index":347,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["result.affectedrows",{"_index":461,"title":{},"body":{"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["result.error",{"_index":426,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["result.length",{"_index":349,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["result.message",{"_index":427,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["result.result",{"_index":431,"title":{},"body":{"classes/Register.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["result[0",{"_index":402,"title":{},"body":{"classes/Profile.html":{}}}],["result[addusers",{"_index":674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[getusers",{"_index":675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[updateuserauthtoken",{"_index":660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["results",{"_index":123,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":15,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{}}}],["retrieves",{"_index":182,"title":{},"body":{"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/WidgetsDB.html":{}}}],["return",{"_index":39,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":29,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["routes",{"_index":543,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rover",{"_index":73,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["row",{"_index":616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rows",{"_index":619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rslt",{"_index":403,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['apple_mail",{"_index":409,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['facebook_mail",{"_index":406,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['google_mail",{"_index":405,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['mail",{"_index":404,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['office_mail",{"_index":410,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['outlook_mail",{"_index":408,"title":{},"body":{"classes/Profile.html":{}}}],["save",{"_index":676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seconds",{"_index":460,"title":{},"body":{"classes/Token.html":{}}}],["secondurl",{"_index":301,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["select",{"_index":617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["semestercode",{"_index":243,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["server",{"_index":43,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":574,"title":{},"body":{"miscellaneous/functions.html":{}}}],["services",{"_index":19,"title":{},"body":{"classes/About.html":{}}}],["set",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signed",{"_index":663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":3,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["src/.../authactions.ts",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.ts",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../databaseactions.ts",{"_index":583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../profileactions.ts",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../registeractions.ts",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../request_handler.ts",{"_index":572,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../routes.ts",{"_index":571,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../tokenaction.ts",{"_index":585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/database/database.ts",{"_index":521,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/databaseactions.ts",{"_index":525,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/interfaces.ts",{"_index":256,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["src/index.ts",{"_index":535,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/request_handler.ts",{"_index":537,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/routes.ts",{"_index":541,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/routes/about/about.ts",{"_index":5,"title":{},"body":{"classes/About.html":{},"coverage.html":{}}}],["src/routes/about/about.ts:12",{"_index":14,"title":{},"body":{"classes/About.html":{}}}],["src/routes/auth/authactions.ts",{"_index":546,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/auth/login.ts",{"_index":326,"title":{},"body":{"classes/Login.html":{},"coverage.html":{}}}],["src/routes/auth/login.ts:14",{"_index":327,"title":{},"body":{"classes/Login.html":{}}}],["src/routes/auth/oauth.ts",{"_index":126,"title":{},"body":{"classes/Authentication.html":{},"coverage.html":{}}}],["src/routes/auth/oauth.ts:12",{"_index":129,"title":{},"body":{"classes/Authentication.html":{}}}],["src/routes/auth/register.ts",{"_index":420,"title":{},"body":{"classes/Register.html":{},"coverage.html":{}}}],["src/routes/auth/register.ts:13",{"_index":421,"title":{},"body":{"classes/Register.html":{}}}],["src/routes/auth/registeractions.ts",{"_index":548,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/auth/token.ts",{"_index":442,"title":{},"body":{"classes/Token.html":{},"coverage.html":{}}}],["src/routes/auth/token.ts:16",{"_index":443,"title":{},"body":{"classes/Token.html":{}}}],["src/routes/auth/token.ts:52",{"_index":445,"title":{},"body":{"classes/Token.html":{}}}],["src/routes/auth/tokenaction.ts",{"_index":551,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/profile/profile.ts",{"_index":386,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{}}}],["src/routes/profile/profile.ts:13",{"_index":387,"title":{},"body":{"classes/Profile.html":{}}}],["src/routes/profile/profileactions.ts",{"_index":552,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/profile/profileupdate.ts",{"_index":412,"title":{},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{}}}],["src/routes/profile/profileupdate.ts:13",{"_index":415,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["src/routes/widgets/currency.ts",{"_index":136,"title":{},"body":{"classes/Currency.html":{},"coverage.html":{}}}],["src/routes/widgets/currency.ts:12",{"_index":139,"title":{},"body":{"classes/Currency.html":{}}}],["src/routes/widgets/epitechdoors.ts",{"_index":165,"title":{},"body":{"classes/EpitechDoors.html":{},"coverage.html":{}}}],["src/routes/widgets/epitechdoors.ts:12",{"_index":168,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["src/routes/widgets/gmail.ts",{"_index":178,"title":{},"body":{"classes/Gmail.html":{},"coverage.html":{}}}],["src/routes/widgets/gmail.ts:12",{"_index":181,"title":{},"body":{"classes/Gmail.html":{}}}],["src/routes/widgets/intraepitech.ts",{"_index":211,"title":{},"body":{"classes/IntraEpitech.html":{},"coverage.html":{}}}],["src/routes/widgets/intraepitech.ts:13",{"_index":225,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:131",{"_index":217,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:56",{"_index":221,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:94",{"_index":219,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/leagueoflegends.ts",{"_index":282,"title":{},"body":{"classes/LeagueOfLegends.html":{},"coverage.html":{}}}],["src/routes/widgets/leagueoflegends.ts:13",{"_index":285,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["src/routes/widgets/nasa.ts",{"_index":361,"title":{},"body":{"classes/Nasa.html":{},"coverage.html":{}}}],["src/routes/widgets/nasa.ts:11",{"_index":365,"title":{},"body":{"classes/Nasa.html":{}}}],["src/routes/widgets/nasa.ts:34",{"_index":369,"title":{},"body":{"classes/Nasa.html":{}}}],["src/routes/widgets/office.ts",{"_index":379,"title":{},"body":{"classes/Office.html":{},"coverage.html":{}}}],["src/routes/widgets/office.ts:12",{"_index":382,"title":{},"body":{"classes/Office.html":{}}}],["src/routes/widgets/temperature.ts",{"_index":432,"title":{},"body":{"classes/Temperature.html":{},"coverage.html":{}}}],["src/routes/widgets/temperature.ts:12",{"_index":436,"title":{},"body":{"classes/Temperature.html":{}}}],["src/routes/widgets/temperature.ts:36",{"_index":438,"title":{},"body":{"classes/Temperature.html":{}}}],["src/routes/widgets/widget.ts",{"_index":475,"title":{},"body":{"classes/Widget.html":{},"coverage.html":{}}}],["src/routes/widgets/widget.ts:20",{"_index":476,"title":{},"body":{"classes/Widget.html":{}}}],["src/routes/widgets/widgetsdb.ts",{"_index":497,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{}}}],["src/routes/widgets/widgetsdb.ts:13",{"_index":498,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["src/routes/widgets/widgetsdb.ts:79",{"_index":500,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["src/utils/utils.ts",{"_index":462,"title":{},"body":{"classes/Utils.html":{},"coverage.html":{}}}],["src/utils/utils.ts:7",{"_index":465,"title":{},"body":{"classes/Utils.html":{}}}],["start",{"_index":383,"title":{},"body":{"classes/Office.html":{}}}],["start_date",{"_index":104,"title":{},"body":{"classes/About.html":{},"classes/Office.html":{}}}],["statements",{"_index":520,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":36,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["subject').value",{"_index":201,"title":{},"body":{"classes/Gmail.html":{}}}],["success",{"_index":207,"title":{},"body":{"classes/Gmail.html":{},"classes/WidgetsDB.html":{}}}],["summoner",{"_index":111,"title":{},"body":{"classes/About.html":{},"classes/LeagueOfLegends.html":{}}}],["summoner/${summoner_id}?api_key=${api_key",{"_index":303,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["summoner_id",{"_index":290,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["summoner_name",{"_index":112,"title":{},"body":{"classes/About.html":{},"classes/LeagueOfLegends.html":{}}}],["summonerlevel",{"_index":278,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["summonername",{"_index":277,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["switch",{"_index":481,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":556,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["target_currency",{"_index":156,"title":{},"body":{"classes/Currency.html":{}}}],["temperature",{"_index":54,"title":{"classes/Temperature.html":{}},"body":{"classes/About.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["temperature.gettemperature(req",{"_index":484,"title":{},"body":{"classes/Widget.html":{}}}],["temperature.getweather(req",{"_index":485,"title":{},"body":{"classes/Widget.html":{}}}],["text",{"_index":471,"title":{},"body":{"classes/Utils.html":{}}}],["tier",{"_index":270,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["to').value",{"_index":205,"title":{},"body":{"classes/Gmail.html":{}}}],["token",{"_index":360,"title":{"classes/Token.html":{}},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token.split",{"_index":392,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["token_created_at",{"_index":358,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["token_wl",{"_index":540,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenaction",{"_index":451,"title":{},"body":{"classes/Token.html":{}}}],["true",{"_index":208,"title":{},"body":{"classes/Gmail.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":144,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":26,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":337,"title":{},"body":{"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["unknown",{"_index":30,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["unranked",{"_index":320,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["update",{"_index":416,"title":{},"body":{"classes/ProfileUpdate.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["updated",{"_index":687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos",{"_index":330,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateinfos(['facebook_mail",{"_index":689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['google_mail",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['mail",{"_index":690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['office_mail",{"_index":688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['token",{"_index":357,"title":{},"body":{"classes/Login.html":{}}}],["updates",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuserauthtoken",{"_index":530,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateuserauthtoken(infos",{"_index":657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuserinformations",{"_index":417,"title":{},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateuserinformations(req",{"_index":419,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["updatewidget",{"_index":508,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updatewidget(userid",{"_index":516,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["url",{"_index":148,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":82,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":185,"title":{},"body":{"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["user.length",{"_index":511,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["user.type",{"_index":650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.email",{"_index":651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.mail",{"_index":653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.password",{"_index":691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user[0]['id",{"_index":513,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["user_id",{"_index":610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":512,"title":{},"body":{"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["userinformations",{"_index":258,"title":{"interfaces/UserInformations.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userjson",{"_index":636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["username",{"_index":266,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils",{"_index":448,"title":{"classes/Utils.html":{}},"body":{"classes/Token.html":{},"classes/Utils.html":{},"coverage.html":{}}}],["utils/utils",{"_index":449,"title":{},"body":{"classes/Token.html":{}}}],["valid",{"_index":335,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["value",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["values",{"_index":597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":522,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":582,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["wasfound",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["weather",{"_index":46,"title":{},"body":{"classes/About.html":{},"classes/Temperature.html":{}}}],["whererow",{"_index":621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wherevalue",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["widget",{"_index":474,"title":{"classes/Widget.html":{}},"body":{"classes/Widget.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["widgetid",{"_index":613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["widgets",{"_index":20,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["widgetsdb",{"_index":496,"title":{"classes/WidgetsDB.html":{}},"body":{"classes/WidgetsDB.html":{},"coverage.html":{}}}],["winrate",{"_index":275,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["wins",{"_index":272,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/About.html":{"url":"classes/About.html","title":"class - About","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  About\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/about/about.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/about/about.ts:12\n                \n            \n\n\n            \n                \n                    retrieve general informations and a list of services and their widgets awailable in the dashboard\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport moment from \"moment\";\n\nclass About {\n\n  /**\n   * retrieve general informations and a list of services and their widgets awailable in the dashboard \n   * @param {express.Request} req \n   * @param {express.Response} res \n   * @returns \n   */\n  async get(req: express.Request, res: express.Response) {\n    let ip: string = req.ip;\n    ip = ip.split(':')[3];\n\n    return res.status(200).json({\n      \"client\": {\n        \"host\": ip,\n      },\n      \"server\": {\n        \"current_time\": moment().unix(),\n        \"services\": [\n          {\n            \"name\": \"weather\",\n            \"display_name\": \"Weather\",\n            \"api_url\": \"http://api.openweathermap.org\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"widgets\": [\n              {\n                \"name\": \"city_temperature\",\n                \"display_name\": \"City temperature\",\n                \"description\": \"Display temperature for a city\",\n                \"params\": [\n                  {\n                    \"name\": \"city\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },\n              {\n                \"name\": \"city_weather\",\n                \"display_name\": \"City weather\",\n                \"description\": \"Display weather for a city\",\n                \"params\": [\n                  {\n                    \"name\": \"city\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"currency\",\n            \"display_name\": \"Currency Converter\",\n            \"api_url\": \"https://freecurrencyapi.net/\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"widgets\": [\n              {\n                \"name\": \"currency_converter\",\n                \"display_name\": \"Currency Converter\",\n                \"description\": \"Display the exchange rate of a currency\",\n                \"params\": [\n                  {\n                    \"name\": \"from\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"to\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"nasa\",\n            \"display_name\": \"NASA\",\n            \"api_url\": \"https://api.nasa.gov/\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"widgets\": [\n              {\n                \"name\": \"apod\",\n                \"display_name\": \"Astronomy Picture of the Day\",\n                \"description\": \"Display the Astronomy Picture of the Day\",\n                \"params\": [\n                  {\n                    \"name\": \"date\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },\n              {\n                \"name\": \"curiosity_image\",\n                \"display_name\": \"Curiosity Rover Image\",\n                \"description\": \"Display an image from a curiosity\",\n                \"params\": [\n                  {\n                    \"name\": \"date\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"camera\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"intra_epitech\",\n            \"display_name\": \"Intra Epitech\",\n            \"params\": [],\n            \"api_url\": \"https://intra.epitech.eu/admin/autolog\",\n            \"widgets\": [\n              {\n                \"name\": \"intra_epitech_profile\",\n                \"display_name\": \"Profile\",\n                \"description\": \"Display the profile of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_partners\",\n                \"display_name\": \"Partners\",\n                \"description\": \"Display the partners of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_notifications\",\n                \"display_name\": \"Notifications\",\n                \"description\": \"Display the notifications of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_grades\",\n                \"display_name\": \"Grades\",\n                \"description\": \"Display the grades of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"epitech_doors\",\n            \"display_name\": \"Epitech Doors\",\n            \"params\": [\n              {\n                \"name\": \"intra_autologin\",\n                \"type\": \"string\",\n              }\n            ],\n            \"api_url\": \"https://intra.epitech.eu/admin/autolog\",\n            \"widgets\": [\n              {\n                \"name\": \"epitech_doors_open_door\",\n                \"display_name\": \"Open door\",\n                \"description\": \"Open the door in epitech montpellier\",\n                \"params\": [\n                  {\n                    \"name\": \"door_name\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"intra_autologin\",\n                    \"type\": \"string\",\n                  }\n                ],\n              }\n            ]\n          },{\n            \"name\": \"office\",\n            \"display_name\": \"Office 365\",\n            \"params\": [],\n            \"api_url\": \"https://graph.microsoft.com/v1.0/me/\",\n            \"widgets\": [\n              {\n                \"name\": \"office_calendar_events\",\n                \"display_name\": \"Calendar events\",\n                \"description\": \"Display the calendar events of an office user\",\n                \"params\": [\n                  {\n                    \"name\": \"start_date\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"end_date\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"office_token\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"league_of_legends\",\n            \"display_name\": \"League of Legends\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"api_url\": \"\",\n            \"widgets\": [\n              {\n                \"name\": \"league_of_legends_summoner_profile\",\n                \"display_name\": \"Summoner profile\",\n                \"description\": \"Display the summoner profile of a league of legends user\",\n                \"params\": [\n                  {\n                    \"name\": \"summoner_name\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"region\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"gmail\",\n            \"display_name\": \"Gmail\",\n            \"params\": [\n              {\n                \"name\": \"google_api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"api_url\": \"google\",\n            \"widgets\": [\n              {\n                \"name\": \"gmail_inbox\",\n                \"display_name\": \"Inbox\",\n                \"description\": \"Display the inbox of a gmail user\",\n                \"params\": [\n                  {\n                    \"name\": \"max_results\",\n                    \"type\": \"number\",\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    });\n  }\n};\n\nmodule.exports = new About();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Authentication.html":{"url":"classes/Authentication.html","title":"class - Authentication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Authentication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/OAuth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/OAuth.ts:12\n                \n            \n\n\n            \n                \n                    login / register a OAuth user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport { handleOAuthUsers } from './authActions';\n\nclass Authentication {\n    \n    /**\n     * login / register a OAuth user\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async post(req: express.Request, res: express.Response) {\n        return handleOAuthUsers(req, res);\n    }\n}\n\nmodule.exports = new Authentication();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Currency.html":{"url":"classes/Currency.html","title":"class - Currency","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Currency\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/currency.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getExchangeRate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getExchangeRate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getExchangeRate(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/currency.ts:12\n                \n            \n\n\n            \n                \n                    retrieve the current exchange rate for a given currency\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Currency {\n\n    /**\n     * retrieve the current exchange rate for a given currency\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getExchangeRate(req: express.Request, res: express.Response) {\n        try {\n            const { from, to, api_key } = req.body;\n            console.log(from, to);\n            const url: string = `https://freecurrencyapi.net/api/v2/latest?base_currency=${from}&apikey=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            let currency: number = response.data.data[to];\n            console.log('currency == ', currency);\n            return res.status(200).json({\n                \"base_currency\": from,\n                \"target_currency\": to,\n                \"rate\": currency\n            });\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Currency();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EpitechDoors.html":{"url":"classes/EpitechDoors.html","title":"class - EpitechDoors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EpitechDoors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/epitechDoors.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                openDoor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        openDoor\n                        \n                    \n                \n            \n            \n                \n                    \n                    openDoor(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/epitechDoors.ts:12\n                \n            \n\n\n            \n                \n                    opens the given door of the Epitech campus\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass EpitechDoors {\n\n    /**\n     * opens the given door of the Epitech campus\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async openDoor(req: express.Request, res: express.Response) {\n        try {\n            const { intra_autologin, door_name } = req.body;\n            let autoLogin: string = intra_autologin;\n            let url: string = \"\";\n\n            if (autoLogin.startsWith(\"https://intra.epitech.eu/\") == false) {\n                autoLogin = `https://intra.epitech.eu/${intra_autologin}`;\n            }\n            console.log('autologin == ', autoLogin);\n            url = `https://epi-logue.eu/api/doors_open?login=${autoLogin}&door_name=${door_name}`;\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(response.status).json(response.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n};\n\nexport default new EpitechDoors();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Gmail.html":{"url":"classes/Gmail.html","title":"class - Gmail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Gmail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/gmail.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getLastFiveMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getLastFiveMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLastFiveMail(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/gmail.ts:12\n                \n            \n\n\n            \n                \n                    retrieves the last max_results emails from the user's inbox\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Gmail {\n\n    /**\n     * retrieves the last max_results emails from the user's inbox\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getLastFiveMail(req: express.Request, res: express.Response) {\n        try {\n            const { google_api_key, max_results } = req.body;\n            let mail: string = \"\";\n\n            let response: AxiosResponse =  await axios({\n                method: 'GET',\n                url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                headers: {\n                    'Authorization': `Bearer ${google_api_key}`\n                },\n            });\n            mail = response.data.email;\n            const url = `https://gmail.googleapis.com/gmail/v1/users/${mail}/messages?maxResults=${max_results}`;\n            let response2: AxiosResponse = await axios({\n                method: 'GET',\n                url: url,\n                headers: {\n                    'Authorization': `Bearer ${google_api_key}`\n                },\n            });\n            let messageIds: Array = [];\n            response2.data.messages.forEach((message: any) => {\n                messageIds.push(message.id);\n            });\n            let messages: Array = [];\n            for (let i = 0; i  header.name === 'Subject').value,\n                    date: response3.data.payload.headers.find((header: any) => header.name === 'Date').value,\n                    from: response3.data.payload.headers.find((header: any) => header.name === 'From').value,\n                    to: response3.data.payload.headers.find((header: any) => header.name === 'To').value,\n                };\n                messages.push(msg);\n            }\n            return res.status(200).json({\n                success: true,\n                messages: messages\n            });\n\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                message: 'Internal Server Error'\n            });\n        }\n    }\n}\n\nexport default new Gmail();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IntraEpitech.html":{"url":"classes/IntraEpitech.html","title":"class - IntraEpitech","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IntraEpitech\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/intraEpitech.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getGrades\n                            \n                            \n                                    Async\n                                getNotifications\n                            \n                            \n                                    Async\n                                getPartners\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getGrades\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGrades(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:131\n                \n            \n\n\n            \n                \n                    retrieves the user's grades\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNotifications(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:94\n                \n            \n\n\n            \n                \n                    retrieves user's notifications\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPartners\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPartners(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:56\n                \n            \n\n\n            \n                \n                    retrieves the user's partners (the people with whom the user did a project with)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:13\n                \n            \n\n\n            \n                \n                    retrieves the user's profile informations (gpa, credits, profile picture ...)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\nimport { IntraEpitechUser } from '../../database/interfaces';\n\nclass IntraEpitech {\n\n    /**\n     * retrieves the user's profile informations (gpa, credits, profile picture ...)\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getProfile(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n            url = `https://intra.epitech.eu/${autoLogin}/user?format=json`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            const user: IntraEpitechUser = {\n                login: response.data['login'],\n                firstname: response.data['firstname'],\n                lastname: response.data['lastname'],\n                profilePicture: response.data['picture'],\n                promo: response.data['promo'],\n                location: response.data['groups'][0]['name'],\n                semesterCode: response.data['semester_code'],\n                credits: response.data['credits'],\n                gpa: response.data['gpa'][0]['gpa'],\n            };\n            return res.status(200).json(user);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    /**\n     * retrieves the user's partners (the people with whom the user did a project with)\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getPartners(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n    \n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n    \n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: `https://intra.epitech.eu/${autoLogin}/user?format=json`\n            });\n            const login: string = response.data['login'];\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/binome/?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response2.data['binomes']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n\n    /**\n     * retrieves user's notifications\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getNotifications(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;            \n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: `https://intra.epitech.eu/${autoLogin}/user?format=json`\n            });\n            const login: string = response.data['login'];\n\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/notification/message?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(200).json(response2.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    /**\n     * retrieves the user's grades\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getGrades(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                autoLogin = autoLogin.substring(25);\n            }\n            url = `https://intra.epitech.eu/${autoLogin}/user?format=json`;\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            const login: string = response.data['login'];\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/notes?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(200).json(response2.data['modules']);            \n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new IntraEpitech();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IntraEpitechUser.html":{"url":"interfaces/IntraEpitechUser.html","title":"interface - IntraEpitechUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IntraEpitechUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            credits\n                                        \n                                \n                                \n                                        \n                                            firstname\n                                        \n                                \n                                \n                                        \n                                            gpa\n                                        \n                                \n                                \n                                        \n                                            lastname\n                                        \n                                \n                                \n                                        \n                                            location\n                                        \n                                \n                                \n                                        \n                                            login\n                                        \n                                \n                                \n                                        \n                                            profilePicture\n                                        \n                                \n                                \n                                        \n                                            promo\n                                        \n                                \n                                \n                                        \n                                            semesterCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        credits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        credits:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gpa\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gpa:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        location:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profilePicture\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profilePicture:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        promo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        promo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        semesterCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        semesterCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeagueOfLegends.html":{"url":"classes/LeagueOfLegends.html","title":"class - LeagueOfLegends","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeagueOfLegends\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/leagueoflegends.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/leagueoflegends.ts:13\n                \n            \n\n\n            \n                \n                    retrieves the summoner profile informations (user's icon, level, name, ranked game's rank ...)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import axios, { AxiosResponse } from 'axios';\nimport express from 'express';\nimport { LeagueOfLegendsProfileData, LeagueOfLegendsGameData } from '../../database/interfaces';\n\nclass LeagueOfLegends {\n\n    /**\n     * retrieves the summoner profile informations (user's icon, level, name, ranked game's rank ...)\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getUserProfile(req: express.Request, res: express.Response) {\n        try {\n            const { api_key, summoner_name, region } = req.body;\n            let summoner_id: string = '';\n            let profileIconURL: string = '';\n            let summonerLevel: number = 0;\n            let summonerName: string = '';\n            let gameData: Array = [];\n            \n            const firstURL = `https://${region}.api.riotgames.com/lol/summoner/v4/summoners/by-name/${summoner_name}?api_key=${api_key}`;\n            \n            console.debug(\"firstURL: \", firstURL);\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: firstURL,\n            });\n            if (response.status === 200) {\n                summoner_id = response.data['id'];\n                profileIconURL = `https://ddragon.leagueoflegends.com/cdn/11.23.1/img/profileicon/${response.data['profileIconId']}.png`;\n                summonerLevel = response.data['summonerLevel'];\n                summonerName = response.data['name'];\n            }\n            const secondURL = `https://${region}.api.riotgames.com/lol/league/v4/entries/by-summoner/${summoner_id}?api_key=${api_key}`;\n            console.debug(\"secondURL: \", secondURL);\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: secondURL,\n            });\n            if (response2.status == 200) {\n                if (response2.data.length > 0) {\n                    gameData = response2.data.map((data: any) => {\n                        return {\n                            queueType: data.queueType,\n                            tier: data.tier,\n                            rank: data.rank,\n                            wins: data.wins,\n                            losses: data.losses,\n                            leaguePoints: data.leaguePoints,\n                            winRate: data.wins / (data.wins + data.losses),\n                        };\n                    });\n                    if (gameData.length == 1 && gameData[0].queueType == 'RANKED_SOLO_5x5') {\n                        gameData[1] = {\n                            queueType: 'RANKED_FLEX_SR',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        };\n                    }\n                    else if (gameData.length == 1 && gameData[0].queueType == 'RANKED_FLEX_SR') {\n                        gameData[1] = {\n                            queueType: 'RANKED_SOLO_5x5',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        };\n                    }\n                }\n                else {\n                    gameData = [\n                        {\n                            queueType: 'RANKED_FLEX_SR',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        },\n                        {\n                            queueType: 'RANKED_SOLO_5x5',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        },\n                    ];\n                }\n                console.debug(\"setting profile\");\n                let profile: LeagueOfLegendsProfileData = {\n                    summonerName,\n                    summonerLevel,\n                    profileIconURL,\n                    gameData,\n                };\n                console.debug(\"profile: \", profile);\n                return res.status(200).json(profile);\n            }\n            else {\n                return res.status(response2.status).json({\n                    error: 'Error getting user profile',\n                });\n            }\n        } catch (error) {\n            console.log(error);\n            res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new LeagueOfLegends();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LeagueOfLegendsGameData.html":{"url":"interfaces/LeagueOfLegendsGameData.html","title":"interface - LeagueOfLegendsGameData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LeagueOfLegendsGameData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            leaguePoints\n                                        \n                                \n                                \n                                        \n                                            losses\n                                        \n                                \n                                \n                                        \n                                            queueType\n                                        \n                                \n                                \n                                        \n                                            rank\n                                        \n                                \n                                \n                                        \n                                            tier\n                                        \n                                \n                                \n                                        \n                                            winRate\n                                        \n                                \n                                \n                                        \n                                            wins\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        leaguePoints\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leaguePoints:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        losses\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        losses:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queueType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queueType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rank\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rank:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tier\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tier:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        winRate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        winRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wins\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        wins:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LeagueOfLegendsProfileData.html":{"url":"interfaces/LeagueOfLegendsProfileData.html","title":"interface - LeagueOfLegendsProfileData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LeagueOfLegendsProfileData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            gameData\n                                        \n                                \n                                \n                                        \n                                            profileIconURL\n                                        \n                                \n                                \n                                        \n                                            summonerLevel\n                                        \n                                \n                                \n                                        \n                                            summonerName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        gameData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gameData:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileIconURL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profileIconURL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        summonerLevel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        summonerLevel:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        summonerName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        summonerName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Login.html":{"url":"classes/Login.html","title":"class - Login","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Login\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/login.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/login.ts:14\n                \n            \n\n\n            \n                \n                    login a basic user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport { getUsers, updateInfos } from \"../../database/databaseActions\";\nimport { UserInformations } from \"../../database/interfaces\";\nimport jwt from 'jsonwebtoken';\nimport moment from \"moment\";\n\nclass Login {\n    /**\n     * login a basic user\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async post(req: express.Request, res: express.Response) {\n        const { mail, password } = req.body;\n\n        if (!mail || !password) {\n            return res.status(400).json({\n                valid: false,\n                message: \"mail and password are required\"\n            });\n        }\n\n        const user: UserInformations = {\n            mail: mail,\n            google_mail: undefined,\n            google_token: undefined,\n            facebook_mail: undefined,\n            facebook_token: undefined,\n            apple_mail: undefined,\n            apple_token: undefined,\n            office_mail: undefined,\n            office_token: undefined,\n            username: undefined,\n            password: password\n        };\n\n        const expiresIn: number = Number(process.env.EXPIRE_TIME) || 60 * 60;\n        const payload = {\n            mail: mail\n        };\n        const newToken: string = jwt.sign(\n            payload,\n            process.env.JWT_SECRET,\n            { expiresIn: expiresIn }\n        );\n\n        await getUsers(user, async (err: any, result: any) => {\n            if (err) {\n                return res.status(500).json({\n                    valid: false,\n                    message: err\n                });\n            } else {\n                let _result = result;\n                if (result.length === 0) {\n                    return res.status(400).json({\n                        valid: false,\n                        message: \"mail or password is incorrect\"\n                    });\n                } else {\n                    _result['token'] = newToken;\n                    _result['token_created_at'] = moment().format('YYYY-MM-DD HH:mm:ss');\n                    await updateInfos(['token', 'token_created_at'], [newToken, moment().format('YYYY-MM-DD HH:mm:ss')], 'mail', mail, (err: any, result: any) => {\n                        if (err) {\n                            return res.status(500).json({\n                                valid: false,\n                                message: err\n                            });\n                        } else {\n                            return res.status(200).json({ error: false, message: \"user logged in\", token: newToken, expiresIn: expiresIn, result: _result });\n                        }\n                    });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Login();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Nasa.html":{"url":"classes/Nasa.html","title":"class - Nasa","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Nasa\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/nasa.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getNasaDayImage\n                            \n                            \n                                    Async\n                                getNasaRoverImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNasaDayImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNasaDayImage(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/nasa.ts:11\n                \n            \n\n\n            \n                \n                    retrieves the image of the day from the nasa API\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        express request\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        express response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNasaRoverImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNasaRoverImage(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/nasa.ts:34\n                \n            \n\n\n            \n                \n                    retrieves the curiosity rover image of the day from the nasa API\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        express request\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        express response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport axios, { AxiosResponse } from \"axios\";\n\nclass Nasa {\n    /**\n     * retrieves the image of the day from the nasa API\n     * @param req express request\n     * @param res express response\n     * @returns\n     */\n    async getNasaDayImage(req: express.Request, res: express.Response) {\n        try {\n            const { date, api_key } = req.body;\n            const url = `https://api.nasa.gov/planetary/apod?api_key=${api_key}&date=${date}`;\n\n            let response: AxiosResponse = await axios({\n                method: \"get\",\n                url: url\n            });\n            return res.status(200).json(response.data);\n        } catch (error) {\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    /**\n     * retrieves the curiosity rover image of the day from the nasa API\n     * @param req express request\n     * @param res express response\n     * @returns \n     */\n    async getNasaRoverImage(req: express.Request, res: express.Response) {\n        try {\n            const { date, camera, api_key } = req.body;\n            const url = `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=${date}&camera=${camera}&api_key=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: \"get\",\n                url: url\n            });\n            let data = response.data.photos;\n            let photo: any = data[0] ? data[0] : {};\n\n            return res.status(200).json(photo);\n        } catch (error) {\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Nasa();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Office.html":{"url":"classes/Office.html","title":"class - Office","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Office\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/office.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCalendarEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCalendarEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCalendarEvents(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/office.ts:12\n                \n            \n\n\n            \n                \n                    retrieves the office calendar events from start to end date from the office api\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Office {\n\n    /**\n     * retrieves the office calendar events from start to end date from the office api\n     * @param {express.Request} req\n     * @param {express.Response} res \n     * @returns \n     */\n    async getCalendarEvents(req: express.Request, res: express.Response) {\n        try {\n            const { start_date, office_token, end_date } = req.body;\n            \n            const url = `https://graph.microsoft.com/v1.0/me/calendarview?startdatetime=${start_date}&enddatetime=${end_date}`;\n    \n            let response: AxiosResponse = await axios({\n                method: 'GET',\n                url,\n                headers: {\n                    'Authorization': `Bearer ${office_token}`\n                }\n            });\n            return res.status(200).json(response.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Office();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/profile/profile.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/profile/profile.ts:13\n                \n            \n\n\n            \n                \n                    retrieves the user informations\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport { getRow, getUsers } from '../../database/databaseActions';\n\nclass Profile {\n\n    /**\n     * retrieves the user informations\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async get(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n        await getRow('token', token, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                return res.status(500).json({ error: false, message: \"internal server error\" });\n            } else {\n                if (result.length === 0) {\n                    return res.status(404).json({ error: false, message: \"user not found\" });\n                } else {\n                    console.log(\"result == \", result);\n                    console.log(\"result[0] == \", result[0]);\n                    let rslt = result[0];\n                    let user = {\n                        mail: rslt['mail'],\n                        google_mail: rslt['google_mail'],\n                        facebook_mail: rslt['facebook_mail'],\n                        outlook_mail: rslt['outlook_mail'],\n                        apple_mail: rslt['apple_mail'],\n                        office_mail: rslt['office_mail'],\n                    };\n\n                    return res.status(200).json({ error: true, message: \"user found\", result: user });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Profile();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileUpdate.html":{"url":"classes/ProfileUpdate.html","title":"class - ProfileUpdate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileUpdate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/profile/profileUpdate.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/profile/profileUpdate.ts:13\n                \n            \n\n\n            \n                \n                    update a user informations if the given token is valid\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { updateUserInformations } from \"./profileActions\";\n\nclass ProfileUpdate {\n\n    /**\n     * update a user informations if the given token is valid\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async patch(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n        await updateUserInformations(req, res);\n    }\n}\n\nmodule.exports = new ProfileUpdate();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Register.html":{"url":"classes/Register.html","title":"class - Register","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Register\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/register.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/register.ts:13\n                \n            \n\n\n            \n                \n                    register a basic user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\"\nimport { UserInformations } from \"../../database/interfaces\";\nimport { registerBasicUser } from \"./registerActions\";\n\nclass Register {\n\n    /**\n     * register a basic user\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async post(req: express.Request, res: express.Response) {\n        const { mail, password } = req.body;\n\n        const infos: UserInformations = {\n            mail: mail,\n            google_mail: undefined,\n            google_token: undefined,\n            facebook_mail: undefined,\n            facebook_token: undefined,\n            apple_mail: undefined,\n            apple_token: undefined,\n            office_mail: undefined,\n            office_token: undefined,\n            username: undefined,\n            password: password,\n        };\n        let result = await registerBasicUser(infos);\n\n        if (result.error === true) {\n            return res.status(500).json({\n                error: true,\n                message: result.message,\n            });\n        }\n        if (result.error === false && result.message === \"user already exists\") {\n            return res.status(403).json({ error: true, message: result.message });\n        }\n        return res.status(200).json({ error: false, message: result.message, result: result.result });\n    }\n}\n\nmodule.exports = new Register();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Temperature.html":{"url":"classes/Temperature.html","title":"class - Temperature","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Temperature\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/temperature.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTemperature\n                            \n                            \n                                    Async\n                                getWeather\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTemperature\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTemperature(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/temperature.ts:12\n                \n            \n\n\n            \n                \n                    retrieves the temperature of a city\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getWeather\n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeather(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/temperature.ts:36\n                \n            \n\n\n            \n                \n                    retrieves the weather of a city\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Temperature {\n\n    /**\n     * retrieves the temperature of a city\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getTemperature(req: express.Request, res: express.Response) {\n        try {\n            const { city, api_key } = req.body;\n            const url: string = `http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response.data['main']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    /**\n     * retrieves the weather of a city\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getWeather(req: express.Request, res: express.Response) {\n        try {\n            const { city, api_key } = req.body;\n            const url: string = `http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response.data['weather']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n};\n\nexport default new Temperature();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Token.html":{"url":"classes/Token.html","title":"class - Token","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Token\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/token.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/token.ts:16\n                \n            \n\n\n            \n                \n                    check if the given token is valid\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/token.ts:52\n                \n            \n\n\n            \n                \n                    generate a new token if the given one is valid\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport moment from 'moment';\nimport { updateInfos } from '../../database/databaseActions';\nimport Utils from '../../utils/utils';\nimport { checkToken } from './tokenAction';\n\nclass Token {\n\n    /**\n     * check if the given token is valid\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async get(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n        checkToken(token, (err: any, result: any) => {\n            if (err || result === [] || result === null || result === undefined || result.length === 0) {\n                return res.status(401).json({ valid: false, message: \"token invalid or not found\" });\n            } else {\n                let createdAt: moment.Moment = moment(result[0].token_created_at);\n                let now: moment.Moment = moment();\n                let diff: number = now.diff(createdAt, 'seconds');\n                if (diff  {\n            if (err) {\n                return res.status(500).json({ valid: false, message: \"internal server error\" });\n            } else {\n                if (result.affectedRows === 0) {\n                    return res.status(401).json({ valid: false, message: \"token invalid or not found\" });\n                } else {\n                    return res.status(200).json({ valid: true, message: \"token valid\", expiresIn: expiresIn, token: newToken, result: result.result });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Token();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserInformations.html":{"url":"interfaces/UserInformations.html","title":"interface - UserInformations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserInformations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apple_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            apple_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            facebook_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            facebook_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            google_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            google_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            office_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            office_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apple_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apple_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        apple_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apple_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        facebook_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        facebook_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        google_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        google_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        office_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        office_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        office_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        office_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Utils.html":{"url":"classes/Utils.html","title":"class - Utils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Utils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/utils.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRandomString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRandomString\n                        \n                    \n                \n            \n            \n                \ngetRandomString(length: number)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/utils.ts:7\n                \n            \n\n\n            \n                \n                    generate a random string with a length equal to the given length argument\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the length of the generated string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        a random string of length {length}\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        class Utils {\n    /**\n     * generate a random string with a length equal to the given length argument\n     * @param {number} length the length of the generated string \n     * @returns {string} a random string of length {length}\n     */\n    getRandomString(length: number): string {\n        let text: string = \"\";\n        let possible: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!$&#@.\";\n        for (let i: number = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Widget.html":{"url":"classes/Widget.html","title":"class - Widget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Widget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/widget.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widget.ts:20\n                \n            \n\n\n            \n                \n                    handle widgets requests\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport Currency from './currency';\nimport Nasa from './nasa';\nimport Temperature from './temperature';\nimport IntraEpitech from './intraEpitech';\nimport Office from './office';\nimport leagueoflegends from './leagueoflegends';\nimport EpitechDoors from './epitechDoors';\nimport Gmail from './gmail';\n\nclass Widget {\n\n    /**\n     * handle widgets requests\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async post(req: express.Request, res: express.Response) {\n        let valid: boolean = true;\n        const type: string = req.params.type;\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n\n        switch (type) {\n            case 'currency_converter':\n                return await Currency.getExchangeRate(req, res);\n            case 'city_temperature':\n                return await Temperature.getTemperature(req, res);\n            case 'city_weather':\n                return await Temperature.getWeather(req, res);\n            case 'apod':\n                return await Nasa.getNasaDayImage(req, res);\n            case 'curiosity_image':\n                return await Nasa.getNasaRoverImage(req, res);\n            case 'intra_epitech_profile':\n                return await IntraEpitech.getProfile(req, res);\n            case 'intra_epitech_partners':\n                return await IntraEpitech.getPartners(req, res);\n            case 'intra_epitech_notifications':\n                return await IntraEpitech.getNotifications(req, res);\n            case 'epitech_doors_open_door':\n                return await EpitechDoors.openDoor(req, res);\n            case 'intra_epitech_grades':\n                return await IntraEpitech.getGrades(req, res);\n            case 'office_calendar_events':\n                return await Office.getCalendarEvents(req, res);\n            case 'league_of_legends_summoner_profile':\n                return await leagueoflegends.getUserProfile(req, res);\n            case 'gmail_inbox':\n                return await Gmail.getLastFiveMail(req, res);\n            default:\n                return res.status(404).json({ error: true, message: \"widget not found\" });\n        }\n    }\n}\n\nmodule.exports = new Widget();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WidgetsDB.html":{"url":"classes/WidgetsDB.html","title":"class - WidgetsDB","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WidgetsDB\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/widgetsdb.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widgetsdb.ts:13\n                \n            \n\n\n            \n                \n                    retrieves the user's widgets from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widgetsdb.ts:79\n                \n            \n\n\n            \n                \n                    Update the user's widgets in database if it existed before, otherwise create a new one\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport { getWidgetsByUserId, getUserByToken, addWidget, updateWidget } from '../../database/databaseActions';\nimport jwt from 'jsonwebtoken';\n\nclass WidgetsDB {\n\n    /**\n     * retrieves the user's widgets from the database\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async get(req: express.Request, res: express.Response) {\n        try {\n            let token: string = req.headers.authorization;\n\n            if (!token) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token not found\"\n                });\n            }\n            token = token.split(\" \")[1];\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n\n            if (!decoded) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token invalid\"\n                });\n            }\n            await getUserByToken(token, async(err: any, user: any) => {\n                if (err) {\n                    console.debug(err);\n                    return res.status(500).json({\n                        valid: false,\n                        message: \"error\"\n                    });\n                } else {\n                    if (user.length === 0) {\n                        return res.status(404).json({\n                            valid: false,\n                            message: \"user not found\"\n                        });\n                    } else {\n                        let userId = user[0]['id'];\n                        await getWidgetsByUserId(userId, (err: any, result: any) => {\n                            if (err) {\n                                console.debug(err);\n                                return res.status(500).json({\n                                    valid: false,\n                                    message: \"error\"\n                                });\n                            }\n                            return res.status(200).json({\n                                valid: true,\n                                message: \"success\",\n                                data: result\n                            });\n                        });\n                    }\n                }\n            });\n        } catch (error) {\n            console.log(error);\n            return res.status(401).json({\n                valid: false,\n                message: \"token invalid\"\n            });\n        }\n    }\n\n    /**\n     * Update the user's widgets in database if it existed before, otherwise create a new one\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async patch(req: express.Request, res: express.Response) {\n        try {\n            let token: string = req.headers.authorization;\n            const { widgets } = req.body;            \n\n            if (!token) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token not found\"\n                });\n            }\n            token = token.split(\" \")[1];\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n\n            if (!decoded) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token invalid\"\n                });\n            }\n            await getUserByToken(token, async(err: any, user: any) => {\n                if (err) {\n                    console.debug(err);\n                    return res.status(500).json({\n                        valid: false,\n                        message: \"error\"\n                    });\n                } else {\n                    if (user.length === 0) {\n                        return res.status(404).json({\n                            valid: false,\n                            message: \"user not found\"\n                        });\n                    } else {\n                        let userId = user[0]['id'];\n                        await getWidgetsByUserId(userId, async(err: any, result: any) => {\n                            if (err) {\n                                console.debug(err);\n                                return res.status(500).json({\n                                    valid: false,\n                                    message: \"error\"\n                                });\n                            }\n                            if (result.length === 0) {\n                                await addWidget(userId, widgets, (err: any, result: any) => {\n                                    if (err) {\n                                        console.debug(err);\n                                        return res.status(500).json({\n                                            valid: false,\n                                            message: \"error\"\n                                        });\n                                    }\n                                    return res.status(200).json({\n                                        valid: true,\n                                        message: \"success\",\n                                        data: result\n                                    });\n                                });\n                            }\n                            else {\n                                await updateWidget(userId, widgets, (err: any, result: any) => {\n                                    if (err) {\n                                        console.debug(err);\n                                        return res.status(500).json({\n                                            valid: false,\n                                            message: \"error\"\n                                        });\n                                    }\n                                    return res.status(200).json({\n                                        valid: true,\n                                        message: \"success\",\n                                        data: result\n                                    });\n                                });\n                            }\n                        });\n                    }\n                }\n            }\n        )}\n        catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                valid: false,\n                message: \"error\"\n            });\n        }\n    }\n};\n\nmodule.exports = new WidgetsDB();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/database/database.ts\n            \n            variable\n            db\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            addUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            addWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            deleteWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getRow\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getUserByToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getWidgetsByUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateInfos\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateUserAuthToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            IntraEpitechUser\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            LeagueOfLegendsGameData\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            LeagueOfLegendsProfileData\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            UserInformations\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            app\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            server\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/request_handler.ts\n            \n            function\n            requestHandler\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/request_handler.ts\n            \n            variable\n            TOKEN_WL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes.ts\n            \n            function\n            addRoute\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/about/about.ts\n            \n            class\n            About\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/auth/OAuth.ts\n            \n            class\n            Authentication\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/auth/authActions.ts\n            \n            variable\n            handleOAuthUsers\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/routes/auth/authActions.ts\n            \n            variable\n            handleOAuthUsersAction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/routes/auth/login.ts\n            \n            class\n            Login\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/auth/register.ts\n            \n            class\n            Register\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/auth/registerActions.ts\n            \n            variable\n            registerBasicUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/routes/auth/token.ts\n            \n            class\n            Token\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/routes/auth/tokenAction.ts\n            \n            variable\n            checkToken\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/routes/profile/profile.ts\n            \n            class\n            Profile\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/profile/profileActions.ts\n            \n            variable\n            updateUserInformations\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/routes/profile/profileUpdate.ts\n            \n            class\n            ProfileUpdate\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/currency.ts\n            \n            class\n            Currency\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/epitechDoors.ts\n            \n            class\n            EpitechDoors\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/gmail.ts\n            \n            class\n            Gmail\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/intraEpitech.ts\n            \n            class\n            IntraEpitech\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/routes/widgets/leagueoflegends.ts\n            \n            class\n            LeagueOfLegends\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/nasa.ts\n            \n            class\n            Nasa\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/routes/widgets/office.ts\n            \n            class\n            Office\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/temperature.ts\n            \n            class\n            Temperature\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/routes/widgets/widget.ts\n            \n            class\n            Widget\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/widgetsdb.ts\n            \n            class\n            WidgetsDB\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/utils/utils.ts\n            \n            class\n            Utils\n            \n                50 %\n                (1/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            cors : ^2.8.5\n        \n            dotenv : ^10.0.0\n        \n            express : ^4.17.1\n        \n            jsonwebtoken : ^8.5.1\n        \n            moment : ^2.29.1\n        \n            mysql2 : ^2.3.3-rc.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addRoute   (src/.../routes.ts)\n                        \n                        \n                            requestHandler   (src/.../request_handler.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addRoute\n                        \n                    \n                \n            \n            \n                \naddRoute(endpoint: string, service: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    service\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/request_handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        requestHandler\n                        \n                    \n                \n            \n            \n                \nrequestHandler(req, res, next)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    18 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addUsers   (src/.../databaseActions.ts)\n                        \n                        \n                            addWidget   (src/.../databaseActions.ts)\n                        \n                        \n                            app   (src/.../index.ts)\n                        \n                        \n                            checkToken   (src/.../tokenAction.ts)\n                        \n                        \n                            db   (src/.../database.ts)\n                        \n                        \n                            deleteWidget   (src/.../databaseActions.ts)\n                        \n                        \n                            getRow   (src/.../databaseActions.ts)\n                        \n                        \n                            getUserByToken   (src/.../databaseActions.ts)\n                        \n                        \n                            getUsers   (src/.../databaseActions.ts)\n                        \n                        \n                            getWidgetsByUserId   (src/.../databaseActions.ts)\n                        \n                        \n                            handleOAuthUsers   (src/.../authActions.ts)\n                        \n                        \n                            handleOAuthUsersAction   (src/.../authActions.ts)\n                        \n                        \n                            registerBasicUser   (src/.../registerActions.ts)\n                        \n                        \n                            routes   (src/.../routes.ts)\n                        \n                        \n                            server   (src/.../index.ts)\n                        \n                        \n                            TOKEN_WL   (src/.../request_handler.ts)\n                        \n                        \n                            updateInfos   (src/.../databaseActions.ts)\n                        \n                        \n                            updateUserAuthToken   (src/.../databaseActions.ts)\n                        \n                        \n                            updateUserInformations   (src/.../profileActions.ts)\n                        \n                        \n                            updateWidget   (src/.../databaseActions.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/databaseActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, callback: Function) => {\n    let query: string = \"INSERT into users (\";\n    let wasFound: boolean = false;\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"mail, password) VALUES ('\"\n                + infos.mail + \"', '\" + infos.password + \"');\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"google_mail, google_token) VALUES ('\"\n                + infos.google_mail + \"', '\" + infos.google_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"facebook_mail, facebook_token) VALUES ('\"\n                + infos.facebook_mail + \"', '\" + infos.facebook_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"apple_mail, apple_token) VALUES ('\"\n                + infos.apple_mail + \"', '\" + infos.apple_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"office_mail, office_token) VALUES ('\"\n                + infos.office_mail + \"', '\" + infos.office_token + \"');\";\n            wasFound = true;\n        }\n\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widget: string, callback: Function) => {\n    let query: string = \"INSERT INTO widgets (user_id, data) VALUES ('\" + userId + \"', '\" + JSON.stringify(widget) + \"');\";\n\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widgetId: string, callback: Function) => {\n    let query: string = \"DELETE FROM widgets WHERE user_id = '\" + userId + \"' AND id = '\" + widgetId + \"';\";\n\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRow\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (row: string, value: string, callback: Function) => {\n    let query: string = \"SELECT * FROM users WHERE \" + row + \" = '\" + value + \"' LIMIT 1;\";\n\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserByToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (token: string, callback: Function) => {\n    let query: string = \"SELECT * FROM users WHERE token = '\" + token + \"';\";\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, callback: Function) => {\n    let wasFound: boolean = false;\n    let query: string = \"SELECT * FROM users WHERE \";\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"mail = '\" + infos.mail + \"' AND password = '\" + infos.password + \"';\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"google_mail = '\" + infos.google_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"facebook_mail = '\" + infos.facebook_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"apple_mail = '\" + infos.apple_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"office_mail = '\" + infos.office_mail + \"';\";\n            wasFound = true;\n        }\n\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getWidgetsByUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, callback: Function) => {\n    let query: string = \"SELECT * FROM widgets WHERE user_id = '\" + userId + \"';\";\n\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateInfos\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n    rows: Array, newValues: Array,\n    whereRow: string, whereValue: string, callback: Function) => {\n    let query: string = 'UPDATE users SET ';\n\n    for (let i = 0; i  {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n            \n                \n                    updates a row in the users table\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserAuthToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, jwtToken: string, callback: Function) => {\n    let query: string = \"UPDATE users SET \";\n    let wasFound: boolean = false;\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE mail = '\" + infos.mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE google_mail = '\" + infos.google_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE facebook_mail = '\" + infos.facebook_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE apple_mail = '\" + infos.apple_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE office_mail = '\" + infos.office_mail + \"';\";\n            wasFound = true;\n        }\n\n        db.query(query, (err: any, result: any) => {\n            if (err || result.affectedRows === 0) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widget: string, callback: Function) => {\n    let query: string = \"UPDATE widgets SET data = '\" + widget + \"' WHERE user_id = '\" + userId + \"';\";\n\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n\n    src/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        app\n                        \n                    \n                \n            \n                \n                    \n                        Default value : express()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"http\").Server(app)\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/tokenAction.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        checkToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (token: string, callback: Function) => {\n    const queryString: string = \"SELECT * FROM users WHERE token = '\" + token + \"' LIMIT 1;\";\n    db.query(queryString, (err: any, result: any) => {\n        if (err) {\n            callback(err);\n        } else {\n            callback(null, result);\n        }\n    });\n}\n                    \n                \n\n            \n                \n                    check if the given token correspond to a user's token\n\n                \n            \n\n        \n    \n\n    src/database/database.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mysql.createConnection({\n    host: process.env.MY_SQL_HOST,\n    user: process.env.MY_SQL_USER,\n    password: process.env.MY_SQL_PASSWORD,\n    database: process.env.MY_SQL_DATABASE,\n})\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/authActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleOAuthUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (req: express.Request, res: express.Response) => {\n    try {\n        const type: string = req.params.type;\n        const { access_token } = req.body;\n        let user: { type: string, userJson: any } = { type: '', userJson: {} };\n        let response: AxiosResponse;\n\n        switch (type) {\n            case 'google_user':\n                console.log('bearer token == ', access_token);\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.debug(\"response == \", response.data);\n                let googleUser = response.data;\n                user = { type: 'google_user', userJson: googleUser };\n                break;\n            case 'facebook_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.facebook.com/me/?fields=id,name,email',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let facebookUser = response.data;\n                user = { type: 'facebook_user', userJson: facebookUser };\n                break;\n            case 'office_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.microsoft.com/v1.0/me',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.log(\"response == \", response.data);\n                let officeUser = response.data;\n                user = { type: 'office_user', userJson: officeUser };\n                break;\n            default:\n                return res.status(400).json({ message: 'Bad request' });\n        }\n\n        const infos: UserInformations = {\n            mail: undefined,\n            google_mail: (user.type === 'google_user') ? user.userJson.email : undefined,\n            google_token: (user.type === 'google_user') ? access_token : undefined,\n            facebook_mail: (user.type === 'facebook_user') ? user.userJson.email : undefined,\n            facebook_token: (user.type === 'facebook_user') ? access_token : undefined,\n            apple_mail: (user.type === 'apple_user') ? user.userJson.email : undefined,\n            apple_token: (user.type === 'apple_user') ? access_token : undefined,\n            office_mail: (user.type === 'office_user') ? user.userJson.mail : undefined,\n            office_token: (user.type === 'office_user') ? access_token : undefined,\n            username: undefined,\n            password: undefined,\n        };\n\n        const result = await handleOAuthUsersAction(infos);\n        if (result.error === true) {\n            return res.status(500).json({\n                error: result.error,\n                message: result.message,\n            });\n        }\n        if (result.message === \"user created\") {\n            return res.status(200).json({ error: false, message: \"user created\", result: result.result });\n        }\n        if (result.message === \"user already exists\") {\n            const expiresIn: number = Number(process.env.EXPIRE_TIME) || 60 * 60;\n            const payload = {\n                mail: (user.type === 'google_user') ? user.userJson.email : (user.type === 'facebook_user') ? user.userJson.email : (user.type === 'apple_user') ? user.userJson.email : (user.type === 'office_user') ? user.userJson.email : \"none\",\n            };\n            const token: string = jwt.sign(\n                payload,\n                process.env.JWT_SECRET,\n                { expiresIn: expiresIn }\n            );\n            await updateUserAuthToken(infos, token, (err: any, result: any) => {\n                if (err) {\n                    console.debug('[handleOAuthUsersAction] | error[updateUserAuthToken] = ', err);\n                } else {\n                    console.debug('[handleOAuthUsersAction] | result[updateUserAuthToken] = ', result);\n                }\n            });\n            return res.status(200).json({ error: false, message: \"user logged in\", expiresIn: expiresIn, token: token, result: result.result });\n        }\n    } catch (err) {\n        console.debug('[handleOAuthUsersAction] | error = ', err);\n        return res.status(500).json({ error: true, message: \"server error\" });\n    }\n}\n                    \n                \n\n            \n                \n                    handle the login or the registration of a OAuth's user (a user logged on signed in with a google/facebook/office account)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleOAuthUsersAction\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations): Promise => {\n    return new Promise(async (resolve, reject) => {\n        await getUsers(infos, async (err: any, result: any) => {\n            if (err) {\n                console.debug('[handleOAuthUsersAction] | error[getUsers] = ', err);\n                await addUsers(infos, (err: any, result: any) => {\n                    if (err) {\n                        console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                        return resolve({ error: true, message: \"internal error\" });\n                    } else {\n                        console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                        return resolve({ error: false, message: \"user created\", result: result });\n                    }\n                });\n            } else {\n                console.debug('[handleOAuthUsersAction] | result[getUsers] = ', result);\n                if (result.length === 0) {\n                    await addUsers(infos, (err: any, result: any) => {\n                        if (err) {\n                            console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                            return resolve({ error: true, message: \"internal error\" });\n                        } else {\n                            console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                            return resolve({ error: false, message: \"user created\", result: result });\n                        }\n                    });\n                } else {\n                    return resolve({ error: false, message: \"user already exists\", result: result });\n                }\n            }\n        });\n    });\n}\n                    \n                \n\n            \n                \n                    save or get user from / in database\n\n                \n            \n\n        \n    \n\n    src/routes/auth/registerActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        registerBasicUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations): Promise => {\n    return new Promise(async (resolve, reject) => {\n        await getUsers(infos, async (err: any, result: any) => {\n            if (err) {\n                console.debug('[handleOAuthUsersAction] | error[getUsers] = ', err);\n                await addUsers(infos, (err: any, result: any) => {\n                    if (err) {\n                        console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                        return resolve({ error: true, message: \"internal error\" });\n                    } else {\n                        console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                        return resolve({ error: false, message: \"user created\", result: result });\n                    }\n                });\n            } else {\n                console.debug('[handleOAuthUsersAction] | result[getUsers] = ', result);\n                if (result.length === 0) {\n                    await addUsers(infos, (err: any, result: any) => {\n                        if (err) {\n                            console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                            return resolve({ error: true, message: \"internal error\" });\n                        } else {\n                            console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                            return resolve({ error: false, message: \"user created\", result: result });\n                        }\n                    });\n                } else {\n                    return resolve({ error: false, message: \"user already exists\", result: result });\n                }\n            }\n        });\n    });\n}\n                    \n                \n\n            \n                \n                    save a user in the database if it doesn't already exists\n\n                \n            \n\n        \n    \n\n    src/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        routes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n\n\n        \n    \n\n    src/request_handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TOKEN_WL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(register|login)/\n                    \n                \n\n\n        \n    \n\n    src/routes/profile/profileActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        updateUserInformations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (req: express.Request, res: express.Response) => {\n    try {\n        const type: string = req.params.type;\n        const { access_token, existingInformation, existingInformationType } = req.body;\n        let response: AxiosResponse;\n        let user: { type: string, userJson: any } = { type: '', userJson: {} };\n\n        switch (type) {\n            case 'google_user':\n                console.log('bearer token == ', access_token);\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let googleUser = response.data;\n                user = { type: 'google_user', userJson: googleUser };\n                break;\n            case 'facebook_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.facebook.com/me/?fields=id,name,email',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let facebookUser = response.data;\n                user = { type: 'facebook_user', userJson: facebookUser };\n                break;\n            case 'office_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.microsoft.com/v1.0/me',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let officeUser = response.data;\n                user = { type: 'office_user', userJson: officeUser };\n                break;\n            case 'plain_user':\n                let plainUser = {\n                    mail: req.body.mail,\n                    password: req.body.password,\n                };\n                user = { type: 'plain_user', userJson: plainUser };\n                break;\n            default:\n                return res.status(400).json({ message: 'Bad request' });\n        };\n\n        if (user.type === 'google_user') {\n            await updateInfos(['google_mail', 'google_token'], [user.userJson.email, access_token], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n        if (user.type === 'office_user') {\n            await updateInfos(['office_mail', 'office_token'], [user.userJson.email, access_token], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n        if (user.type === 'facebook_user') {\n            await updateInfos(['facebook_mail', 'facebook_token'], [user.userJson.email, access_token], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n        if (user.type === 'plain_user') {\n            await updateInfos(['mail', 'password'], [user.userJson.mail, user.userJson.password], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n    } catch (error) {\n        return res.status(500).json({ message: 'server error' });\n    }\n}\n                    \n                \n\n            \n                \n                    update a user informations\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
