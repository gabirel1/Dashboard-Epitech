var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/About.html",[0,0.259]],["body/classes/About.html",[0,0.14,1,0.272,2,0.174,3,0.174,4,0.144,5,1.678,6,0.088,7,0.469,8,0.569,9,1.945,10,0.569,11,0.502,12,0.569,13,0.308,14,2.027,15,0.272,16,0.038,17,0.834,18,0.261,19,0.237,20,0.272,21,0.308,22,0.346,23,0.527,24,0.414,25,1.945,26,4.194,27,0.605,28,2.027,29,2.027,30,2.027,31,0.346,32,0.84,33,2.027,34,1.678,35,0.576,36,2.027,37,2.027,38,2.027,39,4.194,40,5.895,41,5.104,42,2.027,43,5.895,44,2.354,45,3.644,46,1.678,47,3.939,48,1.736,49,5.568,50,5.501,51,1.678,52,2.354,53,3.093,54,2.027,55,1.678,56,2.027,57,1.678,58,1.736,59,2.027,60,1.678,61,3.093,62,3.093,63,3.093,64,2.559,65,1.678,66,3.093,67,2.027,68,3.093,69,1.678,70,2.027,71,4.516,72,4.95,73,3.093,74,1.678,75,2.354,76,2.051,77,2.995,78,1.678,79,3.093,80,1.678,81,3.093,82,1.678,83,3.093,84,2.027,85,2.027,86,2.559,87,1.678,88,3.093,89,3.093,90,2.027,91,1.678,92,2.105,93,2.027,94,1.678,95,1.678,96,3.093,97,3.093,98,1.678,99,1.678,100,0.764,101,2.027,102,3.093,103,3.093,104,1.678,105,3.093,106,1.678,107,1.678,108,2.105,109,1.678,110,2.027,111,1.678,112,3.093,113,1.678,114,0.633,115,0.764,116,0.308,117,0.018,118,0.018]],["title/classes/Authentication.html",[0,0.207,119,2.145]],["body/classes/Authentication.html",[0,0.294,1,0.57,2,0.365,3,0.365,4,0.302,6,0.185,7,0.782,8,0.84,10,0.84,11,0.771,12,0.84,13,0.646,15,0.57,16,0.037,17,0.57,18,0.185,19,0.499,20,0.57,21,0.646,22,0.726,23,0.878,24,0.69,31,0.726,115,1.604,116,0.646,117,0.03,118,0.03,119,3.953,120,3.523,121,2.891,122,2.891,123,4.257,124,3.039,125,4.257,126,4.257]],["title/classes/Currency.html",[0,0.207,52,1.686]],["body/classes/Currency.html",[0,0.263,1,0.511,2,0.327,3,0.327,4,0.271,6,0.165,7,0.73,8,0.8,10,0.8,11,0.706,12,0.8,13,0.578,15,0.511,16,0.037,17,0.511,18,0.165,19,0.446,20,0.511,21,0.578,22,0.65,23,0.82,24,0.644,27,0.385,31,0.82,32,1.579,35,1.083,44,2.139,52,3.271,57,3.154,114,1.19,116,0.578,117,0.028,118,0.028,127,3.154,128,4.809,129,4.809,130,3.811,131,1.985,132,1.812,133,0.892,134,0.916,135,1.083,136,3.811,137,1.985,138,3.811,139,1.436,140,0.806,141,1.436,142,3.811,143,3.811,144,3.811,145,3.811,146,0.984,147,1.114,148,1.579,149,0.984,150,1.307,151,1.19,152,1.436]],["title/classes/EpitechDoors.html",[0,0.207,153,1.89]],["body/classes/EpitechDoors.html",[0,0.26,1,0.504,2,0.322,3,0.322,4,0.267,6,0.163,7,0.724,8,0.795,10,0.795,11,0.702,12,0.795,13,0.571,15,0.504,16,0.037,17,0.504,18,0.163,19,0.441,20,0.504,21,0.571,22,0.642,23,0.814,24,0.639,27,0.482,31,0.814,35,1.069,77,3.74,86,3.948,91,3.114,116,0.571,117,0.028,118,0.028,131,1.974,132,1.797,133,0.881,134,0.716,135,1.069,137,2.075,139,1.418,140,0.796,141,1.418,146,0.971,147,1.108,148,1.559,149,0.971,150,1.291,151,1.175,152,1.418,153,3.295,154,3.114,155,4.77,156,4.77,157,3.763,158,3.114,159,1.418,160,3.763,161,3.763,162,3.763,163,3.763,164,3.763]],["title/classes/Gmail.html",[0,0.207,108,1.686]],["body/classes/Gmail.html",[0,0.258,1,0.502,2,0.321,3,0.321,4,0.266,6,0.163,7,0.722,8,0.793,10,0.793,11,0.701,12,0.793,13,0.569,15,0.502,16,0.037,17,0.502,18,0.163,19,0.439,20,0.502,21,0.569,22,0.639,23,0.811,24,0.638,27,0.379,108,2.671,109,4.326,113,3.1,117,0.028,118,0.028,131,2.072,132,1.97,133,0.877,134,0.906,135,1.065,137,2.072,139,1.412,140,1.006,141,1.793,165,3.1,166,4.758,167,4.758,168,3.747,169,1.793,170,3.1,171,3.397,172,3.397,173,3.397,174,3.747,175,3.747,176,2.675,177,3.747,178,2.172,179,3.747,180,3.747,181,3.747,182,1.412]],["title/classes/IntraEpitech.html",[0,0.207,183,1.89]],["body/classes/IntraEpitech.html",[0,0.157,1,0.305,2,0.195,3,0.195,4,0.162,6,0.099,7,0.512,8,0.856,10,0.856,11,0.756,12,0.856,13,0.675,15,0.596,16,0.038,17,0.596,18,0.193,19,0.521,20,0.596,21,0.675,22,0.758,23,0.686,24,0.452,27,0.563,31,0.901,35,1.263,76,0.943,77,4.237,116,0.345,117,0.02,118,0.02,131,2.034,132,1.992,133,1.04,134,1.006,135,1.263,137,2.255,139,1.675,140,1.089,141,1.939,146,1.148,147,1.193,148,1.842,149,1.148,150,1.525,151,0.711,152,0.858,158,3.679,176,2.87,183,2.529,184,1.884,185,3.374,186,3.374,187,3.374,188,3.374,189,3.374,190,2.276,191,3.374,192,2.276,193,3.374,194,2.276,195,3.374,196,2.276,197,1.541,198,1.432,199,4.446,200,4.446,201,1.842,202,4.446,203,1.278,204,2.276,205,1.278,206,2.276,207,1.278,208,2.276,209,1.278,210,2.276,211,1.278,212,2.276,213,1.278,214,2.276,215,1.278,216,2.276,217,1.278,218,2.276,219,2.276,220,2.276,221,2.276,222,2.276,223,2.276,224,2.276,225,2.276]],["title/interfaces/IntraEpitechUser.html",[197,1.372,226,1.132]],["body/interfaces/IntraEpitechUser.html",[2,0.296,3,0.296,4,0.245,6,0.15,16,0.037,18,0.258,27,0.643,100,1.302,114,1.883,117,0.027,118,0.027,151,1.666,169,1.302,178,1.578,197,2.062,201,2.211,203,2.995,205,2.995,207,2.995,209,2.995,211,2.995,213,2.995,215,2.995,217,2.995,226,2.01,227,1.94,228,1.94,229,2.841,230,1.302,231,1.432,232,1.578,233,1.432,234,1.578,235,1.432,236,1.578,237,1.432,238,1.578,239,1.578,240,1.578,241,1.94,242,1.94,243,1.94,244,1.94,245,1.94,246,1.94,247,1.94,248,1.578,249,1.94,250,1.94,251,1.94,252,1.94]],["title/classes/LeagueOfLegends.html",[0,0.207,253,1.89]],["body/classes/LeagueOfLegends.html",[0,0.183,1,0.356,2,0.228,3,0.228,4,0.189,6,0.115,7,0.573,8,0.666,10,0.666,11,0.588,12,0.666,13,0.403,15,0.356,16,0.038,17,0.356,18,0.115,19,0.311,20,0.356,21,0.403,22,0.453,23,0.749,24,0.506,27,0.444,31,0.749,35,0.755,44,1.491,75,2.683,76,1.101,106,2.198,107,2.198,114,0.83,116,0.403,117,0.022,118,0.022,131,1.801,132,1.654,133,0.622,134,0.836,135,0.755,137,1.422,139,1.001,140,0.798,141,1.422,146,0.686,147,1.068,148,1.101,149,0.686,150,0.911,151,0.83,152,1.001,176,1.897,178,1.213,182,2.272,198,1.671,240,1.213,241,2.834,242,2.834,243,2.834,244,2.834,245,2.834,246,2.834,247,2.834,248,1.723,249,2.464,250,2.464,251,2.464,252,2.683,253,2.762,254,2.198,255,3.774,256,3.774,257,2.657,258,3.774,259,4.39,260,2.657,261,2.657,262,2.657,263,2.657,264,3.774,265,2.657,266,2.657,267,2.657,268,2.657,269,4.39,270,2.657,271,2.657,272,2.657,273,2.657,274,2.657,275,2.657,276,2.657,277,2.657,278,2.657,279,4.39,280,3.774,281,2.657,282,3.774,283,1.723,284,3.774,285,4.39,286,3.774,287,4.39,288,5.515,289,2.657,290,2.657,291,2.657,292,2.657,293,2.657]],["title/interfaces/LeagueOfLegendsGameData.html",[226,1.132,240,1.372]],["body/interfaces/LeagueOfLegendsGameData.html",[2,0.304,3,0.304,4,0.252,6,0.154,16,0.036,18,0.253,27,0.64,100,1.338,114,1.928,117,0.027,118,0.027,151,1.684,169,1.338,178,1.622,197,1.622,201,1.472,203,1.994,205,1.994,207,1.994,209,1.994,211,1.994,213,1.994,215,1.994,217,1.994,226,2.031,227,1.994,228,1.994,229,2.892,230,1.338,231,1.472,232,1.622,233,1.472,234,1.622,235,1.472,236,1.622,237,1.472,238,1.622,239,1.622,240,2.099,241,3.026,242,3.026,243,3.026,244,3.026,245,3.026,246,3.026,247,3.026,248,1.622,249,1.994,250,1.994,251,1.994,252,1.994]],["title/interfaces/LeagueOfLegendsProfileData.html",[226,1.132,248,1.372]],["body/interfaces/LeagueOfLegendsProfileData.html",[2,0.318,3,0.318,4,0.263,6,0.161,16,0.036,18,0.238,27,0.64,100,1.397,114,1.877,117,0.028,118,0.028,151,1.711,169,1.397,178,2.375,197,1.693,201,1.536,203,2.081,205,2.081,207,2.081,209,2.081,211,2.081,213,2.081,215,2.081,217,2.081,226,2.064,227,2.081,228,2.081,229,2.973,230,1.397,231,1.536,232,1.693,233,1.536,234,1.693,235,1.536,236,1.693,237,1.536,238,1.693,239,1.693,240,1.693,241,2.081,242,2.081,243,2.081,244,2.081,245,2.081,246,2.081,247,2.081,248,2.158,249,3.075,250,3.075,251,3.075,252,3.075]],["title/classes/Login.html",[0,0.207,201,1.245]],["body/classes/Login.html",[0,0.207,1,0.402,2,0.257,3,0.257,4,0.213,6,0.13,7,0.624,8,0.765,10,0.711,11,0.628,12,0.711,13,0.456,15,0.402,16,0.038,17,0.402,18,0.13,19,0.352,20,0.402,21,0.456,22,0.512,23,0.9,24,0.551,25,2.585,27,0.303,31,0.9,32,1.244,76,1.703,100,1.131,114,0.937,115,1.131,116,0.456,117,0.024,118,0.024,121,2.307,122,2.307,134,1.005,135,0.853,140,0.869,147,0.635,149,1.061,159,1.989,169,2.198,182,1.131,198,1.888,201,1.942,230,1.549,231,1.244,232,1.37,233,1.244,234,1.37,235,1.244,236,1.37,237,1.244,238,1.37,239,2.489,294,2.484,295,3.001,296,1.888,297,1.888,298,1.888,299,1.515,300,1.37,301,3.401,302,2.545,303,2.188,304,3.001,305,3.627,306,3.769,307,2.484,308,3.401,309,3.401,310,4.171,311,2.484,312,1.37,313,3.001,314,3.06,315,2.545,316,4.11,317,1.685,318,3.001,319,3.001,320,3.001,321,3.401,322,3.401,323,3.401,324,3.401,325,3.001,326,2.484,327,2.484,328,1.131]],["title/classes/Nasa.html",[0,0.207,58,1.686]],["body/classes/Nasa.html",[0,0.225,1,0.438,2,0.28,3,0.28,4,0.232,6,0.142,7,0.66,8,0.848,10,0.848,11,0.749,12,0.848,13,0.66,15,0.583,16,0.037,17,0.583,18,0.189,19,0.51,20,0.583,21,0.66,22,0.742,23,0.742,24,0.583,27,0.44,31,0.89,35,1.236,44,2.442,58,2.746,64,3.6,69,2.702,116,0.496,117,0.026,118,0.026,131,1.966,132,1.844,133,1.018,134,1.064,135,1.236,137,2.106,139,1.639,140,0.92,141,1.639,146,1.123,147,1.182,148,1.803,149,1.123,150,1.492,151,1.02,152,1.23,329,2.702,330,4.351,331,4.351,332,4.351,333,3.266,334,4.351,335,3.266,336,3.6,337,4.351,338,3.266,339,2.702,340,3.266,341,3.266,342,2.331,343,3.266,344,3.266,345,4.351,346,3.266]],["title/classes/Office.html",[0,0.207,92,1.686]],["body/classes/Office.html",[0,0.267,1,0.52,2,0.332,3,0.332,4,0.275,6,0.168,7,0.738,8,0.806,10,0.806,11,0.712,12,0.806,13,0.588,15,0.52,16,0.037,17,0.52,18,0.168,19,0.454,20,0.52,21,0.588,22,0.661,23,0.829,24,0.651,31,0.829,35,1.102,92,2.981,98,3.209,99,3.209,100,1.832,116,0.588,117,0.029,118,0.029,131,2.001,132,1.832,133,0.907,134,0.926,135,1.102,137,1.832,139,1.461,140,0.82,141,1.461,146,1.001,147,1.123,148,1.607,149,1.001,150,1.33,151,1.211,152,1.461,171,2.768,172,2.768,173,2.768,339,3.209,347,3.209,348,4.862,349,4.862,350,3.877,351,3.877]],["title/classes/Profile.html",[0,0.207,75,1.686]],["body/classes/Profile.html",[0,0.224,1,0.436,2,0.279,3,0.279,4,0.231,6,0.141,7,0.659,8,0.741,9,2.73,10,0.741,11,0.654,12,0.741,13,0.494,15,0.436,16,0.037,17,0.436,18,0.141,19,0.381,20,0.436,21,0.494,22,0.555,23,0.833,24,0.582,27,0.439,31,0.952,32,1.348,35,0.925,75,2.741,76,2.159,115,1.226,116,0.494,117,0.025,118,0.025,133,0.761,134,0.62,140,0.688,146,0.84,147,1.148,149,0.84,150,1.116,159,2.045,169,1.226,182,1.226,231,1.348,233,1.348,235,1.348,237,1.348,283,1.486,296,2.047,298,2.047,299,1.643,300,1.486,302,2.466,303,2.313,312,1.486,314,2.436,315,2.466,317,1.826,328,2.148,352,2.693,353,3.254,354,2.323,355,1.826,356,2.741,357,2.741,358,1.826,359,2.436,360,1.826,361,1.826,362,2.323,363,2.436,364,2.323,365,3.254,366,2.047,367,2.323,368,3.254,369,3.254,370,4.34,371,3.254,372,3.254,373,3.254,374,3.254,375,3.254,376,3.254,377,3.254,378,3.254,379,1.643]],["title/classes/ProfileUpdate.html",[0,0.207,380,2.145]],["body/classes/ProfileUpdate.html",[0,0.258,1,0.501,2,0.32,3,0.32,4,0.265,6,0.162,7,0.721,8,0.793,10,0.793,11,0.736,12,0.793,13,0.567,15,0.501,16,0.037,17,0.501,18,0.162,19,0.438,20,0.501,21,0.567,22,0.638,23,0.891,24,0.637,27,0.48,31,0.891,115,1.409,116,0.567,117,0.028,118,0.028,133,0.875,134,0.712,140,0.791,146,0.965,147,0.791,159,1.968,283,1.707,299,1.888,300,1.707,302,2.637,303,2.164,312,1.707,328,2.185,355,2.099,356,2.932,357,2.099,358,2.099,359,2.667,360,2.099,361,2.099,362,2.669,363,2.667,364,2.669,380,3.729,381,3.094,382,3.932,383,3.932,384,3.739,385,2.669,386,3.739,387,3.739]],["title/classes/Register.html",[0,0.207,388,2.145]],["body/classes/Register.html",[0,0.247,1,0.479,2,0.306,3,0.306,4,0.254,6,0.155,7,0.701,8,0.776,10,0.776,11,0.685,12,0.776,13,0.542,15,0.479,16,0.037,17,0.479,18,0.155,19,0.419,20,0.479,21,0.542,22,0.609,23,0.872,24,0.619,31,0.872,32,1.481,76,1.481,100,1.347,115,1.347,116,0.542,117,0.027,118,0.027,121,2.591,122,2.591,134,0.879,135,1.015,140,0.756,147,1.081,149,0.923,159,1.739,169,1.926,198,2.248,230,1.739,231,1.481,232,1.632,233,1.481,234,1.632,235,1.481,236,1.632,237,1.481,238,1.632,239,2.335,303,2.119,305,3.756,315,2.331,379,2.582,388,3.65,389,2.957,390,3.574,391,2.551,392,3.574,393,2.957,394,3.574,395,3.82,396,4.472,397,2.957,398,2.957,399,3.574,400,2.551]],["title/classes/Temperature.html",[0,0.207,48,1.686]],["body/classes/Temperature.html",[0,0.23,1,0.447,2,0.286,3,0.286,4,0.237,6,0.145,7,0.67,8,0.854,10,0.854,11,0.754,12,0.854,13,0.67,15,0.592,16,0.037,17,0.592,18,0.192,19,0.517,20,0.592,21,0.67,22,0.753,23,0.753,24,0.592,27,0.532,31,0.898,35,1.255,44,2.479,47,3.654,48,2.777,116,0.507,117,0.026,118,0.026,131,1.983,132,1.864,133,1.033,134,1.071,135,1.255,137,2.119,139,1.664,140,0.934,141,1.664,146,1.14,147,1.19,148,1.83,149,1.14,150,1.515,151,1.043,152,1.258,336,3.654,401,2.763,402,4.416,403,4.416,404,4.416,405,3.339,406,4.416,407,3.339,408,4.416,409,4.416,410,3.339,411,3.339]],["title/classes/Token.html",[0,0.207,328,1.132]],["body/classes/Token.html",[0,0.205,1,0.397,2,0.254,3,0.254,4,0.211,6,0.129,7,0.619,8,0.798,9,2.565,10,0.798,11,0.705,12,0.798,13,0.619,15,0.546,16,0.038,17,0.546,18,0.177,19,0.477,20,0.546,21,0.619,22,0.695,23,0.926,24,0.546,25,2.93,27,0.412,31,0.949,32,1.229,35,0.843,114,0.926,115,1.118,116,0.45,117,0.024,118,0.024,121,2.288,122,1.665,133,0.694,134,0.565,146,0.766,147,0.862,149,0.766,150,1.017,159,2.047,182,1.536,283,1.354,297,1.866,298,1.866,299,1.498,300,1.354,302,2.862,303,2.306,305,1.866,306,2.911,310,2.455,312,1.354,314,2.615,315,2.655,317,1.665,328,2.248,355,1.665,356,2.951,357,2.615,358,1.665,359,2.288,360,1.665,361,1.665,362,2.118,363,2.815,364,2.118,366,1.866,379,1.498,400,2.118,412,2.455,413,2.966,414,2.966,415,1.866,416,2.966,417,2.118,418,2.966,419,2.966,420,2.966,421,2.455,422,2.966,423,4.077,424,2.966,425,2.966,426,4.077,427,2.966,428,2.966,429,2.455]],["title/interfaces/UserInformations.html",[226,1.132,230,1.132]],["body/interfaces/UserInformations.html",[2,0.277,3,0.277,4,0.229,6,0.14,16,0.036,18,0.259,19,0.729,27,0.644,100,1.957,114,1.777,117,0.025,118,0.025,151,1.622,169,1.957,178,1.475,197,1.475,201,1.338,203,1.813,205,1.813,207,1.813,209,1.813,211,1.813,213,1.813,215,1.813,217,1.813,226,1.957,227,1.813,228,1.813,229,2.717,230,1.627,231,2.152,232,2.372,233,2.152,234,2.372,235,2.152,236,2.372,237,2.152,238,2.372,239,2.372,240,1.475,241,1.813,242,1.813,243,1.813,244,1.813,245,1.813,246,1.813,247,1.813,248,1.475,249,1.813,250,1.813,251,1.813,252,1.813]],["title/classes/Utils.html",[0,0.207,415,1.89]],["body/classes/Utils.html",[0,0.304,1,0.59,2,0.377,3,0.377,4,0.313,6,0.191,7,0.798,13,0.669,15,0.59,16,0.037,17,0.59,18,0.191,19,0.516,21,0.669,27,0.588,114,1.817,117,0.031,118,0.031,182,1.66,415,3.307,430,3.645,431,5.256,432,5.256,433,4.405,434,4.405,435,4.405,436,4.405,437,4.405]],["title/classes/Widget.html",[0,0.207,438,1.89]],["body/classes/Widget.html",[0,0.208,1,0.404,2,0.258,3,0.258,4,0.214,6,0.131,7,0.626,8,0.713,10,0.713,11,0.814,12,0.713,13,0.458,15,0.404,16,0.037,17,0.404,18,0.204,19,0.353,20,0.404,21,0.458,22,0.514,23,0.996,24,0.553,27,0.475,31,1.04,46,2.496,48,2.315,51,2.496,52,2.315,55,2.496,58,2.315,60,2.496,65,2.496,74,2.496,78,2.496,80,2.496,82,2.496,87,2.496,92,2.315,95,2.496,104,2.496,108,2.315,111,2.496,115,1.137,116,0.458,117,0.024,118,0.024,121,2.315,122,2.315,133,0.706,134,0.785,140,1.265,146,0.779,147,0.872,152,1.137,153,2.594,159,1.771,183,2.594,253,2.594,283,1.377,299,1.523,300,1.377,302,2.55,303,2.093,312,1.377,328,2.057,355,1.693,356,2.638,357,2.315,358,1.693,359,2.315,360,1.693,361,1.693,363,2.315,367,2.154,379,2.082,438,3.178,439,2.496,440,3.017,441,2.496,442,2.496,443,2.496,444,4.95,445,3.017,446,3.017,447,3.017,448,3.017,449,3.017,450,3.017,451,3.017,452,3.017,453,3.017,454,3.017,455,3.017,456,3.017,457,3.017]],["title/classes/WidgetsDB.html",[0,0.207,458,2.145]],["body/classes/WidgetsDB.html",[0,0.165,1,0.32,2,0.205,3,0.205,4,0.17,6,0.104,7,0.531,8,0.768,9,2.2,10,0.768,11,0.678,12,0.768,13,0.531,15,0.469,16,0.038,17,0.469,18,0.152,19,0.409,20,0.469,21,0.531,22,0.596,23,0.705,24,0.469,27,0.46,31,1.009,32,1.713,45,2.952,76,1.886,115,0.9,116,0.363,117,0.021,118,0.021,133,0.818,134,0.787,135,0.679,140,1.07,146,0.903,147,1.156,148,1.449,149,1.349,159,2.186,182,1.558,283,1.596,298,1.503,299,1.206,300,1.091,302,2.987,303,2.451,312,1.596,314,3.069,315,2.639,317,1.341,328,2.122,342,2.952,355,1.963,356,2.719,357,2.555,358,1.963,359,2.555,360,1.963,361,1.963,363,2.321,366,3.183,367,2.496,379,2.088,382,2.893,383,2.893,458,2.952,459,1.977,460,2.389,461,2.389,462,1.706,463,1.706,464,1.706,465,1.706,466,3.496,467,4.135,468,3.496,469,2.893,470,3.496,471,3.496,472,3.422,473,2.389,474,2.389]],["title/coverage.html",[475,3.403]],["body/coverage.html",[0,0.419,4,0.2,5,2.327,16,0.037,18,0.122,35,0.799,48,1.578,52,1.578,58,1.578,75,1.578,92,1.578,108,1.578,116,0.427,117,0.023,118,0.023,119,2.007,120,2.327,124,2.007,127,2.327,153,1.769,154,2.327,165,2.327,182,2.382,183,1.769,184,2.327,197,1.284,201,1.165,226,1.847,228,2.751,230,1.059,240,1.284,248,1.284,253,1.769,254,2.327,294,2.327,296,1.769,297,1.769,328,1.059,329,2.327,347,2.327,352,2.327,354,2.007,380,2.007,381,2.327,385,2.007,388,2.007,389,2.327,391,2.007,401,2.327,412,2.327,415,1.769,417,2.007,430,2.327,438,1.769,439,2.327,458,2.007,459,2.327,462,2.007,463,2.007,464,2.007,465,2.007,475,2.327,476,2.812,477,2.812,478,2.812,479,2.327,480,6.113,481,2.327,482,6.131,483,4.765,484,2.327,485,2.327,486,2.812,487,2.812,488,2.327,489,2.812,490,2.812,491,3.928,492,2.812,493,3.251,494,2.327,495,2.805,496,3.251,497,2.327,498,2.327,499,2.805,500,2.327,501,2.327,502,5.916,503,3.251,504,2.327,505,2.327,506,4.902,507,2.327,508,2.327,509,2.812,510,2.327]],["title/dependencies.html",[511,2.503,512,2.993]],["body/dependencies.html",[16,0.036,24,0.626,25,2.938,117,0.032,118,0.032,300,2.133,512,3.865,513,4.67,514,4.67,515,4.67,516,4.67,517,4.67,518,4.67,519,4.67,520,4.67,521,4.67,522,4.67]],["title/miscellaneous/functions.html",[523,1.574,524,2.993]],["body/miscellaneous/functions.html",[6,0.197,11,0.716,15,0.716,16,0.034,17,0.716,18,0.197,19,0.626,20,0.607,27,0.54,117,0.031,118,0.031,495,3.233,497,4.422,499,3.233,500,4.422,523,2.848,524,3.747,525,3.747,526,3.747,527,4.528,528,5.343,529,4.528,530,4.528,531,5.343]],["title/index.html",[6,0.13,532,2.486]],["body/index.html",[1,0.651,16,0.033,117,0.033,118,0.033,227,2.729,532,4.023,533,4.862,534,4.862]],["title/modules.html",[535,3.403]],["body/modules.html",[16,0.033,117,0.033,118,0.033,535,4.068]],["title/miscellaneous/variables.html",[523,1.574,536,2.993]],["body/miscellaneous/variables.html",[6,0.031,8,0.656,10,0.196,11,0.173,12,0.196,16,0.038,18,0.192,20,0.173,24,0.096,27,0.518,31,0.854,32,1.148,34,0.591,35,0.919,45,1.536,76,2.018,94,1.066,100,0.663,114,0.223,116,0.196,117,0.008,118,0.008,124,0.92,131,1.044,132,0.485,133,0.877,134,0.685,135,0.366,137,1.044,139,1.219,140,0.95,141,1.044,146,1.003,147,1.085,149,0.779,150,1.109,152,1.793,159,1.815,169,1.044,170,1.066,171,1.977,172,1.977,173,1.977,178,0.588,182,0.811,230,1.044,231,0.891,232,0.803,233,0.891,234,0.803,235,0.891,236,0.588,237,0.891,238,0.326,239,1.265,283,0.588,296,0.81,297,0.81,301,1.066,303,2.038,305,3.124,306,1.773,307,0.591,308,1.066,309,1.066,311,0.591,312,0.326,314,3.278,315,2.88,317,0.723,321,2.055,322,2.055,323,2.055,324,2.055,326,2.055,327,0.591,328,1.662,342,0.92,354,0.92,366,2.035,379,2.373,385,0.92,391,0.92,393,2.292,395,1.066,396,1.455,397,1.455,398,1.455,400,0.92,417,0.92,421,2.677,429,0.591,438,1.106,441,1.455,442,1.066,443,1.066,444,2.497,462,0.92,463,0.92,464,0.92,465,0.92,469,2.677,472,1.066,479,0.591,481,1.066,483,0.591,484,1.066,485,1.066,488,1.066,493,0.591,494,1.066,495,0.51,496,3.103,498,1.066,499,0.51,501,1.066,503,0.591,504,1.066,505,0.591,507,0.591,508,0.591,510,0.591,523,0.45,525,0.591,526,0.591,536,0.591,537,3.597,538,1.288,539,0.715,540,0.715,541,1.288,542,0.715,543,0.715,544,4.76,545,3.749,546,5.23,547,1.288,548,3.234,549,5.128,550,2.769,551,2.769,552,1.288,553,2.769,554,0.715,555,2.769,556,0.715,557,2.769,558,0.715,559,2.769,560,0.715,561,3.234,562,3.426,563,4.7,564,3.749,565,2.151,566,0.715,567,1.288,568,0.715,569,0.715,570,1.758,571,2.484,572,1.288,573,1.288,574,1.288,575,0.715,576,0.715,577,0.715,578,0.715,579,1.758,580,1.758,581,0.715,582,2.769,583,0.715,584,0.715,585,0.715,586,0.715,587,0.715,588,0.715,589,0.715,590,0.715,591,0.715,592,0.715,593,4.41,594,3.749,595,3.234,596,1.288,597,1.288,598,3.597,599,2.151,600,3.017,601,3.234,602,1.288,603,2.151,604,3.234,605,1.288,606,2.151,607,1.288,608,1.288,609,4.323,610,3.597,611,1.758,612,1.288,613,0.715,614,2.769,615,0.715,616,0.715,617,4.228,618,0.715,619,0.715,620,1.288,621,1.288,622,3.887,623,1.288,624,1.288,625,1.288,626,2.151,627,2.151,628,2.151,629,1.288,630,0.715,631,0.715,632,2.484,633,2.484,634,1.758,635,1.288,636,0.715,637,0.715,638,0.715,639,2.151,640,2.151,641,2.151,642,0.715,643,0.715,644,0.715,645,0.715,646,0.715]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":182,"title":{},"body":{"classes/Gmail.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0/1",{"_index":482,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":489,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":492,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":502,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":506,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":491,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":490,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":283,"title":{},"body":{"classes/LeagueOfLegends.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["1/1",{"_index":487,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":516,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":486,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":533,"title":{},"body":{"index.html":{}}}],["2.29.1",{"_index":519,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":521,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":514,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":264,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["365",{"_index":93,"title":{},"body":{"classes/About.html":{}}}],["4",{"_index":534,"title":{},"body":{"index.html":{}}}],["4.17.1",{"_index":517,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":308,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["8.5.1",{"_index":518,"title":{},"body":{"dependencies.html":{}}}],["_result",{"_index":316,"title":{},"body":{"classes/Login.html":{}}}],["_result['token",{"_index":319,"title":{},"body":{"classes/Login.html":{}}}],["_result['token_created_at",{"_index":320,"title":{},"body":{"classes/Login.html":{}}}],["abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789",{"_index":437,"title":{},"body":{"classes/Utils.html":{}}}],["access_token",{"_index":593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addroute",{"_index":500,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["addroute(endpoint",{"_index":527,"title":{},"body":{"miscellaneous/functions.html":{}}}],["addusers",{"_index":484,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["addusers(infos",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addwidget",{"_index":464,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["addwidget(userid",{"_index":473,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["already",{"_index":397,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["api_key",{"_index":44,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{}}}],["api_url",{"_index":41,"title":{},"body":{"classes/About.html":{}}}],["apikey",{"_index":336,"title":{},"body":{"classes/Nasa.html":{},"classes/Temperature.html":{}}}],["apod",{"_index":60,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["app",{"_index":494,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apple_mail",{"_index":235,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["apple_token",{"_index":236,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["apple_user",{"_index":611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":178,"title":{},"body":{"classes/Gmail.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["astronomy",{"_index":61,"title":{},"body":{"classes/About.html":{}}}],["async",{"_index":8,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["async(err",{"_index":467,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["authactions",{"_index":125,"title":{},"body":{"classes/Authentication.html":{}}}],["authentication",{"_index":119,"title":{"classes/Authentication.html":{}},"body":{"classes/Authentication.html":{},"coverage.html":{}}}],["authorization",{"_index":172,"title":{},"body":{"classes/Gmail.html":{},"classes/Office.html":{},"miscellaneous/variables.html":{}}}],["autologin",{"_index":77,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{}}}],["autologin.startswith(\"https://intra.epitech.eu",{"_index":158,"title":{},"body":{"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{}}}],["autologin.substring(25",{"_index":199,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["await",{"_index":140,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["axios",{"_index":131,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["axiosresponse",{"_index":132,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["bad",{"_index":607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base_currency",{"_index":144,"title":{},"body":{"classes/Currency.html":{}}}],["bearer",{"_index":173,"title":{},"body":{"classes/Gmail.html":{},"classes/Office.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":441,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["break",{"_index":600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calendar",{"_index":96,"title":{},"body":{"classes/About.html":{}}}],["callback",{"_index":545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(err",{"_index":563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["camera",{"_index":69,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["case",{"_index":444,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":146,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["checktoken",{"_index":417,"title":{},"body":{"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checktoken(token",{"_index":419,"title":{},"body":{"classes/Token.html":{}}}],["city",{"_index":47,"title":{},"body":{"classes/About.html":{},"classes/Temperature.html":{}}}],["city_temperature",{"_index":46,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["city_weather",{"_index":51,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["class",{"_index":0,"title":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{}}}],["classes",{"_index":1,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"index.html":{}}}],["client",{"_index":33,"title":{},"body":{"classes/About.html":{}}}],["console.debug(\"[getuser",{"_index":574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"[getuserbytoken",{"_index":573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"firsturl",{"_index":262,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug(\"profile",{"_index":290,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug(\"query",{"_index":561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"response",{"_index":597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"secondurl",{"_index":272,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug(\"setting",{"_index":289,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug('[handleoauthusersaction",{"_index":617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(err",{"_index":366,"title":{},"body":{"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["console.debug(result",{"_index":421,"title":{},"body":{"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["console.error(\"error",{"_index":639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error(error",{"_index":646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"heeeeeeeeeeeeeeeeeeeeere",{"_index":362,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{}}}],["console.log(\"heeeeeeeeeeeeeeeeeeeeere2",{"_index":364,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{}}}],["console.log(\"res",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"response",{"_index":605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"result",{"_index":368,"title":{},"body":{"classes/Profile.html":{}}}],["console.log(\"result[0",{"_index":369,"title":{},"body":{"classes/Profile.html":{}}}],["console.log('autologin",{"_index":161,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["console.log('bearer",{"_index":596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('currency",{"_index":143,"title":{},"body":{"classes/Currency.html":{}}}],["console.log('ip",{"_index":30,"title":{},"body":{"classes/About.html":{}}}],["console.log(error",{"_index":148,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"classes/WidgetsDB.html":{}}}],["console.log(from",{"_index":136,"title":{},"body":{"classes/Currency.html":{}}}],["const",{"_index":134,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["converter",{"_index":53,"title":{},"body":{"classes/About.html":{}}}],["cors",{"_index":513,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":475,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdat",{"_index":422,"title":{},"body":{"classes/Token.html":{}}}],["credits",{"_index":215,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["curiosity",{"_index":66,"title":{},"body":{"classes/About.html":{}}}],["curiosity_image",{"_index":65,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["currency",{"_index":52,"title":{"classes/Currency.html":{}},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["currency.getexchangerate(req",{"_index":445,"title":{},"body":{"classes/Widget.html":{}}}],["currency_converter",{"_index":55,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["current_time",{"_index":36,"title":{},"body":{"classes/About.html":{}}}],["data",{"_index":342,"title":{},"body":{"classes/Nasa.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["data.leaguepoints",{"_index":281,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.losses",{"_index":280,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.queuetype",{"_index":276,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.rank",{"_index":278,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.tier",{"_index":277,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.wins",{"_index":279,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data[0",{"_index":345,"title":{},"body":{"classes/Nasa.html":{}}}],["database",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database/databaseactions",{"_index":298,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{}}}],["database/interfaces",{"_index":198,"title":{},"body":{"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Register.html":{}}}],["date",{"_index":64,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["day",{"_index":63,"title":{},"body":{"classes/About.html":{}}}],["db",{"_index":481,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["db.query(query",{"_index":562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db.query(querystring",{"_index":585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dd",{"_index":323,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["decoded",{"_index":359,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["default",{"_index":152,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["delete",{"_index":568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletewidget",{"_index":485,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":512,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":49,"title":{},"body":{"classes/About.html":{}}}],["diff",{"_index":426,"title":{},"body":{"classes/Token.html":{}}}],["display",{"_index":50,"title":{},"body":{"classes/About.html":{}}}],["display_name",{"_index":40,"title":{},"body":{"classes/About.html":{}}}],["documentation",{"_index":476,"title":{},"body":{"coverage.html":{}}}],["door",{"_index":89,"title":{},"body":{"classes/About.html":{}}}],["door_name",{"_index":91,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{}}}],["doors",{"_index":85,"title":{},"body":{"classes/About.html":{}}}],["dotenv",{"_index":515,"title":{},"body":{"dependencies.html":{}}}],["end_date",{"_index":99,"title":{},"body":{"classes/About.html":{},"classes/Office.html":{}}}],["endpoint",{"_index":529,"title":{},"body":{"miscellaneous/functions.html":{}}}],["epitech",{"_index":72,"title":{},"body":{"classes/About.html":{}}}],["epitech_doors",{"_index":84,"title":{},"body":{"classes/About.html":{}}}],["epitech_doors_open_door",{"_index":87,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["epitechdoors",{"_index":153,"title":{"classes/EpitechDoors.html":{}},"body":{"classes/EpitechDoors.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["epitechdoors.opendoor(req",{"_index":453,"title":{},"body":{"classes/Widget.html":{}}}],["err",{"_index":314,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":147,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["error[addusers",{"_index":627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error[getusers",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error[updateuserauthtoken",{"_index":618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["events",{"_index":97,"title":{},"body":{"classes/About.html":{}}}],["exchange",{"_index":56,"title":{},"body":{"classes/About.html":{}}}],["existinginformation",{"_index":632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existinginformationtype",{"_index":633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exists",{"_index":398,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":306,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":151,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"interfaces/UserInformations.html":{}}}],["express",{"_index":24,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["express.request",{"_index":10,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["express.response",{"_index":12,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["facebook_mail",{"_index":233,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["facebook_token",{"_index":234,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["facebook_user",{"_index":601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["facebookuser",{"_index":603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":159,"title":{},"body":{"classes/EpitechDoors.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{}}}],["firstname",{"_index":203,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["firsturl",{"_index":259,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["found",{"_index":357,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["function",{"_index":496,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":524,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gamedata",{"_index":252,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["gamedata.length",{"_index":282,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["gamedata[0].queuetype",{"_index":284,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["gamedata[1",{"_index":286,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["get(req",{"_index":9,"title":{},"body":{"classes/About.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{}}}],["getcalendarevents",{"_index":348,"title":{},"body":{"classes/Office.html":{}}}],["getcalendarevents(req",{"_index":349,"title":{},"body":{"classes/Office.html":{}}}],["getexchangerate",{"_index":128,"title":{},"body":{"classes/Currency.html":{}}}],["getexchangerate(req",{"_index":129,"title":{},"body":{"classes/Currency.html":{}}}],["getgrades",{"_index":185,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getgrades(req",{"_index":189,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getlastfivemail",{"_index":166,"title":{},"body":{"classes/Gmail.html":{}}}],["getlastfivemail(req",{"_index":167,"title":{},"body":{"classes/Gmail.html":{}}}],["getnasadayimage",{"_index":330,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasadayimage(req",{"_index":332,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasaroverimage",{"_index":331,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasaroverimage(req",{"_index":334,"title":{},"body":{"classes/Nasa.html":{}}}],["getnotifications",{"_index":186,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getnotifications(req",{"_index":191,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getpartners",{"_index":187,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getpartners(req",{"_index":193,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getprofile",{"_index":188,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getprofile(req",{"_index":195,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getrandomstring",{"_index":431,"title":{},"body":{"classes/Utils.html":{}}}],["getrandomstring(length",{"_index":432,"title":{},"body":{"classes/Utils.html":{}}}],["getrow",{"_index":354,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrow('token",{"_index":365,"title":{},"body":{"classes/Profile.html":{}}}],["gettemperature",{"_index":402,"title":{},"body":{"classes/Temperature.html":{}}}],["gettemperature(req",{"_index":404,"title":{},"body":{"classes/Temperature.html":{}}}],["getting",{"_index":293,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["getuserbytoken",{"_index":463,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuserbytoken(token",{"_index":466,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["getuserprofile",{"_index":255,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["getuserprofile(req",{"_index":256,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["getusers",{"_index":296,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getusers(infos",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getusers(user",{"_index":313,"title":{},"body":{"classes/Login.html":{}}}],["getweather",{"_index":403,"title":{},"body":{"classes/Temperature.html":{}}}],["getweather(req",{"_index":406,"title":{},"body":{"classes/Temperature.html":{}}}],["getwidgetsbyuserid",{"_index":462,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getwidgetsbyuserid(userid",{"_index":471,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["gmail",{"_index":108,"title":{"classes/Gmail.html":{}},"body":{"classes/About.html":{},"classes/Gmail.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["gmail.getlastfivemail(req",{"_index":457,"title":{},"body":{"classes/Widget.html":{}}}],["gmail_inbox",{"_index":111,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["google",{"_index":110,"title":{},"body":{"classes/About.html":{}}}],["google_api_key",{"_index":109,"title":{},"body":{"classes/About.html":{},"classes/Gmail.html":{}}}],["google_mail",{"_index":231,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["google_token",{"_index":232,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["google_user",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googleuser",{"_index":599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gpa",{"_index":217,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["grades",{"_index":83,"title":{},"body":{"classes/About.html":{}}}],["handleoauthusers",{"_index":124,"title":{},"body":{"classes/Authentication.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusers(req",{"_index":126,"title":{},"body":{"classes/Authentication.html":{}}}],["handleoauthusersaction",{"_index":504,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusersaction(infos",{"_index":613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":171,"title":{},"body":{"classes/Gmail.html":{},"classes/Office.html":{},"miscellaneous/variables.html":{}}}],["hh:mm:ss",{"_index":324,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":34,"title":{},"body":{"classes/About.html":{},"miscellaneous/variables.html":{}}}],["http://api.openweathermap.org",{"_index":42,"title":{},"body":{"classes/About.html":{}}}],["http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key",{"_index":409,"title":{},"body":{"classes/Temperature.html":{}}}],["https://${region}.api.riotgames.com/lol/league/v4/entries/by",{"_index":270,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["https://${region}.api.riotgames.com/lol/summoner/v4/summoners/by",{"_index":260,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["https://api.nasa.gov",{"_index":59,"title":{},"body":{"classes/About.html":{}}}],["https://api.nasa.gov/mars",{"_index":340,"title":{},"body":{"classes/Nasa.html":{}}}],["https://api.nasa.gov/planetary/apod?api_key=${api_key}&date=${date",{"_index":338,"title":{},"body":{"classes/Nasa.html":{}}}],["https://ddragon.leagueoflegends.com/cdn/11.23.1/img/profileicon/${response.data['profileiconid']}.png",{"_index":266,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["https://epi",{"_index":162,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["https://freecurrencyapi.net",{"_index":54,"title":{},"body":{"classes/About.html":{}}}],["https://freecurrencyapi.net/api/v2/latest?base_currency=${from}&apikey=${api_key",{"_index":138,"title":{},"body":{"classes/Currency.html":{}}}],["https://gmail.googleapis.com/gmail/v1/users/${mail}/messages?maxresults=${max_results",{"_index":175,"title":{},"body":{"classes/Gmail.html":{}}}],["https://graph.facebook.com/me/?fields=id,name,email",{"_index":602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://graph.microsoft.com/v1.0/me",{"_index":94,"title":{},"body":{"classes/About.html":{},"miscellaneous/variables.html":{}}}],["https://graph.microsoft.com/v1.0/me/calendarview?startdatetime=${start_date}&enddatetime=${end_date",{"_index":351,"title":{},"body":{"classes/Office.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/binome/?format=json",{"_index":220,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/notes?format=json",{"_index":224,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/notification/message?format=json",{"_index":222,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user?format=json",{"_index":200,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${intra_autologin",{"_index":160,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["https://intra.epitech.eu/admin/autolog",{"_index":73,"title":{},"body":{"classes/About.html":{}}}],["https://www.googleapis.com/oauth2/v1/userinfo?alt=json",{"_index":170,"title":{},"body":{"classes/Gmail.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifier",{"_index":477,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":68,"title":{},"body":{"classes/About.html":{}}}],["import",{"_index":23,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["inbox",{"_index":112,"title":{},"body":{"classes/About.html":{}}}],["incorrect",{"_index":318,"title":{},"body":{"classes/Login.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["informations",{"_index":640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos",{"_index":393,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["infos.apple_mail",{"_index":557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.apple_token",{"_index":558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.facebook_mail",{"_index":555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.facebook_token",{"_index":556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.google_mail",{"_index":553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.google_token",{"_index":554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.mail",{"_index":550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.office_mail",{"_index":559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.office_token",{"_index":560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.password",{"_index":552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insert",{"_index":547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":226,"title":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["interfaces",{"_index":227,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"index.html":{}}}],["internal",{"_index":150,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["intra",{"_index":71,"title":{},"body":{"classes/About.html":{}}}],["intra_autologin",{"_index":86,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{}}}],["intra_epitech",{"_index":70,"title":{},"body":{"classes/About.html":{}}}],["intra_epitech_grades",{"_index":82,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_notifications",{"_index":80,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_partners",{"_index":78,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_profile",{"_index":74,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intraepitech",{"_index":183,"title":{"classes/IntraEpitech.html":{}},"body":{"classes/IntraEpitech.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["intraepitech.getgrades(req",{"_index":454,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getnotifications(req",{"_index":452,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getpartners(req",{"_index":451,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getprofile(req",{"_index":450,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitechuser",{"_index":197,"title":{"interfaces/IntraEpitechUser.html":{}},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["invalid",{"_index":363,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["ip",{"_index":26,"title":{},"body":{"classes/About.html":{}}}],["ip.split(':')[3",{"_index":29,"title":{},"body":{"classes/About.html":{}}}],["json.stringify(widget",{"_index":566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jsonwebtoken",{"_index":300,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"dependencies.html":{}}}],["jwt",{"_index":299,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwt.jwtpayload",{"_index":360,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwt.sign",{"_index":311,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["jwt.verify(token",{"_index":361,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwttoken",{"_index":582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":205,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["league",{"_index":102,"title":{},"body":{"classes/About.html":{}}}],["league_of_legends",{"_index":101,"title":{},"body":{"classes/About.html":{}}}],["league_of_legends_summoner_profile",{"_index":104,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["leagueoflegends",{"_index":253,"title":{"classes/LeagueOfLegends.html":{}},"body":{"classes/LeagueOfLegends.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["leagueoflegends.getuserprofile(req",{"_index":456,"title":{},"body":{"classes/Widget.html":{}}}],["leagueoflegendsgamedata",{"_index":240,"title":{"interfaces/LeagueOfLegendsGameData.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["leagueoflegendsprofiledata",{"_index":248,"title":{"interfaces/LeagueOfLegendsProfileData.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["leaguepoints",{"_index":246,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["legends",{"_index":103,"title":{},"body":{"classes/About.html":{}}}],["length",{"_index":434,"title":{},"body":{"classes/Utils.html":{}}}],["limit",{"_index":572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["literal",{"_index":630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":211,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["logged",{"_index":327,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":201,"title":{"classes/Login.html":{}},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["logue.eu/api/doors_open?login=${autologin}&door_name=${door_name",{"_index":163,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["losses",{"_index":245,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["mail",{"_index":169,"title":{},"body":{"classes/Gmail.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":118,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["max_results",{"_index":113,"title":{},"body":{"classes/About.html":{},"classes/Gmail.html":{}}}],["message",{"_index":303,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["messageids",{"_index":177,"title":{},"body":{"classes/Gmail.html":{}}}],["messageids.push(message.id",{"_index":180,"title":{},"body":{"classes/Gmail.html":{}}}],["messages",{"_index":181,"title":{},"body":{"classes/Gmail.html":{}}}],["method",{"_index":141,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":7,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["miscellaneous",{"_index":523,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":322,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["module.exports",{"_index":115,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["modules",{"_index":535,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moment",{"_index":25,"title":{},"body":{"classes/About.html":{},"classes/Login.html":{},"classes/Token.html":{},"dependencies.html":{}}}],["moment().format('yyyy",{"_index":321,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["moment().unix",{"_index":37,"title":{},"body":{"classes/About.html":{}}}],["moment(result[0].token_created_at",{"_index":424,"title":{},"body":{"classes/Token.html":{}}}],["moment.moment",{"_index":423,"title":{},"body":{"classes/Token.html":{}}}],["montpellier",{"_index":90,"title":{},"body":{"classes/About.html":{}}}],["mysql.createconnection",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":520,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":17,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["name/${summoner_name}?api_key=${api_key",{"_index":261,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["nasa",{"_index":58,"title":{"classes/Nasa.html":{}},"body":{"classes/About.html":{},"classes/Nasa.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["nasa.getnasadayimage(req",{"_index":448,"title":{},"body":{"classes/Widget.html":{}}}],["nasa.getnasaroverimage(req",{"_index":449,"title":{},"body":{"classes/Widget.html":{}}}],["new",{"_index":116,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newtoken",{"_index":310,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{}}}],["newvalues",{"_index":576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["next",{"_index":531,"title":{},"body":{"miscellaneous/functions.html":{}}}],["none",{"_index":615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notifications",{"_index":81,"title":{},"body":{"classes/About.html":{}}}],["now",{"_index":425,"title":{},"body":{"classes/Token.html":{}}}],["now.diff(createdat",{"_index":427,"title":{},"body":{"classes/Token.html":{}}}],["null",{"_index":420,"title":{},"body":{"classes/Token.html":{}}}],["number",{"_index":114,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"miscellaneous/variables.html":{}}}],["number(process.env.expire_time",{"_index":307,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["office",{"_index":92,"title":{"classes/Office.html":{}},"body":{"classes/About.html":{},"classes/Office.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["office.getcalendarevents(req",{"_index":455,"title":{},"body":{"classes/Widget.html":{}}}],["office_calendar_events",{"_index":95,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["office_mail",{"_index":237,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["office_token",{"_index":100,"title":{},"body":{"classes/About.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Office.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["office_user",{"_index":604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["officeuser",{"_index":606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["open",{"_index":88,"title":{},"body":{"classes/About.html":{}}}],["opendoor",{"_index":155,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["opendoor(req",{"_index":156,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["optional",{"_index":19,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["outlook_mail",{"_index":375,"title":{},"body":{"classes/Profile.html":{}}}],["overview",{"_index":532,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":511,"title":{"dependencies.html":{}},"body":{}}],["parameters",{"_index":15,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":43,"title":{},"body":{"classes/About.html":{}}}],["partners",{"_index":79,"title":{},"body":{"classes/About.html":{}}}],["password",{"_index":239,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":382,"title":{},"body":{"classes/ProfileUpdate.html":{},"classes/WidgetsDB.html":{}}}],["patch(req",{"_index":383,"title":{},"body":{"classes/ProfileUpdate.html":{},"classes/WidgetsDB.html":{}}}],["payload",{"_index":309,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["photo",{"_index":344,"title":{},"body":{"classes/Nasa.html":{}}}],["photos/api/v1/rovers/curiosity/photos?earth_date=${date}&camera=${camera}&api_key=${api_key",{"_index":341,"title":{},"body":{"classes/Nasa.html":{}}}],["picture",{"_index":62,"title":{},"body":{"classes/About.html":{}}}],["plain_user",{"_index":634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plainuser",{"_index":635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["possible",{"_index":436,"title":{},"body":{"classes/Utils.html":{}}}],["post",{"_index":121,"title":{},"body":{"classes/Authentication.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["post(req",{"_index":122,"title":{},"body":{"classes/Authentication.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["process.env.jwt_secret",{"_index":312,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["process.env.my_sql_database",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_host",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_password",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_user",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.nasa_api_key",{"_index":337,"title":{},"body":{"classes/Nasa.html":{}}}],["process.env.weather_api_key",{"_index":408,"title":{},"body":{"classes/Temperature.html":{}}}],["profile",{"_index":75,"title":{"classes/Profile.html":{}},"body":{"classes/About.html":{},"classes/LeagueOfLegends.html":{},"classes/Profile.html":{},"coverage.html":{}}}],["profileactions",{"_index":386,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["profileiconurl",{"_index":251,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["profilepicture",{"_index":207,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["profileupdate",{"_index":380,"title":{"classes/ProfileUpdate.html":{}},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{}}}],["promise",{"_index":620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise(async",{"_index":621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promo",{"_index":209,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["properties",{"_index":229,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["query",{"_index":546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["querystring",{"_index":584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queuetype",{"_index":241,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["rank",{"_index":243,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["ranked_flex_sr",{"_index":287,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["ranked_solo_5x5",{"_index":285,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["rate",{"_index":57,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{}}}],["rc.0",{"_index":522,"title":{},"body":{"dependencies.html":{}}}],["region",{"_index":107,"title":{},"body":{"classes/About.html":{},"classes/LeagueOfLegends.html":{}}}],["register",{"_index":388,"title":{"classes/Register.html":{}},"body":{"classes/Register.html":{},"coverage.html":{}}}],["registeractions",{"_index":392,"title":{},"body":{"classes/Register.html":{}}}],["registerbasicuser",{"_index":391,"title":{},"body":{"classes/Register.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registerbasicuser(infos",{"_index":394,"title":{},"body":{"classes/Register.html":{}}}],["register|login",{"_index":631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reject",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req",{"_index":20,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["req.body",{"_index":135,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["req.body.mail",{"_index":636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.body.password",{"_index":637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":355,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["req.ip",{"_index":28,"title":{},"body":{"classes/About.html":{}}}],["req.params.type",{"_index":442,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesthandler",{"_index":497,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["requesthandler(req",{"_index":530,"title":{},"body":{"miscellaneous/functions.html":{}}}],["require(\"http\").server(app",{"_index":583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":304,"title":{},"body":{"classes/Login.html":{}}}],["res",{"_index":11,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["res.status(200).json",{"_index":32,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["res.status(200).json(photo",{"_index":346,"title":{},"body":{"classes/Nasa.html":{}}}],["res.status(200).json(profile",{"_index":291,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["res.status(200).json(response.data",{"_index":339,"title":{},"body":{"classes/Nasa.html":{},"classes/Office.html":{}}}],["res.status(200).json(response.data['main",{"_index":410,"title":{},"body":{"classes/Temperature.html":{}}}],["res.status(200).json(response.data['weather",{"_index":411,"title":{},"body":{"classes/Temperature.html":{}}}],["res.status(200).json(response2.data",{"_index":223,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(response2.data['binomes",{"_index":221,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(response2.data['modules",{"_index":225,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(user",{"_index":219,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(400).json",{"_index":301,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["res.status(401).json",{"_index":356,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["res.status(403).json",{"_index":399,"title":{},"body":{"classes/Register.html":{}}}],["res.status(404).json",{"_index":367,"title":{},"body":{"classes/Profile.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["res.status(500).json",{"_index":149,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["res.status(response.status).json(response.data",{"_index":164,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["res.status(response2.status).json",{"_index":292,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["resolve",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":139,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["response.data",{"_index":598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response.data.data[to",{"_index":142,"title":{},"body":{"classes/Currency.html":{}}}],["response.data.email",{"_index":174,"title":{},"body":{"classes/Gmail.html":{}}}],["response.data.photos",{"_index":343,"title":{},"body":{"classes/Nasa.html":{}}}],["response.data['credits",{"_index":216,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['firstname",{"_index":204,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['gpa'][0]['gpa",{"_index":218,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['groups'][0]['name",{"_index":212,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['id",{"_index":265,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response.data['lastname",{"_index":206,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['login",{"_index":202,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['name",{"_index":268,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response.data['picture",{"_index":208,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['promo",{"_index":210,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['semester_code",{"_index":214,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['summonerlevel",{"_index":267,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response.status",{"_index":263,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response2",{"_index":176,"title":{},"body":{"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{}}}],["response2.data.length",{"_index":274,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response2.data.map((data",{"_index":275,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response2.data.messages.foreach((message",{"_index":179,"title":{},"body":{"classes/Gmail.html":{}}}],["response2.status",{"_index":273,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["result",{"_index":315,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["result.affectedrows",{"_index":429,"title":{},"body":{"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["result.error",{"_index":395,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["result.length",{"_index":317,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["result.message",{"_index":396,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["result.result",{"_index":400,"title":{},"body":{"classes/Register.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["result[0",{"_index":370,"title":{},"body":{"classes/Profile.html":{}}}],["result[addusers",{"_index":628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[getusers",{"_index":629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[updateuserauthtoken",{"_index":619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["results",{"_index":117,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":31,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":21,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["routes",{"_index":501,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rover",{"_index":67,"title":{},"body":{"classes/About.html":{}}}],["row",{"_index":570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rows",{"_index":575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rslt",{"_index":371,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['apple_mail",{"_index":377,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['facebook_mail",{"_index":374,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['google_mail",{"_index":373,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['mail",{"_index":372,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['office_mail",{"_index":378,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['outlook_mail",{"_index":376,"title":{},"body":{"classes/Profile.html":{}}}],["seconds",{"_index":428,"title":{},"body":{"classes/Token.html":{}}}],["secondurl",{"_index":269,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["select",{"_index":571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["semestercode",{"_index":213,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["server",{"_index":35,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":528,"title":{},"body":{"miscellaneous/functions.html":{}}}],["services",{"_index":38,"title":{},"body":{"classes/About.html":{}}}],["set",{"_index":580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":3,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["src/.../authactions.ts",{"_index":541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.ts",{"_index":540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../databaseactions.ts",{"_index":537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../profileactions.ts",{"_index":543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../registeractions.ts",{"_index":542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../request_handler.ts",{"_index":526,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../routes.ts",{"_index":525,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../tokenaction.ts",{"_index":539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/database/database.ts",{"_index":479,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/databaseactions.ts",{"_index":483,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/interfaces.ts",{"_index":228,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["src/index.ts",{"_index":493,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/request_handler.ts",{"_index":495,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/routes.ts",{"_index":499,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/routes/about/about.ts",{"_index":5,"title":{},"body":{"classes/About.html":{},"coverage.html":{}}}],["src/routes/about/about.ts:5",{"_index":14,"title":{},"body":{"classes/About.html":{}}}],["src/routes/auth/authactions.ts",{"_index":503,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/auth/login.ts",{"_index":294,"title":{},"body":{"classes/Login.html":{},"coverage.html":{}}}],["src/routes/auth/login.ts:8",{"_index":295,"title":{},"body":{"classes/Login.html":{}}}],["src/routes/auth/oauth.ts",{"_index":120,"title":{},"body":{"classes/Authentication.html":{},"coverage.html":{}}}],["src/routes/auth/oauth.ts:5",{"_index":123,"title":{},"body":{"classes/Authentication.html":{}}}],["src/routes/auth/register.ts",{"_index":389,"title":{},"body":{"classes/Register.html":{},"coverage.html":{}}}],["src/routes/auth/register.ts:6",{"_index":390,"title":{},"body":{"classes/Register.html":{}}}],["src/routes/auth/registeractions.ts",{"_index":505,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/auth/token.ts",{"_index":412,"title":{},"body":{"classes/Token.html":{},"coverage.html":{}}}],["src/routes/auth/token.ts:42",{"_index":414,"title":{},"body":{"classes/Token.html":{}}}],["src/routes/auth/token.ts:9",{"_index":413,"title":{},"body":{"classes/Token.html":{}}}],["src/routes/auth/tokenaction.ts",{"_index":507,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/profile/profile.ts",{"_index":352,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{}}}],["src/routes/profile/profile.ts:6",{"_index":353,"title":{},"body":{"classes/Profile.html":{}}}],["src/routes/profile/profileactions.ts",{"_index":508,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/profile/profileupdate.ts",{"_index":381,"title":{},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{}}}],["src/routes/profile/profileupdate.ts:6",{"_index":384,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["src/routes/widgets/currency.ts",{"_index":127,"title":{},"body":{"classes/Currency.html":{},"coverage.html":{}}}],["src/routes/widgets/currency.ts:5",{"_index":130,"title":{},"body":{"classes/Currency.html":{}}}],["src/routes/widgets/epitechdoors.ts",{"_index":154,"title":{},"body":{"classes/EpitechDoors.html":{},"coverage.html":{}}}],["src/routes/widgets/epitechdoors.ts:5",{"_index":157,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["src/routes/widgets/gmail.ts",{"_index":165,"title":{},"body":{"classes/Gmail.html":{},"coverage.html":{}}}],["src/routes/widgets/gmail.ts:5",{"_index":168,"title":{},"body":{"classes/Gmail.html":{}}}],["src/routes/widgets/intraepitech.ts",{"_index":184,"title":{},"body":{"classes/IntraEpitech.html":{},"coverage.html":{}}}],["src/routes/widgets/intraepitech.ts:105",{"_index":190,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:43",{"_index":194,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:6",{"_index":196,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:74",{"_index":192,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/leagueoflegends.ts",{"_index":254,"title":{},"body":{"classes/LeagueOfLegends.html":{},"coverage.html":{}}}],["src/routes/widgets/leagueoflegends.ts:6",{"_index":257,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["src/routes/widgets/nasa.ts",{"_index":329,"title":{},"body":{"classes/Nasa.html":{},"coverage.html":{}}}],["src/routes/widgets/nasa.ts:24",{"_index":335,"title":{},"body":{"classes/Nasa.html":{}}}],["src/routes/widgets/nasa.ts:5",{"_index":333,"title":{},"body":{"classes/Nasa.html":{}}}],["src/routes/widgets/office.ts",{"_index":347,"title":{},"body":{"classes/Office.html":{},"coverage.html":{}}}],["src/routes/widgets/office.ts:5",{"_index":350,"title":{},"body":{"classes/Office.html":{}}}],["src/routes/widgets/temperature.ts",{"_index":401,"title":{},"body":{"classes/Temperature.html":{},"coverage.html":{}}}],["src/routes/widgets/temperature.ts:24",{"_index":407,"title":{},"body":{"classes/Temperature.html":{}}}],["src/routes/widgets/temperature.ts:5",{"_index":405,"title":{},"body":{"classes/Temperature.html":{}}}],["src/routes/widgets/widget.ts",{"_index":439,"title":{},"body":{"classes/Widget.html":{},"coverage.html":{}}}],["src/routes/widgets/widget.ts:13",{"_index":440,"title":{},"body":{"classes/Widget.html":{}}}],["src/routes/widgets/widgetsdb.ts",{"_index":459,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{}}}],["src/routes/widgets/widgetsdb.ts:6",{"_index":460,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["src/routes/widgets/widgetsdb.ts:66",{"_index":461,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["src/utils/utils.ts",{"_index":430,"title":{},"body":{"classes/Utils.html":{},"coverage.html":{}}}],["src/utils/utils.ts:2",{"_index":433,"title":{},"body":{"classes/Utils.html":{}}}],["start_date",{"_index":98,"title":{},"body":{"classes/About.html":{},"classes/Office.html":{}}}],["statements",{"_index":478,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":27,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["success",{"_index":472,"title":{},"body":{"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["summoner",{"_index":105,"title":{},"body":{"classes/About.html":{}}}],["summoner/${summoner_id}?api_key=${api_key",{"_index":271,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["summoner_id",{"_index":258,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["summoner_name",{"_index":106,"title":{},"body":{"classes/About.html":{},"classes/LeagueOfLegends.html":{}}}],["summonerlevel",{"_index":250,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["summonername",{"_index":249,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["switch",{"_index":443,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":510,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":509,"title":{},"body":{"coverage.html":{}}}],["target_currency",{"_index":145,"title":{},"body":{"classes/Currency.html":{}}}],["temperature",{"_index":48,"title":{"classes/Temperature.html":{}},"body":{"classes/About.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["temperature.gettemperature(req",{"_index":446,"title":{},"body":{"classes/Widget.html":{}}}],["temperature.getweather(req",{"_index":447,"title":{},"body":{"classes/Widget.html":{}}}],["text",{"_index":435,"title":{},"body":{"classes/Utils.html":{}}}],["tier",{"_index":242,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["token",{"_index":328,"title":{"classes/Token.html":{}},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token.split",{"_index":358,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["token_created_at",{"_index":326,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["token_wl",{"_index":498,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenaction",{"_index":418,"title":{},"body":{"classes/Token.html":{}}}],["true",{"_index":379,"title":{},"body":{"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":133,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":18,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":305,"title":{},"body":{"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["unknown",{"_index":22,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["unranked",{"_index":288,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["update",{"_index":579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updated",{"_index":641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos",{"_index":297,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateinfos(['facebook_mail",{"_index":643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['google_mail",{"_index":638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['mail",{"_index":644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['office_mail",{"_index":642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['token",{"_index":325,"title":{},"body":{"classes/Login.html":{}}}],["updates",{"_index":581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuserauthtoken",{"_index":488,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateuserauthtoken(infos",{"_index":616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuserinformations",{"_index":385,"title":{},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateuserinformations(req",{"_index":387,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["updatewidget",{"_index":465,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updatewidget(userid",{"_index":474,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["url",{"_index":137,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":76,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["user.length",{"_index":468,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["user.type",{"_index":609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.email",{"_index":610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.mail",{"_index":612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.password",{"_index":645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user[0]['id",{"_index":470,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["user_id",{"_index":565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":469,"title":{},"body":{"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["userinformations",{"_index":230,"title":{"interfaces/UserInformations.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userjson",{"_index":594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["username",{"_index":238,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils",{"_index":415,"title":{"classes/Utils.html":{}},"body":{"classes/Token.html":{},"classes/Utils.html":{},"coverage.html":{}}}],["utils/utils",{"_index":416,"title":{},"body":{"classes/Token.html":{}}}],["valid",{"_index":302,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["value",{"_index":544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["values",{"_index":551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":480,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":536,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["wasfound",{"_index":549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["weather",{"_index":39,"title":{},"body":{"classes/About.html":{}}}],["whererow",{"_index":577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wherevalue",{"_index":578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["widget",{"_index":438,"title":{"classes/Widget.html":{}},"body":{"classes/Widget.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["widgetid",{"_index":567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["widgets",{"_index":45,"title":{},"body":{"classes/About.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["widgetsdb",{"_index":458,"title":{"classes/WidgetsDB.html":{}},"body":{"classes/WidgetsDB.html":{},"coverage.html":{}}}],["winrate",{"_index":247,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["wins",{"_index":244,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/About.html":{"url":"classes/About.html","title":"class - About","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  About\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/about/about.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/about/about.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport moment from \"moment\";\n\nclass About {\n  async get(req: express.Request, res: express.Response) {\n    let ip: string = req.ip;\n    ip = ip.split(':')[3];\n    console.log('ip == ', ip);\n\n    return res.status(200).json({\n      \"client\": {\n        \"host\": ip,\n      },\n      \"server\": {\n        \"current_time\": moment().unix(),\n        \"services\": [\n          {\n            \"name\": \"weather\",\n            \"display_name\": \"Weather\",\n            \"api_url\": \"http://api.openweathermap.org\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"widgets\": [\n              {\n                \"name\": \"city_temperature\",\n                \"display_name\": \"City temperature\",\n                \"description\": \"Display temperature for a city\",\n                \"params\": [\n                  {\n                    \"name\": \"city\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },\n              {\n                \"name\": \"city_weather\",\n                \"display_name\": \"City weather\",\n                \"description\": \"Display weather for a city\",\n                \"params\": [\n                  {\n                    \"name\": \"city\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"currency\",\n            \"display_name\": \"Currency Converter\",\n            \"api_url\": \"https://freecurrencyapi.net/\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"widgets\": [\n              {\n                \"name\": \"currency_converter\",\n                \"display_name\": \"Currency Converter\",\n                \"description\": \"Display the exchange rate of a currency\",\n                \"params\": [\n                  {\n                    \"name\": \"from\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"to\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"nasa\",\n            \"display_name\": \"NASA\",\n            \"api_url\": \"https://api.nasa.gov/\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"widgets\": [\n              {\n                \"name\": \"apod\",\n                \"display_name\": \"Astronomy Picture of the Day\",\n                \"description\": \"Display the Astronomy Picture of the Day\",\n                \"params\": [\n                  {\n                    \"name\": \"date\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },\n              {\n                \"name\": \"curiosity_image\",\n                \"display_name\": \"Curiosity Rover Image\",\n                \"description\": \"Display an image from a curiosity\",\n                \"params\": [\n                  {\n                    \"name\": \"date\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"camera\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"intra_epitech\",\n            \"display_name\": \"Intra Epitech\",\n            \"params\": [],\n            \"api_url\": \"https://intra.epitech.eu/admin/autolog\",\n            \"widgets\": [\n              {\n                \"name\": \"intra_epitech_profile\",\n                \"display_name\": \"Profile\",\n                \"description\": \"Display the profile of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_partners\",\n                \"display_name\": \"Partners\",\n                \"description\": \"Display the partners of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_notifications\",\n                \"display_name\": \"Notifications\",\n                \"description\": \"Display the notifications of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_grades\",\n                \"display_name\": \"Grades\",\n                \"description\": \"Display the grades of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"epitech_doors\",\n            \"display_name\": \"Epitech Doors\",\n            \"params\": [\n              {\n                \"name\": \"intra_autologin\",\n                \"type\": \"string\",\n              }\n            ],\n            \"api_url\": \"https://intra.epitech.eu/admin/autolog\",\n            \"widgets\": [\n              {\n                \"name\": \"epitech_doors_open_door\",\n                \"display_name\": \"Open door\",\n                \"description\": \"Open the door in epitech montpellier\",\n                \"params\": [\n                  {\n                    \"name\": \"door_name\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"intra_autologin\",\n                    \"type\": \"string\",\n                  }\n                ],\n              }\n            ]\n          },{\n            \"name\": \"office\",\n            \"display_name\": \"Office 365\",\n            \"params\": [],\n            \"api_url\": \"https://graph.microsoft.com/v1.0/me/\",\n            \"widgets\": [\n              {\n                \"name\": \"office_calendar_events\",\n                \"display_name\": \"Calendar events\",\n                \"description\": \"Display the calendar events of an office user\",\n                \"params\": [\n                  {\n                    \"name\": \"start_date\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"end_date\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"office_token\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"league_of_legends\",\n            \"display_name\": \"League of Legends\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"api_url\": \"\",\n            \"widgets\": [\n              {\n                \"name\": \"league_of_legends_summoner_profile\",\n                \"display_name\": \"Summoner profile\",\n                \"description\": \"Display the summoner profile of a league of legends user\",\n                \"params\": [\n                  {\n                    \"name\": \"summoner_name\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"region\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"gmail\",\n            \"display_name\": \"Gmail\",\n            \"params\": [\n              {\n                \"name\": \"google_api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"api_url\": \"google\",\n            \"widgets\": [\n              {\n                \"name\": \"gmail_inbox\",\n                \"display_name\": \"Inbox\",\n                \"description\": \"Display the inbox of a gmail user\",\n                \"params\": [\n                  {\n                    \"name\": \"max_results\",\n                    \"type\": \"number\",\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    });\n  }\n};\n\nmodule.exports = new About();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Authentication.html":{"url":"classes/Authentication.html","title":"class - Authentication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Authentication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/OAuth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/OAuth.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport { handleOAuthUsers } from './authActions';\n\nclass Authentication {\n    async post(req: express.Request, res: express.Response) {\n        return handleOAuthUsers(req, res);\n    }\n}\n\nmodule.exports = new Authentication();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Currency.html":{"url":"classes/Currency.html","title":"class - Currency","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Currency\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/currency.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getExchangeRate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getExchangeRate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getExchangeRate(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/currency.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Currency {\n    async getExchangeRate(req: express.Request, res: express.Response) {\n        try {\n            const { from, to, api_key } = req.body;\n            console.log(from, to);\n            const url: string = `https://freecurrencyapi.net/api/v2/latest?base_currency=${from}&apikey=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            let currency: number = response.data.data[to];\n            console.log('currency == ', currency);\n            return res.status(200).json({\n                \"base_currency\": from,\n                \"target_currency\": to,\n                \"rate\": currency\n            });\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Currency();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EpitechDoors.html":{"url":"classes/EpitechDoors.html","title":"class - EpitechDoors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EpitechDoors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/epitechDoors.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                openDoor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        openDoor\n                        \n                    \n                \n            \n            \n                \n                    \n                    openDoor(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/epitechDoors.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass EpitechDoors {\n    async openDoor(req: express.Request, res: express.Response) {\n        try {\n            const { intra_autologin, door_name } = req.body;\n            let autoLogin: string = intra_autologin;\n            let url: string = \"\";\n\n            if (autoLogin.startsWith(\"https://intra.epitech.eu/\") == false) {\n                autoLogin = `https://intra.epitech.eu/${intra_autologin}`;\n            }\n            console.log('autologin == ', autoLogin);\n            url = `https://epi-logue.eu/api/doors_open?login=${autoLogin}&door_name=${door_name}`;\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(response.status).json(response.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n};\n\nexport default new EpitechDoors();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Gmail.html":{"url":"classes/Gmail.html","title":"class - Gmail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Gmail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/gmail.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getLastFiveMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getLastFiveMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLastFiveMail(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/gmail.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Gmail {\n    async getLastFiveMail(req: express.Request, res: express.Response) {\n        try {\n            const { google_api_key, max_results } = req.body;\n            let mail: string = \"\";\n\n            let response: AxiosResponse =  await axios({\n                method: 'GET',\n                url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                headers: {\n                    'Authorization': `Bearer ${google_api_key}`\n                },\n            });\n            mail = response.data.email;\n            const url = `https://gmail.googleapis.com/gmail/v1/users/${mail}/messages?maxResults=${max_results}`;\n            let response2: AxiosResponse = await axios({\n                method: 'GET',\n                url: url,\n                headers: {\n                    'Authorization': `Bearer ${google_api_key}`\n                },\n            });\n            let messageIds: Array = [];\n            response2.data.messages.forEach((message: any) => {\n                messageIds.push(message.id);\n            });\n            let messages: Array = [];\n            for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IntraEpitech.html":{"url":"classes/IntraEpitech.html","title":"class - IntraEpitech","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IntraEpitech\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/intraEpitech.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getGrades\n                            \n                            \n                                    Async\n                                getNotifications\n                            \n                            \n                                    Async\n                                getPartners\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getGrades\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGrades(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNotifications(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPartners\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPartners(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\nimport { IntraEpitechUser } from '../../database/interfaces';\n\nclass IntraEpitech {\n    async getProfile(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n            url = `https://intra.epitech.eu/${autoLogin}/user?format=json`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            const user: IntraEpitechUser = {\n                login: response.data['login'],\n                firstname: response.data['firstname'],\n                lastname: response.data['lastname'],\n                profilePicture: response.data['picture'],\n                promo: response.data['promo'],\n                location: response.data['groups'][0]['name'],\n                semesterCode: response.data['semester_code'],\n                credits: response.data['credits'],\n                gpa: response.data['gpa'][0]['gpa'],\n            };\n            return res.status(200).json(user);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getPartners(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n    \n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n    \n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: `https://intra.epitech.eu/${autoLogin}/user?format=json`\n            });\n            const login: string = response.data['login'];\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/binome/?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response2.data['binomes']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getNotifications(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;            \n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: `https://intra.epitech.eu/${autoLogin}/user?format=json`\n            });\n            const login: string = response.data['login'];\n\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/notification/message?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(200).json(response2.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getGrades(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                autoLogin = autoLogin.substring(25);\n            }\n            url = `https://intra.epitech.eu/${autoLogin}/user?format=json`;\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            const login: string = response.data['login'];\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/notes?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(200).json(response2.data['modules']);            \n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new IntraEpitech();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IntraEpitechUser.html":{"url":"interfaces/IntraEpitechUser.html","title":"interface - IntraEpitechUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IntraEpitechUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            credits\n                                        \n                                \n                                \n                                        \n                                            firstname\n                                        \n                                \n                                \n                                        \n                                            gpa\n                                        \n                                \n                                \n                                        \n                                            lastname\n                                        \n                                \n                                \n                                        \n                                            location\n                                        \n                                \n                                \n                                        \n                                            login\n                                        \n                                \n                                \n                                        \n                                            profilePicture\n                                        \n                                \n                                \n                                        \n                                            promo\n                                        \n                                \n                                \n                                        \n                                            semesterCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        credits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        credits:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gpa\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gpa:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        location:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profilePicture\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profilePicture:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        promo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        promo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        semesterCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        semesterCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeagueOfLegends.html":{"url":"classes/LeagueOfLegends.html","title":"class - LeagueOfLegends","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeagueOfLegends\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/leagueoflegends.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/leagueoflegends.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import axios, { AxiosResponse } from 'axios';\nimport express from 'express';\nimport { LeagueOfLegendsProfileData, LeagueOfLegendsGameData } from '../../database/interfaces';\n\nclass LeagueOfLegends {\n    async getUserProfile(req: express.Request, res: express.Response) {\n        try {\n            const { api_key, summoner_name, region } = req.body;\n            let summoner_id: string = '';\n            let profileIconURL: string = '';\n            let summonerLevel: number = 0;\n            let summonerName: string = '';\n            let gameData: Array = [];\n            \n            const firstURL = `https://${region}.api.riotgames.com/lol/summoner/v4/summoners/by-name/${summoner_name}?api_key=${api_key}`;\n            \n            console.debug(\"firstURL: \", firstURL);\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: firstURL,\n            });\n            if (response.status === 200) {\n                summoner_id = response.data['id'];\n                profileIconURL = `https://ddragon.leagueoflegends.com/cdn/11.23.1/img/profileicon/${response.data['profileIconId']}.png`;\n                summonerLevel = response.data['summonerLevel'];\n                summonerName = response.data['name'];\n            }\n            const secondURL = `https://${region}.api.riotgames.com/lol/league/v4/entries/by-summoner/${summoner_id}?api_key=${api_key}`;\n            console.debug(\"secondURL: \", secondURL);\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: secondURL,\n            });\n            if (response2.status == 200) {\n                if (response2.data.length > 0) {\n                    gameData = response2.data.map((data: any) => {\n                        return {\n                            queueType: data.queueType,\n                            tier: data.tier,\n                            rank: data.rank,\n                            wins: data.wins,\n                            losses: data.losses,\n                            leaguePoints: data.leaguePoints,\n                            winRate: data.wins / (data.wins + data.losses),\n                        };\n                    });\n                    if (gameData.length == 1 && gameData[0].queueType == 'RANKED_SOLO_5x5') {\n                        gameData[1] = {\n                            queueType: 'RANKED_FLEX_SR',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        };\n                    }\n                    else if (gameData.length == 1 && gameData[0].queueType == 'RANKED_FLEX_SR') {\n                        gameData[1] = {\n                            queueType: 'RANKED_SOLO_5x5',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        };\n                    }\n                }\n                else {\n                    gameData = [\n                        {\n                            queueType: 'RANKED_FLEX_SR',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        },\n                        {\n                            queueType: 'RANKED_SOLO_5x5',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        },\n                    ];\n                }\n                console.debug(\"setting profile\");\n                let profile: LeagueOfLegendsProfileData = {\n                    summonerName,\n                    summonerLevel,\n                    profileIconURL,\n                    gameData,\n                };\n                console.debug(\"profile: \", profile);\n                return res.status(200).json(profile);\n            }\n            else {\n                return res.status(response2.status).json({\n                    error: 'Error getting user profile',\n                });\n            }\n        } catch (error) {\n            console.log(error);\n            res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new LeagueOfLegends();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LeagueOfLegendsGameData.html":{"url":"interfaces/LeagueOfLegendsGameData.html","title":"interface - LeagueOfLegendsGameData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LeagueOfLegendsGameData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            leaguePoints\n                                        \n                                \n                                \n                                        \n                                            losses\n                                        \n                                \n                                \n                                        \n                                            queueType\n                                        \n                                \n                                \n                                        \n                                            rank\n                                        \n                                \n                                \n                                        \n                                            tier\n                                        \n                                \n                                \n                                        \n                                            winRate\n                                        \n                                \n                                \n                                        \n                                            wins\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        leaguePoints\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leaguePoints:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        losses\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        losses:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queueType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queueType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rank\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rank:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tier\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tier:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        winRate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        winRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wins\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        wins:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LeagueOfLegendsProfileData.html":{"url":"interfaces/LeagueOfLegendsProfileData.html","title":"interface - LeagueOfLegendsProfileData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LeagueOfLegendsProfileData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            gameData\n                                        \n                                \n                                \n                                        \n                                            profileIconURL\n                                        \n                                \n                                \n                                        \n                                            summonerLevel\n                                        \n                                \n                                \n                                        \n                                            summonerName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        gameData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gameData:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileIconURL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profileIconURL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        summonerLevel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        summonerLevel:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        summonerName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        summonerName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Login.html":{"url":"classes/Login.html","title":"class - Login","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Login\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/login.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/login.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport { getUsers, updateInfos } from \"../../database/databaseActions\";\nimport { UserInformations } from \"../../database/interfaces\";\nimport jwt from 'jsonwebtoken';\nimport moment from \"moment\";\n\nclass Login {\n    async post(req: express.Request, res: express.Response) {\n        const { mail, password } = req.body;\n\n        if (!mail || !password) {\n            return res.status(400).json({\n                valid: false,\n                message: \"mail and password are required\"\n            });\n        }\n\n        const user: UserInformations = {\n            mail: mail,\n            google_mail: undefined,\n            google_token: undefined,\n            facebook_mail: undefined,\n            facebook_token: undefined,\n            apple_mail: undefined,\n            apple_token: undefined,\n            office_mail: undefined,\n            office_token: undefined,\n            username: undefined,\n            password: password\n        };\n\n        const expiresIn: number = Number(process.env.EXPIRE_TIME) || 60 * 60;\n        const payload = {\n            mail: mail\n        };\n        const newToken: string = jwt.sign(\n            payload,\n            process.env.JWT_SECRET,\n            { expiresIn: expiresIn }\n        );\n\n        await getUsers(user, async (err: any, result: any) => {\n            if (err) {\n                return res.status(500).json({\n                    valid: false,\n                    message: err\n                });\n            } else {\n                let _result = result;\n                if (result.length === 0) {\n                    return res.status(400).json({\n                        valid: false,\n                        message: \"mail or password is incorrect\"\n                    });\n                } else {\n                    _result['token'] = newToken;\n                    _result['token_created_at'] = moment().format('YYYY-MM-DD HH:mm:ss');\n                    await updateInfos(['token', 'token_created_at'], [newToken, moment().format('YYYY-MM-DD HH:mm:ss')], 'mail', mail, (err: any, result: any) => {\n                        if (err) {\n                            return res.status(500).json({\n                                valid: false,\n                                message: err\n                            });\n                        } else {\n                            return res.status(200).json({ error: false, message: \"user logged in\", token: newToken, expiresIn: expiresIn, result: _result });\n                        }\n                    });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Login();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Nasa.html":{"url":"classes/Nasa.html","title":"class - Nasa","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Nasa\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/nasa.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getNasaDayImage\n                            \n                            \n                                    Async\n                                getNasaRoverImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNasaDayImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNasaDayImage(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/nasa.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNasaRoverImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNasaRoverImage(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/nasa.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport axios, { AxiosResponse } from \"axios\";\n\nclass Nasa {\n    async getNasaDayImage(req: express.Request, res: express.Response) {\n        try {\n            const { date, api_key } = req.body;\n            // const apiKey: string = process.env.NASA_API_KEY;\n            const url = `https://api.nasa.gov/planetary/apod?api_key=${api_key}&date=${date}`;\n\n            let response: AxiosResponse = await axios({\n                method: \"get\",\n                url: url\n            });\n            return res.status(200).json(response.data);\n        } catch (error) {\n            // console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getNasaRoverImage(req: express.Request, res: express.Response) {\n        try {\n            const { date, camera, api_key } = req.body;\n            // const apiKey: string = process.env.NASA_API_KEY;\n            const url = `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=${date}&camera=${camera}&api_key=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: \"get\",\n                url: url\n            });\n            let data = response.data.photos;\n            let photo: any = data[0] ? data[0] : {};\n\n            return res.status(200).json(photo);\n        } catch (error) {\n            // console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Nasa();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Office.html":{"url":"classes/Office.html","title":"class - Office","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Office\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/office.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCalendarEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCalendarEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCalendarEvents(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/office.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Office {\n    async getCalendarEvents(req: express.Request, res: express.Response) {\n        try {\n            const { start_date, office_token, end_date } = req.body;\n            \n            const url = `https://graph.microsoft.com/v1.0/me/calendarview?startdatetime=${start_date}&enddatetime=${end_date}`;\n    \n            let response: AxiosResponse = await axios({\n                method: 'GET',\n                url,\n                headers: {\n                    'Authorization': `Bearer ${office_token}`\n                }\n            });\n            return res.status(200).json(response.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Office();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/profile/profile.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/profile/profile.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport { getRow, getUsers } from '../../database/databaseActions';\n\nclass Profile {\n    async get(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                console.log(\"heeeeeeeeeeeeeeeeeeeeere\");\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            console.log(\"heeeeeeeeeeeeeeeeeeeeere2\");\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n        await getRow('token', token, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                return res.status(500).json({ error: false, message: \"internal server error\" });\n            } else {\n                if (result.length === 0) {\n                    return res.status(404).json({ error: false, message: \"user not found\" });\n                } else {\n                    console.log(\"result == \", result);\n                    console.log(\"result[0] == \", result[0]);\n                    let rslt = result[0];\n                    let user = {\n                        mail: rslt['mail'],\n                        google_mail: rslt['google_mail'],\n                        facebook_mail: rslt['facebook_mail'],\n                        outlook_mail: rslt['outlook_mail'],\n                        apple_mail: rslt['apple_mail'],\n                        office_mail: rslt['office_mail'],\n                    };\n\n                    return res.status(200).json({ error: true, message: \"user found\", result: user });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Profile();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileUpdate.html":{"url":"classes/ProfileUpdate.html","title":"class - ProfileUpdate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileUpdate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/profile/profileUpdate.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/profile/profileUpdate.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { updateUserInformations } from \"./profileActions\";\n\nclass ProfileUpdate {\n    async patch(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                console.log(\"heeeeeeeeeeeeeeeeeeeeere\");\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            console.log(\"heeeeeeeeeeeeeeeeeeeeere2\");\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n        await updateUserInformations(req, res);\n    }\n}\n\nmodule.exports = new ProfileUpdate();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Register.html":{"url":"classes/Register.html","title":"class - Register","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Register\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/register.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/register.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\"\nimport { UserInformations } from \"../../database/interfaces\";\nimport { registerBasicUser } from \"./registerActions\";\n\nclass Register {\n    async post(req: express.Request, res: express.Response) {\n        const { mail, password } = req.body;\n\n        const infos: UserInformations = {\n            mail: mail,\n            google_mail: undefined,\n            google_token: undefined,\n            facebook_mail: undefined,\n            facebook_token: undefined,\n            apple_mail: undefined,\n            apple_token: undefined,\n            office_mail: undefined,\n            office_token: undefined,\n            username: undefined,\n            password: password,\n        };\n        let result = await registerBasicUser(infos);\n\n        if (result.error === true) {\n            return res.status(500).json({\n                error: true,\n                message: result.message,\n            });\n        }\n        if (result.error === false && result.message === \"user already exists\") {\n            return res.status(403).json({ error: true, message: result.message });\n        }\n        return res.status(200).json({ error: false, message: result.message, result: result.result });\n    }\n}\n\nmodule.exports = new Register();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Temperature.html":{"url":"classes/Temperature.html","title":"class - Temperature","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Temperature\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/temperature.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTemperature\n                            \n                            \n                                    Async\n                                getWeather\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTemperature\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTemperature(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/temperature.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getWeather\n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeather(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/temperature.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Temperature {\n    async getTemperature(req: express.Request, res: express.Response) {\n        try {\n            const { city, api_key } = req.body;\n            // const apikey: string = process.env.WEATHER_API_KEY;\n            const url: string = `http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response.data['main']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getWeather(req: express.Request, res: express.Response) {\n        try {\n            const { city, api_key } = req.body;\n            // const apikey: string = process.env.WEATHER_API_KEY;\n            const url: string = `http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response.data['weather']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n};\n\nexport default new Temperature();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Token.html":{"url":"classes/Token.html","title":"class - Token","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Token\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/token.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/token.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/token.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport moment from 'moment';\nimport { updateInfos } from '../../database/databaseActions';\nimport Utils from '../../utils/utils';\nimport { checkToken } from './tokenAction';\n\nclass Token {\n    async get(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                console.log(\"heeeeeeeeeeeeeeeeeeeeere\");\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            console.log(\"heeeeeeeeeeeeeeeeeeeeere2\");\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n        checkToken(token, (err: any, result: any) => {\n            if (err || result === [] || result === null || result === undefined || result.length === 0) {\n                console.debug(result);\n                return res.status(401).json({ valid: false, message: \"token invalid or not found\" });\n            } else {\n                let createdAt: moment.Moment = moment(result[0].token_created_at);\n                let now: moment.Moment = moment();\n                let diff: number = now.diff(createdAt, 'seconds');\n                if (diff  {\n            if (err) {\n                console.debug(err);\n                return res.status(500).json({ valid: false, message: \"internal server error\" });\n            } else {\n                if (result.affectedRows === 0) {\n                    return res.status(401).json({ valid: false, message: \"token invalid or not found\" });\n                } else {\n                    return res.status(200).json({ valid: true, message: \"token valid\", expiresIn: expiresIn, token: newToken, result: result.result });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Token();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserInformations.html":{"url":"interfaces/UserInformations.html","title":"interface - UserInformations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserInformations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apple_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            apple_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            facebook_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            facebook_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            google_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            google_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            office_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            office_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apple_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apple_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        apple_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apple_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        facebook_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        facebook_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        google_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        google_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        office_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        office_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        office_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        office_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Utils.html":{"url":"classes/Utils.html","title":"class - Utils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Utils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/utils.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRandomString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRandomString\n                        \n                    \n                \n            \n            \n                \ngetRandomString(length: number)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/utils.ts:2\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        class Utils {\n    getRandomString(length: number): string {\n        let text: string = \"\";\n        let possible: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!$&#@.\";\n        for (let i: number = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Widget.html":{"url":"classes/Widget.html","title":"class - Widget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Widget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/widget.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widget.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport Currency from './currency';\nimport Nasa from './nasa';\nimport Temperature from './temperature';\nimport IntraEpitech from './intraEpitech';\nimport Office from './office';\nimport leagueoflegends from './leagueoflegends';\nimport EpitechDoors from './epitechDoors';\nimport Gmail from './gmail';\n\nclass Widget {\n    async post(req: express.Request, res: express.Response) {\n        let valid: boolean = true;\n        const type: string = req.params.type;\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n\n        switch (type) {\n            case 'currency_converter':\n                return await Currency.getExchangeRate(req, res);\n            case 'city_temperature':\n                return await Temperature.getTemperature(req, res);\n            case 'city_weather':\n                return await Temperature.getWeather(req, res);\n            case 'apod':\n                return await Nasa.getNasaDayImage(req, res);\n            case 'curiosity_image':\n                return await Nasa.getNasaRoverImage(req, res);\n            case 'intra_epitech_profile':\n                return await IntraEpitech.getProfile(req, res);\n            case 'intra_epitech_partners':\n                return await IntraEpitech.getPartners(req, res);\n            case 'intra_epitech_notifications':\n                return await IntraEpitech.getNotifications(req, res);\n            case 'epitech_doors_open_door':\n                return await EpitechDoors.openDoor(req, res);\n            case 'intra_epitech_grades':\n                return await IntraEpitech.getGrades(req, res);\n            case 'office_calendar_events':\n                return await Office.getCalendarEvents(req, res);\n            case 'league_of_legends_summoner_profile':\n                return await leagueoflegends.getUserProfile(req, res);\n            case 'gmail_inbox':\n                return await Gmail.getLastFiveMail(req, res);\n            default:\n                return res.status(404).json({ error: true, message: \"widget not found\" });\n        }\n    }\n}\n\nmodule.exports = new Widget();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WidgetsDB.html":{"url":"classes/WidgetsDB.html","title":"class - WidgetsDB","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WidgetsDB\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/widgetsdb.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widgetsdb.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widgetsdb.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport { getWidgetsByUserId, getUserByToken, addWidget, updateWidget } from '../../database/databaseActions';\nimport jwt from 'jsonwebtoken';\n\nclass WidgetsDB {\n    async get(req: express.Request, res: express.Response) {\n        try {\n            let token: string = req.headers.authorization;\n\n            if (!token) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token not found\"\n                });\n            }\n            token = token.split(\" \")[1];\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n\n            if (!decoded) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token invalid\"\n                });\n            }\n            await getUserByToken(token, async(err: any, user: any) => {\n                if (err) {\n                    console.debug(err);\n                    return res.status(500).json({\n                        valid: false,\n                        message: \"error\"\n                    });\n                } else {\n                    if (user.length === 0) {\n                        return res.status(404).json({\n                            valid: false,\n                            message: \"user not found\"\n                        });\n                    } else {\n                        let userId = user[0]['id'];\n                        await getWidgetsByUserId(userId, (err: any, result: any) => {\n                            if (err) {\n                                console.debug(err);\n                                return res.status(500).json({\n                                    valid: false,\n                                    message: \"error\"\n                                });\n                            }\n                            return res.status(200).json({\n                                valid: true,\n                                message: \"success\",\n                                data: result\n                            });\n                        });\n                    }\n                }\n            });\n        } catch (error) {\n            console.log(error);\n            return res.status(401).json({\n                valid: false,\n                message: \"token invalid\"\n            });\n        }\n    }\n\n    async patch(req: express.Request, res: express.Response) {\n        try {\n            let token: string = req.headers.authorization;\n            const { widgets } = req.body;            \n\n            if (!token) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token not found\"\n                });\n            }\n            token = token.split(\" \")[1];\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n\n            if (!decoded) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token invalid\"\n                });\n            }\n            await getUserByToken(token, async(err: any, user: any) => {\n                if (err) {\n                    console.debug(err);\n                    return res.status(500).json({\n                        valid: false,\n                        message: \"error\"\n                    });\n                } else {\n                    if (user.length === 0) {\n                        return res.status(404).json({\n                            valid: false,\n                            message: \"user not found\"\n                        });\n                    } else {\n                        let userId = user[0]['id'];\n                        await getWidgetsByUserId(userId, async(err: any, result: any) => {\n                            if (err) {\n                                console.debug(err);\n                                return res.status(500).json({\n                                    valid: false,\n                                    message: \"error\"\n                                });\n                            }\n                            if (result.length === 0) {\n                                await addWidget(userId, widgets, (err: any, result: any) => {\n                                    if (err) {\n                                        console.debug(err);\n                                        return res.status(500).json({\n                                            valid: false,\n                                            message: \"error\"\n                                        });\n                                    }\n                                    return res.status(200).json({\n                                        valid: true,\n                                        message: \"success\",\n                                        data: result\n                                    });\n                                });\n                            }\n                            else {\n                                await updateWidget(userId, widgets, (err: any, result: any) => {\n                                    if (err) {\n                                        console.debug(err);\n                                        return res.status(500).json({\n                                            valid: false,\n                                            message: \"error\"\n                                        });\n                                    }\n                                    return res.status(200).json({\n                                        valid: true,\n                                        message: \"success\",\n                                        data: result\n                                    });\n                                });\n                            }\n                        });\n                    }\n                }\n            }\n        )}\n        catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                valid: false,\n                message: \"error\"\n            });\n        }\n    }\n};\n\nmodule.exports = new WidgetsDB();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/database/database.ts\n            \n            variable\n            db\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            addUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            addWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            deleteWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getRow\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getUserByToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getWidgetsByUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateInfos\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateUserAuthToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            IntraEpitechUser\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            LeagueOfLegendsGameData\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            LeagueOfLegendsProfileData\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            UserInformations\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            app\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            server\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/request_handler.ts\n            \n            function\n            requestHandler\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/request_handler.ts\n            \n            variable\n            TOKEN_WL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes.ts\n            \n            function\n            addRoute\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/about/about.ts\n            \n            class\n            About\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/OAuth.ts\n            \n            class\n            Authentication\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/authActions.ts\n            \n            variable\n            handleOAuthUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/authActions.ts\n            \n            variable\n            handleOAuthUsersAction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/login.ts\n            \n            class\n            Login\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/register.ts\n            \n            class\n            Register\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/registerActions.ts\n            \n            variable\n            registerBasicUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/token.ts\n            \n            class\n            Token\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/auth/tokenAction.ts\n            \n            variable\n            checkToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/profile/profile.ts\n            \n            class\n            Profile\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/profile/profileActions.ts\n            \n            variable\n            updateUserInformations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/profile/profileUpdate.ts\n            \n            class\n            ProfileUpdate\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/currency.ts\n            \n            class\n            Currency\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/epitechDoors.ts\n            \n            class\n            EpitechDoors\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/gmail.ts\n            \n            class\n            Gmail\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/intraEpitech.ts\n            \n            class\n            IntraEpitech\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/routes/widgets/leagueoflegends.ts\n            \n            class\n            LeagueOfLegends\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/nasa.ts\n            \n            class\n            Nasa\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/widgets/office.ts\n            \n            class\n            Office\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/temperature.ts\n            \n            class\n            Temperature\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/widgets/widget.ts\n            \n            class\n            Widget\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/widgetsdb.ts\n            \n            class\n            WidgetsDB\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/utils.ts\n            \n            class\n            Utils\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            cors : ^2.8.5\n        \n            dotenv : ^10.0.0\n        \n            express : ^4.17.1\n        \n            jsonwebtoken : ^8.5.1\n        \n            moment : ^2.29.1\n        \n            mysql2 : ^2.3.3-rc.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addRoute   (src/.../routes.ts)\n                        \n                        \n                            requestHandler   (src/.../request_handler.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addRoute\n                        \n                    \n                \n            \n            \n                \naddRoute(endpoint: string, service: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    service\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/request_handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        requestHandler\n                        \n                    \n                \n            \n            \n                \nrequestHandler(req, res, next)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    18 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addUsers   (src/.../databaseActions.ts)\n                        \n                        \n                            addWidget   (src/.../databaseActions.ts)\n                        \n                        \n                            app   (src/.../index.ts)\n                        \n                        \n                            checkToken   (src/.../tokenAction.ts)\n                        \n                        \n                            db   (src/.../database.ts)\n                        \n                        \n                            deleteWidget   (src/.../databaseActions.ts)\n                        \n                        \n                            getRow   (src/.../databaseActions.ts)\n                        \n                        \n                            getUserByToken   (src/.../databaseActions.ts)\n                        \n                        \n                            getUsers   (src/.../databaseActions.ts)\n                        \n                        \n                            getWidgetsByUserId   (src/.../databaseActions.ts)\n                        \n                        \n                            handleOAuthUsers   (src/.../authActions.ts)\n                        \n                        \n                            handleOAuthUsersAction   (src/.../authActions.ts)\n                        \n                        \n                            registerBasicUser   (src/.../registerActions.ts)\n                        \n                        \n                            routes   (src/.../routes.ts)\n                        \n                        \n                            server   (src/.../index.ts)\n                        \n                        \n                            TOKEN_WL   (src/.../request_handler.ts)\n                        \n                        \n                            updateInfos   (src/.../databaseActions.ts)\n                        \n                        \n                            updateUserAuthToken   (src/.../databaseActions.ts)\n                        \n                        \n                            updateUserInformations   (src/.../profileActions.ts)\n                        \n                        \n                            updateWidget   (src/.../databaseActions.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/databaseActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, callback: Function) => {\n    let query: string = \"INSERT into users (\";\n    let wasFound: boolean = false;\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"mail, password) VALUES ('\"\n                + infos.mail + \"', '\" + infos.password + \"');\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"google_mail, google_token) VALUES ('\"\n                + infos.google_mail + \"', '\" + infos.google_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"facebook_mail, facebook_token) VALUES ('\"\n                + infos.facebook_mail + \"', '\" + infos.facebook_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"apple_mail, apple_token) VALUES ('\"\n                + infos.apple_mail + \"', '\" + infos.apple_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"office_mail, office_token) VALUES ('\"\n                + infos.office_mail + \"', '\" + infos.office_token + \"');\";\n            wasFound = true;\n        }\n\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widget: string, callback: Function) => {\n    let query: string = \"INSERT INTO widgets (user_id, data) VALUES ('\" + userId + \"', '\" + JSON.stringify(widget) + \"');\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widgetId: string, callback: Function) => {\n    let query: string = \"DELETE FROM widgets WHERE user_id = '\" + userId + \"' AND id = '\" + widgetId + \"';\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRow\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (row: string, value: string, callback: Function) => {\n    let query: string = \"SELECT * FROM users WHERE \" + row + \" = '\" + value + \"' LIMIT 1;\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserByToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (token: string, callback: Function) => {\n    let query: string = \"SELECT * FROM users WHERE token = '\" + token + \"';\";\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(\"[getUserByToken] err \", err);\n                callback(err);\n            } else {\n                console.debug(\"[getUserByToken] success \", result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, callback: Function) => {\n    let wasFound: boolean = false;\n    let query: string = \"SELECT * FROM users WHERE \";\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"mail = '\" + infos.mail + \"' AND password = '\" + infos.password + \"';\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"google_mail = '\" + infos.google_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"facebook_mail = '\" + infos.facebook_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"apple_mail = '\" + infos.apple_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"office_mail = '\" + infos.office_mail + \"';\";\n            wasFound = true;\n        }\n\n        console.debug(\"query == \", query);\n\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(\"[getUser] err \", err);\n                callback(err);\n            } else {\n                console.debug(\"[getUser] success \", result);\n                callback(null, result);\n            }\n        });\n\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getWidgetsByUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, callback: Function) => {\n    let query: string = \"SELECT * FROM widgets WHERE user_id = '\" + userId + \"';\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateInfos\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n    rows: Array, newValues: Array,\n    whereRow: string, whereValue: string, callback: Function) => {\n    let query: string = 'UPDATE users SET ';\n\n    for (let i = 0; i  {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n            \n                \n                    updates a row in the users table\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserAuthToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, jwtToken: string, callback: Function) => {\n    let query: string = \"UPDATE users SET \";\n    let wasFound: boolean = false;\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE mail = '\" + infos.mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE google_mail = '\" + infos.google_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE facebook_mail = '\" + infos.facebook_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE apple_mail = '\" + infos.apple_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE office_mail = '\" + infos.office_mail + \"';\";\n            wasFound = true;\n        }\n\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err || result.affectedRows === 0) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widget: string, callback: Function) => {\n    let query: string = \"UPDATE widgets SET data = '\" + widget + \"' WHERE user_id = '\" + userId + \"';\";\n\n    try {\n        // console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n\n    src/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        app\n                        \n                    \n                \n            \n                \n                    \n                        Default value : express()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"http\").Server(app)\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/tokenAction.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        checkToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (token: string, callback: Function) => {\n    const queryString: string = \"SELECT * FROM users WHERE token = '\" + token + \"' LIMIT 1;\";\n    db.query(queryString, (err: any, result: any) => {\n        if (err) {\n            callback(err);\n        } else {\n            console.log(\"res == \", result);\n            callback(null, result);\n        }\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/database/database.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mysql.createConnection({\n    host: process.env.MY_SQL_HOST,\n    user: process.env.MY_SQL_USER,\n    password: process.env.MY_SQL_PASSWORD,\n    database: process.env.MY_SQL_DATABASE,\n})\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/authActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleOAuthUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (req: express.Request, res: express.Response) => {\n    try {\n        const type: string = req.params.type;\n        const { access_token } = req.body;\n        let user: { type: string, userJson: any } = { type: '', userJson: {} };\n        let response: AxiosResponse;\n\n        switch (type) {\n            case 'google_user':\n                console.log('bearer token == ', access_token);\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.debug(\"response == \", response.data);\n                let googleUser = response.data;\n                user = { type: 'google_user', userJson: googleUser };\n                break;\n            case 'facebook_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.facebook.com/me/?fields=id,name,email',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let facebookUser = response.data;\n                user = { type: 'facebook_user', userJson: facebookUser };\n                break;\n            case 'office_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.microsoft.com/v1.0/me',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.log(\"response == \", response.data);\n                let officeUser = response.data;\n                user = { type: 'office_user', userJson: officeUser };\n                break;\n            default:\n                return res.status(400).json({ message: 'Bad request' });\n        }\n\n        const infos: UserInformations = {\n            mail: undefined,\n            google_mail: (user.type === 'google_user') ? user.userJson.email : undefined,\n            google_token: (user.type === 'google_user') ? access_token : undefined,\n            facebook_mail: (user.type === 'facebook_user') ? user.userJson.email : undefined,\n            facebook_token: (user.type === 'facebook_user') ? access_token : undefined,\n            apple_mail: (user.type === 'apple_user') ? user.userJson.email : undefined,\n            apple_token: (user.type === 'apple_user') ? access_token : undefined,\n            office_mail: (user.type === 'office_user') ? user.userJson.mail : undefined,\n            office_token: (user.type === 'office_user') ? access_token : undefined,\n            username: undefined,\n            password: undefined,\n        };\n\n        const result = await handleOAuthUsersAction(infos);\n        if (result.error === true) {\n            return res.status(500).json({\n                error: result.error,\n                message: result.message,\n            });\n        }\n        if (result.message === \"user created\") {\n            return res.status(200).json({ error: false, message: \"user created\", result: result.result });\n        }\n        if (result.message === \"user already exists\") {\n            const expiresIn: number = Number(process.env.EXPIRE_TIME) || 60 * 60;\n            const payload = {\n                mail: (user.type === 'google_user') ? user.userJson.email : (user.type === 'facebook_user') ? user.userJson.email : (user.type === 'apple_user') ? user.userJson.email : (user.type === 'office_user') ? user.userJson.email : \"none\",\n            };\n            const token: string = jwt.sign(\n                payload,\n                process.env.JWT_SECRET,\n                { expiresIn: expiresIn }\n            );\n            await updateUserAuthToken(infos, token, (err: any, result: any) => {\n                if (err) {\n                    console.debug('[handleOAuthUsersAction] | error[updateUserAuthToken] = ', err);\n                } else {\n                    console.debug('[handleOAuthUsersAction] | result[updateUserAuthToken] = ', result);\n                }\n            });\n            return res.status(200).json({ error: false, message: \"user logged in\", expiresIn: expiresIn, token: token, result: result.result });\n        }\n    } catch (err) {\n        console.debug('[handleOAuthUsersAction] | error = ', err);\n        return res.status(500).json({ error: true, message: \"server error\" });\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleOAuthUsersAction\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations): Promise => {\n    return new Promise(async (resolve, reject) => {\n        await getUsers(infos, async (err: any, result: any) => {\n            if (err) {\n                console.debug('[handleOAuthUsersAction] | error[getUsers] = ', err);\n                await addUsers(infos, (err: any, result: any) => {\n                    if (err) {\n                        console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                        return resolve({ error: true, message: \"internal error\" });\n                    } else {\n                        console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                        return resolve({ error: false, message: \"user created\", result: result });\n                    }\n                });\n            } else {\n                console.debug('[handleOAuthUsersAction] | result[getUsers] = ', result);\n                if (result.length === 0) {\n                    await addUsers(infos, (err: any, result: any) => {\n                        if (err) {\n                            console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                            return resolve({ error: true, message: \"internal error\" });\n                        } else {\n                            console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                            return resolve({ error: false, message: \"user created\", result: result });\n                        }\n                    });\n                } else {\n                    return resolve({ error: false, message: \"user already exists\", result: result });\n                }\n            }\n        });\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/registerActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        registerBasicUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations): Promise => {\n    return new Promise(async (resolve, reject) => {\n        await getUsers(infos, async (err: any, result: any) => {\n            if (err) {\n                console.debug('[handleOAuthUsersAction] | error[getUsers] = ', err);\n                await addUsers(infos, (err: any, result: any) => {\n                    if (err) {\n                        console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                        return resolve({ error: true, message: \"internal error\" });\n                    } else {\n                        console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                        return resolve({ error: false, message: \"user created\", result: result });\n                    }\n                });\n            } else {\n                console.debug('[handleOAuthUsersAction] | result[getUsers] = ', result);\n                if (result.length === 0) {\n                    await addUsers(infos, (err: any, result: any) => {\n                        if (err) {\n                            console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                            return resolve({ error: true, message: \"internal error\" });\n                        } else {\n                            console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                            return resolve({ error: false, message: \"user created\", result: result });\n                        }\n                    });\n                } else {\n                    return resolve({ error: false, message: \"user already exists\", result: result });\n                }\n            }\n        });\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        routes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n\n\n        \n    \n\n    src/request_handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TOKEN_WL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(register|login)/\n                    \n                \n\n\n        \n    \n\n    src/routes/profile/profileActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        updateUserInformations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (req: express.Request, res: express.Response) => {\n    try {\n        const type: string = req.params.type;\n        const { access_token, existingInformation, existingInformationType } = req.body;\n        let response: AxiosResponse;\n        let user: { type: string, userJson: any } = { type: '', userJson: {} };\n\n        switch (type) {\n            case 'google_user':\n                console.log('bearer token == ', access_token);\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.debug(\"response == \", response.data);\n                let googleUser = response.data;\n                user = { type: 'google_user', userJson: googleUser };\n                break;\n            case 'facebook_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.facebook.com/me/?fields=id,name,email',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let facebookUser = response.data;\n                user = { type: 'facebook_user', userJson: facebookUser };\n                break;\n            case 'office_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.microsoft.com/v1.0/me',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.log(\"response == \", response.data);\n                let officeUser = response.data;\n                user = { type: 'office_user', userJson: officeUser };\n                break;\n            case 'plain_user':\n                let plainUser = {\n                    mail: req.body.mail,\n                    password: req.body.password,\n                };\n                user = { type: 'plain_user', userJson: plainUser };\n                break;\n            default:\n                return res.status(400).json({ message: 'Bad request' });\n        };\n\n        if (user.type === 'google_user') {\n            await updateInfos(['google_mail', 'google_token'], [user.userJson.email, access_token], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n        if (user.type === 'office_user') {\n            await updateInfos(['office_mail', 'office_token'], [user.userJson.email, access_token], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n        if (user.type === 'facebook_user') {\n            await updateInfos(['facebook_mail', 'facebook_token'], [user.userJson.email, access_token], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n        if (user.type === 'plain_user') {\n            await updateInfos(['mail', 'password'], [user.userJson.mail, user.userJson.password], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n    } catch (error) {\n        console.error(error);\n        return res.status(500).json({ message: 'server error' });\n    }\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
