var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/About.html",[0,0.243]],["body/classes/About.html",[0,0.137,1,0.297,2,0.189,3,0.189,4,0.157,5,1.731,6,0.096,7,0.508,8,0.612,9,1.976,10,0.612,11,0.54,12,0.612,13,0.337,14,2.097,15,0.297,16,0.039,17,0.871,18,0.271,19,0.259,20,0.297,21,0.337,22,0.379,23,0.572,24,0.448,25,1.976,26,4.243,27,0.633,28,2.097,29,2.097,30,2.097,31,0.337,32,0.854,33,2.097,34,1.731,35,0.578,36,2.097,37,2.097,38,2.097,39,4.243,40,5.806,41,4.969,42,2.097,43,5.806,44,2.532,45,3.531,46,1.731,47,3.952,48,1.759,49,5.492,50,5.419,51,1.731,52,2.359,53,3.164,54,2.097,55,1.731,56,2.097,57,1.731,58,1.759,59,2.097,60,1.731,61,3.164,62,3.164,63,3.164,64,2.612,65,1.731,66,3.164,67,2.097,68,3.164,69,1.731,70,2.097,71,4.554,72,4.969,73,3.164,74,1.731,75,2.359,76,1.95,77,3.015,78,1.731,79,3.164,80,1.731,81,3.164,82,1.731,83,3.164,84,2.097,85,2.097,86,3.164,87,1.731,88,3.164,89,3.164,90,2.097,91,1.731,92,2.119,93,2.097,94,1.731,95,1.731,96,3.164,97,3.164,98,1.731,99,1.731,100,0.775,101,2.097,102,3.164,103,3.164,104,1.731,105,3.164,106,1.731,107,1.731,108,0.775,109,0.297,110,0.019,111,0.019]],["title/classes/Authentication.html",[0,0.195,112,2.11]],["body/classes/Authentication.html",[0,0.276,1,0.597,2,0.38,3,0.38,4,0.315,6,0.192,7,0.818,8,0.879,10,0.879,11,0.805,12,0.879,13,0.677,15,0.597,16,0.038,17,0.597,18,0.192,19,0.521,20,0.597,21,0.677,22,0.761,23,0.92,24,0.721,31,0.677,108,1.556,109,0.597,110,0.031,111,0.031,112,3.89,113,3.478,114,2.833,115,2.833,116,4.214,117,2.994,118,4.214,119,4.214]],["title/classes/Currency.html",[0,0.195,52,1.652]],["body/classes/Currency.html",[0,0.247,1,0.535,2,0.341,3,0.341,4,0.282,6,0.172,7,0.764,8,0.837,10,0.837,11,0.738,12,0.837,13,0.606,15,0.535,16,0.039,17,0.535,18,0.172,19,0.467,20,0.535,21,0.606,22,0.682,23,0.86,24,0.674,27,0.402,31,0.764,32,1.538,35,1.04,44,2.099,52,3.204,57,3.117,109,0.535,110,0.029,111,0.029,120,3.117,121,4.76,122,4.76,123,3.776,124,2.123,125,1.939,126,0.941,127,0.962,128,1.148,129,3.776,130,2.123,131,3.776,132,1.538,133,0.849,134,1.538,135,1.265,136,3.776,137,3.776,138,3.776,139,3.776,140,0.941,141,1.053,142,1.538,143,0.941,144,1.265,145,1.148,146,1.394]],["title/classes/EpitechDoors.html",[0,0.195,147,1.855]],["body/classes/EpitechDoors.html",[0,0.244,1,0.528,2,0.336,3,0.336,4,0.279,6,0.17,7,0.758,8,0.832,10,0.832,11,0.734,12,0.832,13,0.599,15,0.528,16,0.039,17,0.528,18,0.17,19,0.461,20,0.528,21,0.599,22,0.674,23,0.853,24,0.669,27,0.503,31,0.758,35,1.027,77,3.994,91,3.077,109,0.528,110,0.029,111,0.029,124,2.111,125,1.923,126,0.929,127,0.753,128,1.134,130,2.219,132,1.519,133,0.838,134,1.519,140,0.929,141,1.047,142,1.519,143,0.929,144,1.249,145,1.134,146,1.377,147,3.237,148,3.077,149,4.722,150,4.722,151,3.728,152,3.077,153,1.377,154,3.728,155,3.728,156,3.728,157,3.728,158,3.728]],["title/classes/IntraEpitech.html",[0,0.195,159,1.855]],["body/classes/IntraEpitech.html",[0,0.148,1,0.32,2,0.204,3,0.204,4,0.169,6,0.103,7,0.538,8,0.896,10,0.896,11,0.79,12,0.896,13,0.708,15,0.624,16,0.039,17,0.624,18,0.201,19,0.545,20,0.624,21,0.708,22,0.796,23,0.72,24,0.474,27,0.587,31,0.84,35,1.214,76,0.922,77,4.17,109,0.32,110,0.021,111,0.021,124,2.176,125,2.131,126,1.098,127,1.057,128,1.34,130,2.411,132,1.795,133,1.146,134,2.076,140,1.098,141,1.128,142,1.795,143,1.098,144,1.477,145,0.688,146,0.836,152,3.637,159,2.49,160,1.868,161,3.349,162,3.349,163,3.349,164,3.349,165,3.349,166,2.263,167,3.349,168,2.263,169,3.349,170,2.263,171,3.349,172,2.263,173,1.507,174,1.413,175,4.406,176,4.406,177,1.795,178,4.406,179,1.258,180,2.263,181,1.258,182,2.263,183,1.258,184,2.263,185,1.258,186,2.263,187,1.258,188,2.263,189,1.258,190,2.263,191,1.258,192,2.263,193,1.258,194,2.263,195,2.263,196,2.263,197,3.291,198,2.263,199,2.263,200,2.263,201,2.263,202,2.263]],["title/interfaces/IntraEpitechUser.html",[173,1.337,203,1.097]],["body/interfaces/IntraEpitechUser.html",[2,0.309,3,0.309,4,0.256,6,0.156,16,0.038,18,0.268,27,0.67,100,1.266,110,0.028,111,0.028,135,1.998,145,1.605,173,2.013,177,2.15,179,2.935,181,2.935,183,2.935,185,2.935,187,2.935,189,2.935,191,2.935,193,2.935,203,1.95,204,1.905,205,1.905,206,2.794,207,1.266,208,1.396,209,1.396,210,1.542,211,1.396,212,1.542,213,1.396,214,1.542,215,1.396,216,1.542,217,1.542,218,1.542,219,1.905,220,1.905,221,1.905,222,1.905,223,1.905,224,1.905,225,1.905,226,1.542,227,1.905,228,1.905,229,1.905,230,1.905,231,1.71]],["title/classes/LeagueOfLegends.html",[0,0.195,232,1.855]],["body/classes/LeagueOfLegends.html",[0,0.173,1,0.374,2,0.238,3,0.238,4,0.197,6,0.12,7,0.601,8,0.699,10,0.699,11,0.616,12,0.699,13,0.424,15,0.374,16,0.039,17,0.374,18,0.12,19,0.326,20,0.374,21,0.424,22,0.477,23,0.786,24,0.53,27,0.463,31,0.699,35,0.727,44,1.467,75,2.633,76,1.075,106,2.178,107,2.178,109,0.374,110,0.023,111,0.023,124,1.928,125,1.772,126,0.658,127,0.879,128,0.802,130,1.525,132,1.075,133,0.842,134,1.525,135,0.884,140,0.658,141,1.01,142,1.075,143,0.658,144,0.884,145,0.802,146,0.975,174,1.648,197,2.178,218,1.188,219,2.78,220,2.78,221,2.78,222,2.78,223,2.78,224,2.78,225,2.78,226,1.685,227,2.419,228,2.419,229,2.419,230,2.633,231,1.317,232,2.717,233,2.178,234,3.743,235,3.743,236,2.639,237,3.743,238,2.428,239,4.35,240,2.639,241,2.639,242,2.639,243,2.639,244,3.743,245,2.639,246,2.639,247,2.639,248,2.639,249,4.35,250,2.639,251,2.639,252,2.639,253,2.639,254,2.639,255,2.639,256,2.639,257,2.639,258,2.639,259,4.35,260,3.743,261,2.639,262,3.743,263,1.685,264,3.743,265,4.35,266,3.743,267,4.35,268,5.457,269,2.639,270,2.639,271,2.639,272,2.639,273,2.639]],["title/interfaces/LeagueOfLegendsGameData.html",[203,1.097,218,1.337]],["body/interfaces/LeagueOfLegendsGameData.html",[2,0.318,3,0.318,4,0.263,6,0.161,16,0.038,18,0.263,27,0.667,100,1.301,110,0.028,111,0.028,135,2.045,145,1.622,173,1.585,177,1.434,179,1.958,181,1.958,183,1.958,185,1.958,187,1.958,189,1.958,191,1.958,193,1.958,203,1.97,204,1.958,205,1.958,206,2.844,207,1.301,208,1.434,209,1.434,210,1.585,211,1.434,212,1.585,213,1.434,214,1.585,215,1.434,216,1.585,217,1.585,218,2.049,219,2.966,220,2.966,221,2.966,222,2.966,223,2.966,224,2.966,225,2.966,226,1.585,227,1.958,228,1.958,229,1.958,230,1.958,231,1.757]],["title/interfaces/LeagueOfLegendsProfileData.html",[203,1.097,226,1.337]],["body/interfaces/LeagueOfLegendsProfileData.html",[2,0.332,3,0.332,4,0.275,6,0.168,16,0.038,18,0.247,27,0.667,100,1.357,110,0.029,111,0.029,135,1.991,145,1.648,173,1.654,177,1.497,179,2.043,181,2.043,183,2.043,185,2.043,187,2.043,189,2.043,191,2.043,193,2.043,203,2.002,204,2.043,205,2.043,206,2.922,207,1.357,208,1.497,209,1.497,210,1.654,211,1.497,212,1.654,213,1.497,214,1.654,215,1.497,216,1.654,217,1.654,218,1.654,219,2.043,220,2.043,221,2.043,222,2.043,223,2.043,224,2.043,225,2.043,226,2.106,227,3.014,228,3.014,229,3.014,230,3.014,231,2.569]],["title/classes/Login.html",[0,0.195,177,1.21]],["body/classes/Login.html",[0,0.195,1,0.422,2,0.269,3,0.269,4,0.223,6,0.136,7,0.654,8,0.801,10,0.745,11,0.657,12,0.745,13,0.478,15,0.422,16,0.039,17,0.422,18,0.136,19,0.368,20,0.422,21,0.478,22,0.538,23,0.944,24,0.577,25,2.544,27,0.317,31,0.839,32,1.213,76,1.659,100,1.1,108,1.1,109,0.422,110,0.025,111,0.025,114,2.265,115,2.265,127,1.056,128,0.906,133,0.916,135,0.998,141,0.602,143,1.015,153,1.93,174,1.861,177,1.891,207,1.504,208,2.35,209,1.213,210,1.341,211,1.213,212,1.341,213,1.213,214,1.341,215,1.213,216,1.341,217,2.428,238,1.213,274,2.459,275,2.979,276,1.861,277,1.861,278,1.861,279,1.486,280,1.341,281,3.362,282,2.49,283,2.128,284,2.979,285,3.562,286,3.712,287,2.459,288,3.362,289,3.362,290,4.119,291,2.459,292,1.341,293,2.979,294,3,295,2.49,296,4.073,297,1.657,298,2.979,299,2.979,300,2.979,301,3.362,302,3.362,303,3.362,304,3.362,305,2.979,306,2.459,307,2.459,308,1.1]],["title/classes/Nasa.html",[0,0.195,58,1.652]],["body/classes/Nasa.html",[0,0.213,1,0.46,2,0.293,3,0.293,4,0.243,6,0.148,7,0.694,8,0.889,10,0.889,11,0.784,12,0.889,13,0.694,15,0.612,16,0.039,17,0.612,18,0.197,19,0.534,20,0.612,21,0.694,22,0.781,23,0.781,24,0.612,27,0.46,31,0.83,35,1.191,44,2.403,58,2.699,64,3.567,69,2.684,109,0.46,110,0.027,111,0.027,124,2.106,125,1.977,126,1.077,127,1.118,128,1.314,130,2.254,132,1.76,133,0.971,134,1.76,140,1.077,141,1.118,142,1.76,143,1.077,144,1.448,145,0.989,146,1.201,309,2.684,310,4.321,311,4.321,312,4.321,313,3.251,314,4.321,315,3.251,316,3.567,317,4.321,318,3.251,319,2.684,320,3.251,321,3.251,322,2.31,323,3.251,324,3.251,325,4.321,326,3.251]],["title/classes/Office.html",[0,0.195,92,1.652]],["body/classes/Office.html",[0,0.252,1,0.544,2,0.347,3,0.347,4,0.287,6,0.175,7,0.773,8,0.844,10,0.844,11,0.744,12,0.844,13,0.617,15,0.544,16,0.039,17,0.544,18,0.175,19,0.475,20,0.544,21,0.617,22,0.694,23,0.869,24,0.681,31,0.773,35,1.058,92,2.922,98,3.17,99,3.17,100,1.777,109,0.544,110,0.03,111,0.03,124,2.14,125,1.96,126,0.957,127,0.972,128,1.168,130,1.96,132,1.564,133,0.864,134,1.564,140,0.957,141,1.062,142,1.564,143,0.957,144,1.287,145,1.168,146,1.419,319,3.17,327,3.17,328,4.812,329,4.812,330,3.841,331,3.841,332,3.17,333,3.17,334,3.17]],["title/classes/Profile.html",[0,0.195,75,1.652]],["body/classes/Profile.html",[0,0.211,1,0.457,2,0.291,3,0.291,4,0.241,6,0.147,7,0.691,8,0.776,9,2.686,10,0.776,11,0.685,12,0.776,13,0.518,15,0.457,16,0.039,17,0.457,18,0.147,19,0.399,20,0.457,21,0.518,22,0.583,23,0.874,24,0.609,27,0.458,31,0.887,32,1.315,35,0.889,75,2.689,76,2.1,108,1.192,109,0.457,110,0.026,111,0.026,126,0.805,127,0.652,133,0.726,140,0.805,141,1.085,143,0.805,144,1.082,153,1.983,208,1.315,209,1.315,211,1.315,213,1.315,215,1.315,238,1.315,263,1.453,276,2.016,278,2.016,279,1.611,280,1.453,282,2.413,283,2.25,292,1.453,294,2.391,295,2.413,297,1.795,308,2.082,335,2.664,336,3.228,337,2.293,338,1.795,339,2.689,340,2.689,341,1.795,342,2.391,343,1.795,344,1.795,345,2.293,346,2.391,347,2.293,348,3.228,349,2.016,350,2.293,351,3.228,352,3.228,353,4.3,354,3.228,355,3.228,356,3.228,357,3.228,358,3.228,359,3.228,360,3.228,361,3.228,362,1.611]],["title/classes/ProfileUpdate.html",[0,0.195,363,2.11]],["body/classes/ProfileUpdate.html",[0,0.243,1,0.525,2,0.334,3,0.334,4,0.277,6,0.169,7,0.755,8,0.83,10,0.83,11,0.77,12,0.83,13,0.595,15,0.525,16,0.039,17,0.525,18,0.169,19,0.458,20,0.525,21,0.595,22,0.669,23,0.934,24,0.666,27,0.501,31,0.83,108,1.368,109,0.525,110,0.029,111,0.029,126,0.923,127,0.749,133,0.833,140,0.923,141,0.749,153,1.909,263,1.668,279,1.849,280,1.668,282,2.579,283,2.105,292,1.668,308,2.118,338,2.06,339,2.874,340,2.06,341,2.06,342,2.615,343,2.06,344,2.06,345,2.632,346,2.615,347,2.632,363,3.672,364,3.058,365,3.882,366,3.882,367,3.705,368,2.632,369,3.705,370,3.705]],["title/classes/Register.html",[0,0.195,371,2.11]],["body/classes/Register.html",[0,0.232,1,0.502,2,0.32,3,0.32,4,0.265,6,0.162,7,0.734,8,0.813,10,0.813,11,0.716,12,0.813,13,0.569,15,0.502,16,0.039,17,0.502,18,0.162,19,0.438,20,0.502,21,0.569,22,0.64,23,0.914,24,0.647,31,0.813,32,1.443,76,1.443,100,1.308,108,1.308,109,0.502,110,0.028,111,0.028,114,2.541,115,2.541,127,0.923,128,1.077,133,0.797,141,1.022,143,0.883,153,1.688,174,2.213,207,1.688,208,2.061,209,1.443,210,1.594,211,1.443,212,1.594,213,1.443,214,1.594,215,1.443,216,1.594,217,2.277,283,2.061,285,3.687,295,2.281,362,2.525,371,3.595,372,2.924,373,3.543,374,2.517,375,3.543,376,2.924,377,3.543,378,3.773,379,4.413,380,2.924,381,2.924,382,3.543,383,2.517]],["title/classes/Temperature.html",[0,0.195,48,1.652]],["body/classes/Temperature.html",[0,0.217,1,0.469,2,0.299,3,0.299,4,0.247,6,0.151,7,0.702,8,0.893,10,0.893,11,0.788,12,0.893,13,0.702,15,0.619,16,0.039,17,0.619,18,0.2,19,0.541,20,0.619,21,0.702,22,0.79,23,0.79,24,0.619,27,0.555,31,0.837,35,1.205,44,2.432,47,3.61,48,2.723,109,0.469,110,0.027,111,0.027,124,2.122,125,1.995,126,1.09,127,1.124,128,1.33,130,2.266,132,1.782,133,0.983,134,1.782,140,1.09,141,1.124,142,1.782,143,1.09,144,1.466,145,1.007,146,1.223,316,3.61,384,2.734,385,4.374,386,4.374,387,4.374,388,3.312,389,4.374,390,3.312,391,4.374,392,4.374,393,3.312,394,3.312]],["title/classes/Token.html",[0,0.195,308,1.097]],["body/classes/Token.html",[0,0.193,1,0.417,2,0.266,3,0.266,4,0.22,6,0.134,7,0.649,8,0.836,9,2.524,10,0.836,11,0.737,12,0.836,13,0.649,15,0.572,16,0.039,17,0.572,18,0.184,19,0.5,20,0.572,21,0.649,22,0.73,23,0.971,24,0.572,25,2.882,27,0.43,31,0.884,32,1.199,35,0.811,108,1.087,109,0.417,110,0.025,111,0.025,114,2.247,115,1.637,126,0.734,127,0.595,135,0.987,140,0.734,141,0.817,143,0.734,144,0.987,153,1.985,238,1.646,263,1.325,277,1.839,278,1.839,279,1.469,280,1.325,282,2.798,283,2.243,285,1.839,286,2.871,290,2.431,292,1.325,294,2.566,295,2.597,297,1.637,308,2.179,338,1.637,339,2.894,340,2.566,341,1.637,342,2.247,343,1.637,344,1.637,345,2.092,346,2.761,347,2.092,349,1.839,362,1.469,383,2.092,395,2.431,396,2.945,397,2.945,398,1.839,399,2.945,400,2.092,401,2.945,402,2.945,403,2.945,404,2.431,405,2.945,406,4.041,407,2.945,408,2.945,409,4.041,410,2.945,411,2.945,412,2.431]],["title/interfaces/UserInformations.html",[203,1.097,207,1.097]],["body/interfaces/UserInformations.html",[2,0.289,3,0.289,4,0.239,6,0.146,16,0.038,18,0.269,19,0.761,27,0.671,100,1.899,110,0.026,111,0.026,135,1.886,145,1.563,173,1.442,177,1.305,179,1.782,181,1.782,183,1.782,185,1.782,187,1.782,189,1.782,191,1.782,193,1.782,203,1.899,204,1.782,205,1.782,206,2.673,207,1.58,208,2.094,209,2.094,210,2.314,211,2.094,212,2.314,213,2.094,214,2.314,215,2.094,216,2.314,217,2.314,218,1.442,219,1.782,220,1.782,221,1.782,222,1.782,223,1.782,224,1.782,225,1.782,226,1.442,227,1.782,228,1.782,229,1.782,230,1.782,231,1.599]],["title/classes/Utils.html",[0,0.195,398,1.855]],["body/classes/Utils.html",[0,0.285,1,0.617,2,0.393,3,0.393,4,0.326,6,0.199,7,0.835,13,0.7,15,0.617,16,0.038,17,0.617,18,0.199,19,0.539,21,0.7,27,0.613,110,0.032,111,0.032,135,1.928,238,1.775,398,3.247,413,3.598,414,5.198,415,5.198,416,4.358,417,4.358,418,4.358,419,4.358,420,4.358]],["title/classes/Widget.html",[0,0.195,421,1.855]],["body/classes/Widget.html",[0,0.199,1,0.43,2,0.274,3,0.274,4,0.227,6,0.139,7,0.663,8,0.753,10,0.753,11,0.849,12,0.753,13,0.488,15,0.43,16,0.038,17,0.43,18,0.214,19,0.376,20,0.43,21,0.488,22,0.549,23,1.035,24,0.585,27,0.5,31,0.966,46,2.509,48,2.297,51,2.509,52,2.297,55,2.509,58,2.297,60,2.509,65,2.509,74,2.509,78,2.509,80,2.509,82,2.509,87,2.509,92,2.297,95,2.509,104,2.509,108,1.123,109,0.43,110,0.025,111,0.025,114,2.297,115,2.297,126,0.758,127,0.835,133,1.324,140,0.758,141,0.835,146,1.123,147,2.58,153,1.732,159,2.58,232,2.58,263,1.368,279,1.517,280,1.368,282,2.511,283,2.05,292,1.368,308,2.005,338,1.69,339,2.608,340,2.297,341,1.69,342,2.297,343,1.69,344,1.69,346,2.297,350,2.16,362,2.061,421,3.143,422,2.509,423,3.04,424,2.509,425,2.509,426,2.509,427,4.862,428,3.04,429,3.04,430,3.04,431,3.04,432,3.04,433,3.04,434,3.04,435,3.04,436,3.04,437,3.04,438,3.04,439,3.04]],["title/classes/WidgetsDB.html",[0,0.195,440,2.11]],["body/classes/WidgetsDB.html",[0,0.156,1,0.336,2,0.214,3,0.214,4,0.177,6,0.108,7,0.557,8,0.805,9,2.167,10,0.805,11,0.709,12,0.805,13,0.557,15,0.491,16,0.039,17,0.491,18,0.158,19,0.429,20,0.491,21,0.557,22,0.627,23,0.741,24,0.491,27,0.48,31,0.939,32,1.67,45,2.913,76,1.837,108,0.877,109,0.336,110,0.021,111,0.021,126,0.865,127,0.828,128,0.722,133,1.126,140,0.865,141,1.093,142,1.413,143,1.29,153,2.119,238,1.67,263,1.562,278,1.483,279,1.185,280,1.069,282,2.919,283,2.383,292,1.562,294,3.008,295,2.582,297,1.32,308,2.058,322,2.913,338,1.929,339,2.667,340,2.507,341,1.929,342,2.507,343,1.929,344,1.929,346,2.28,349,3.129,350,2.465,362,2.046,365,2.864,366,2.864,440,2.913,441,1.96,442,2.375,443,2.375,444,1.687,445,1.687,446,1.687,447,1.687,448,3.47,449,4.1,450,3.47,451,2.864,452,3.47,453,3.47,454,3.384,455,2.375,456,2.375]],["title/coverage.html",[457,3.356]],["body/coverage.html",[0,0.392,4,0.211,5,2.327,16,0.039,18,0.129,35,0.777,48,1.567,52,1.567,58,1.567,75,1.567,92,1.567,109,0.399,110,0.024,111,0.024,112,2.003,113,2.327,117,2.003,120,2.327,147,1.761,148,2.327,159,1.761,160,2.327,173,1.269,177,1.148,203,1.8,205,2.71,207,1.041,218,1.269,226,1.269,232,1.761,233,2.327,238,2.545,274,2.327,276,1.761,277,1.761,308,1.041,309,2.327,327,2.327,335,2.327,337,2.003,363,2.003,364,2.327,368,2.003,371,2.003,372,2.327,374,2.003,384,2.327,395,2.327,398,1.761,400,2.003,413,2.327,421,1.761,422,2.327,440,2.003,441,2.327,444,2.003,445,2.003,446,2.003,447,2.003,457,2.327,458,2.819,459,2.819,460,2.819,461,2.327,462,6.05,463,2.327,464,6.068,465,4.71,466,2.327,467,2.327,468,2.819,469,2.819,470,2.327,471,2.819,472,2.819,473,3.921,474,2.819,475,3.236,476,2.327,477,2.786,478,3.236,479,2.327,480,2.327,481,2.786,482,2.327,483,2.327,484,5.816,485,3.236,486,2.327,487,2.327,488,4.874,489,2.327,490,2.327,491,2.819,492,2.327]],["title/dependencies.html",[493,2.475,494,2.951]],["body/dependencies.html",[16,0.038,24,0.654,25,2.885,110,0.033,111,0.033,280,2.079,494,3.812,495,4.619,496,4.619,497,4.619,498,4.619,499,4.619,500,4.619,501,4.619,502,4.619,503,4.619,504,4.619]],["title/miscellaneous/functions.html",[505,1.546,506,2.951]],["body/miscellaneous/functions.html",[6,0.204,11,0.748,15,0.748,16,0.036,17,0.748,18,0.204,19,0.653,20,0.634,27,0.563,110,0.033,111,0.033,477,3.182,479,4.361,481,3.182,482,4.361,505,2.798,506,3.697,507,3.697,508,3.697,509,4.479,510,5.283,511,4.479,512,4.479,513,5.283]],["title/index.html",[6,0.136,514,2.452]],["body/index.html",[1,0.681,16,0.034,110,0.034,111,0.034,204,2.672,514,3.967,515,4.806,516,4.806]],["title/modules.html",[517,3.356]],["body/modules.html",[16,0.034,110,0.034,111,0.034,517,4.01]],["title/miscellaneous/variables.html",[505,1.546,518,2.951]],["body/miscellaneous/variables.html",[6,0.033,8,0.689,10,0.206,11,0.182,12,0.206,16,0.039,18,0.2,20,0.182,24,0.101,27,0.541,31,0.797,32,1.122,34,0.589,35,0.886,45,1.521,76,1.965,94,1.06,100,0.647,109,0.182,110,0.008,111,0.008,117,0.912,124,1.122,125,0.523,126,0.928,127,0.722,128,0.39,130,1.122,132,1.309,133,1.001,134,1.122,135,0.239,140,0.962,141,1.026,143,0.748,144,1.077,146,1.742,153,1.763,207,1.017,208,1.122,209,0.872,210,0.788,211,0.872,212,0.788,213,0.872,214,0.578,215,0.872,216,0.321,217,1.24,231,0.641,238,0.872,263,0.578,276,0.802,277,0.802,281,1.06,283,1.985,285,3.073,286,1.756,287,0.589,288,1.06,289,1.06,291,0.589,292,0.321,294,3.212,295,2.816,297,0.714,301,2.04,302,2.04,303,2.04,304,2.04,306,2.04,307,0.589,308,1.615,322,0.912,332,2.273,333,2.273,334,2.273,337,0.912,349,2.008,362,2.324,368,0.912,374,0.912,376,2.273,378,1.06,379,1.446,380,1.446,381,1.446,383,0.912,400,0.912,404,2.653,412,0.589,421,1.094,424,1.446,425,1.06,426,1.06,427,2.476,444,0.912,445,0.912,446,0.912,447,0.912,451,2.653,454,1.06,461,0.589,463,1.06,465,0.589,466,1.06,467,1.06,470,1.06,475,0.589,476,1.06,477,0.507,478,3.073,480,1.06,481,0.507,483,1.06,485,0.589,486,1.06,487,0.589,489,0.589,490,0.589,492,0.589,505,0.446,507,0.589,508,0.589,518,0.589,519,3.572,520,1.284,521,0.713,522,0.713,523,1.284,524,0.713,525,0.713,526,4.718,527,3.722,528,5.179,529,1.284,530,3.214,531,5.08,532,2.754,533,2.754,534,1.284,535,2.754,536,0.713,537,2.754,538,0.713,539,2.754,540,0.713,541,2.754,542,0.713,543,3.214,544,3.403,545,4.658,546,3.722,547,2.141,548,0.713,549,1.284,550,0.713,551,0.713,552,1.752,553,2.471,554,1.284,555,1.284,556,1.284,557,0.713,558,0.713,559,0.713,560,0.713,561,1.752,562,1.752,563,0.713,564,2.754,565,0.713,566,0.713,567,0.713,568,0.713,569,0.713,570,0.713,571,0.713,572,0.713,573,0.713,574,0.713,575,4.374,576,3.722,577,3.214,578,1.284,579,1.284,580,1.284,581,3.572,582,2.141,583,2.999,584,3.214,585,1.284,586,2.141,587,3.214,588,1.284,589,2.141,590,1.284,591,1.284,592,4.288,593,3.572,594,1.752,595,1.284,596,0.713,597,2.754,598,0.713,599,0.713,600,4.194,601,0.713,602,0.713,603,1.284,604,1.284,605,3.858,606,1.284,607,1.284,608,1.284,609,2.141,610,2.141,611,2.141,612,1.284,613,0.713,614,0.713,615,2.471,616,2.471,617,1.752,618,1.284,619,0.713,620,0.713,621,0.713,622,2.141,623,2.141,624,2.141,625,0.713,626,0.713,627,0.713,628,0.713,629,0.713]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":238,"title":{},"body":{"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0/1",{"_index":464,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":471,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":474,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":484,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":488,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":473,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":472,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":263,"title":{},"body":{"classes/LeagueOfLegends.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["1/1",{"_index":469,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":498,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":468,"title":{},"body":{"coverage.html":{}}}],["17",{"_index":515,"title":{},"body":{"index.html":{}}}],["2.29.1",{"_index":501,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":503,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":244,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["365",{"_index":93,"title":{},"body":{"classes/About.html":{}}}],["4",{"_index":516,"title":{},"body":{"index.html":{}}}],["4.17.1",{"_index":499,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":288,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["8.5.1",{"_index":500,"title":{},"body":{"dependencies.html":{}}}],["_result",{"_index":296,"title":{},"body":{"classes/Login.html":{}}}],["_result['token",{"_index":299,"title":{},"body":{"classes/Login.html":{}}}],["_result['token_created_at",{"_index":300,"title":{},"body":{"classes/Login.html":{}}}],["abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789",{"_index":420,"title":{},"body":{"classes/Utils.html":{}}}],["access_token",{"_index":575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addroute",{"_index":482,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["addroute(endpoint",{"_index":509,"title":{},"body":{"miscellaneous/functions.html":{}}}],["addusers",{"_index":466,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["addusers(infos",{"_index":609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addwidget",{"_index":446,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["addwidget(userid",{"_index":455,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["already",{"_index":380,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["api_key",{"_index":44,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{}}}],["api_url",{"_index":41,"title":{},"body":{"classes/About.html":{}}}],["apikey",{"_index":316,"title":{},"body":{"classes/Nasa.html":{},"classes/Temperature.html":{}}}],["apod",{"_index":60,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["app",{"_index":476,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apple_mail",{"_index":213,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["apple_token",{"_index":214,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["apple_user",{"_index":594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":231,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["astronomy",{"_index":61,"title":{},"body":{"classes/About.html":{}}}],["async",{"_index":8,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["async(err",{"_index":449,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["authactions",{"_index":118,"title":{},"body":{"classes/Authentication.html":{}}}],["authentication",{"_index":112,"title":{"classes/Authentication.html":{}},"body":{"classes/Authentication.html":{},"coverage.html":{}}}],["authorization",{"_index":333,"title":{},"body":{"classes/Office.html":{},"miscellaneous/variables.html":{}}}],["autologin",{"_index":77,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{}}}],["autologin.startswith(\"https://intra.epitech.eu",{"_index":152,"title":{},"body":{"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{}}}],["autologin.substring(25",{"_index":175,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["await",{"_index":133,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["axios",{"_index":124,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["axiosresponse",{"_index":125,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["bad",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base_currency",{"_index":138,"title":{},"body":{"classes/Currency.html":{}}}],["bearer",{"_index":334,"title":{},"body":{"classes/Office.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":424,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["break",{"_index":583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calendar",{"_index":96,"title":{},"body":{"classes/About.html":{}}}],["callback",{"_index":527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(err",{"_index":545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["camera",{"_index":69,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["case",{"_index":427,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":140,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["checktoken",{"_index":400,"title":{},"body":{"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checktoken(token",{"_index":402,"title":{},"body":{"classes/Token.html":{}}}],["city",{"_index":47,"title":{},"body":{"classes/About.html":{},"classes/Temperature.html":{}}}],["city_temperature",{"_index":46,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["city_weather",{"_index":51,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["class",{"_index":0,"title":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{}}}],["classes",{"_index":1,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"index.html":{}}}],["client",{"_index":33,"title":{},"body":{"classes/About.html":{}}}],["console.debug(\"[getuser",{"_index":556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"[getuserbytoken",{"_index":555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"firsturl",{"_index":242,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug(\"profile",{"_index":270,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug(\"query",{"_index":543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"response",{"_index":580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"secondurl",{"_index":252,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug(\"setting",{"_index":269,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug('[handleoauthusersaction",{"_index":600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(err",{"_index":349,"title":{},"body":{"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["console.debug(result",{"_index":404,"title":{},"body":{"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["console.error(\"error",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error(error",{"_index":629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"heeeeeeeeeeeeeeeeeeeeere",{"_index":345,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{}}}],["console.log(\"heeeeeeeeeeeeeeeeeeeeere2",{"_index":347,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{}}}],["console.log(\"res",{"_index":568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"response",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"result",{"_index":351,"title":{},"body":{"classes/Profile.html":{}}}],["console.log(\"result[0",{"_index":352,"title":{},"body":{"classes/Profile.html":{}}}],["console.log('autologin",{"_index":155,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["console.log('bearer",{"_index":578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('currency",{"_index":137,"title":{},"body":{"classes/Currency.html":{}}}],["console.log('ip",{"_index":30,"title":{},"body":{"classes/About.html":{}}}],["console.log(error",{"_index":142,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"classes/WidgetsDB.html":{}}}],["console.log(from",{"_index":129,"title":{},"body":{"classes/Currency.html":{}}}],["const",{"_index":127,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["converter",{"_index":53,"title":{},"body":{"classes/About.html":{}}}],["cors",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":457,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdat",{"_index":405,"title":{},"body":{"classes/Token.html":{}}}],["credits",{"_index":191,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["curiosity",{"_index":66,"title":{},"body":{"classes/About.html":{}}}],["curiosity_image",{"_index":65,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["currency",{"_index":52,"title":{"classes/Currency.html":{}},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["currency.getexchangerate(req",{"_index":428,"title":{},"body":{"classes/Widget.html":{}}}],["currency_converter",{"_index":55,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["current_time",{"_index":36,"title":{},"body":{"classes/About.html":{}}}],["data",{"_index":322,"title":{},"body":{"classes/Nasa.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["data.leaguepoints",{"_index":261,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.losses",{"_index":260,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.queuetype",{"_index":256,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.rank",{"_index":258,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.tier",{"_index":257,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.wins",{"_index":259,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data[0",{"_index":325,"title":{},"body":{"classes/Nasa.html":{}}}],["database",{"_index":573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database/databaseactions",{"_index":278,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{}}}],["database/interfaces",{"_index":174,"title":{},"body":{"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Register.html":{}}}],["date",{"_index":64,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["day",{"_index":63,"title":{},"body":{"classes/About.html":{}}}],["db",{"_index":463,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["db.query(query",{"_index":544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db.query(querystring",{"_index":567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dd",{"_index":303,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["decoded",{"_index":342,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["default",{"_index":146,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["delete",{"_index":550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletewidget",{"_index":467,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":494,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":49,"title":{},"body":{"classes/About.html":{}}}],["diff",{"_index":409,"title":{},"body":{"classes/Token.html":{}}}],["display",{"_index":50,"title":{},"body":{"classes/About.html":{}}}],["display_name",{"_index":40,"title":{},"body":{"classes/About.html":{}}}],["documentation",{"_index":458,"title":{},"body":{"coverage.html":{}}}],["door",{"_index":89,"title":{},"body":{"classes/About.html":{}}}],["door_name",{"_index":91,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{}}}],["doors",{"_index":85,"title":{},"body":{"classes/About.html":{}}}],["dotenv",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["end_date",{"_index":99,"title":{},"body":{"classes/About.html":{},"classes/Office.html":{}}}],["endpoint",{"_index":511,"title":{},"body":{"miscellaneous/functions.html":{}}}],["epitech",{"_index":72,"title":{},"body":{"classes/About.html":{}}}],["epitech_doors",{"_index":84,"title":{},"body":{"classes/About.html":{}}}],["epitech_doors_open_door",{"_index":87,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["epitechdoors",{"_index":147,"title":{"classes/EpitechDoors.html":{}},"body":{"classes/EpitechDoors.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["epitechdoors.opendoor(req",{"_index":436,"title":{},"body":{"classes/Widget.html":{}}}],["err",{"_index":294,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":141,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["error[addusers",{"_index":610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error[getusers",{"_index":608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error[updateuserauthtoken",{"_index":601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["events",{"_index":97,"title":{},"body":{"classes/About.html":{}}}],["exchange",{"_index":56,"title":{},"body":{"classes/About.html":{}}}],["existinginformation",{"_index":615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existinginformationtype",{"_index":616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exists",{"_index":381,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":286,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":145,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"interfaces/UserInformations.html":{}}}],["express",{"_index":24,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["express.request",{"_index":10,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["express.response",{"_index":12,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["facebook_mail",{"_index":211,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["facebook_token",{"_index":212,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["facebook_user",{"_index":584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["facebookuser",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":153,"title":{},"body":{"classes/EpitechDoors.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{}}}],["firstname",{"_index":179,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["firsturl",{"_index":239,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["found",{"_index":340,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["function",{"_index":478,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":506,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gamedata",{"_index":230,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["gamedata.length",{"_index":262,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["gamedata[0].queuetype",{"_index":264,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["gamedata[1",{"_index":266,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["get(req",{"_index":9,"title":{},"body":{"classes/About.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{}}}],["getcalendarevents",{"_index":328,"title":{},"body":{"classes/Office.html":{}}}],["getcalendarevents(req",{"_index":329,"title":{},"body":{"classes/Office.html":{}}}],["getexchangerate",{"_index":121,"title":{},"body":{"classes/Currency.html":{}}}],["getexchangerate(req",{"_index":122,"title":{},"body":{"classes/Currency.html":{}}}],["getgrades",{"_index":161,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getgrades(req",{"_index":165,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getnasadayimage",{"_index":310,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasadayimage(req",{"_index":312,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasaroverimage",{"_index":311,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasaroverimage(req",{"_index":314,"title":{},"body":{"classes/Nasa.html":{}}}],["getnotifications",{"_index":162,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getnotifications(req",{"_index":167,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getpartners",{"_index":163,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getpartners(req",{"_index":169,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getprofile",{"_index":164,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getprofile(req",{"_index":171,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getrandomstring",{"_index":414,"title":{},"body":{"classes/Utils.html":{}}}],["getrandomstring(length",{"_index":415,"title":{},"body":{"classes/Utils.html":{}}}],["getrow",{"_index":337,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrow('token",{"_index":348,"title":{},"body":{"classes/Profile.html":{}}}],["gettemperature",{"_index":385,"title":{},"body":{"classes/Temperature.html":{}}}],["gettemperature(req",{"_index":387,"title":{},"body":{"classes/Temperature.html":{}}}],["getting",{"_index":273,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["getuserbytoken",{"_index":445,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuserbytoken(token",{"_index":448,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["getuserprofile",{"_index":234,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["getuserprofile(req",{"_index":235,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["getusers",{"_index":276,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getusers(infos",{"_index":607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getusers(user",{"_index":293,"title":{},"body":{"classes/Login.html":{}}}],["getweather",{"_index":386,"title":{},"body":{"classes/Temperature.html":{}}}],["getweather(req",{"_index":389,"title":{},"body":{"classes/Temperature.html":{}}}],["getwidgetsbyuserid",{"_index":444,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getwidgetsbyuserid(userid",{"_index":453,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["google_mail",{"_index":209,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["google_token",{"_index":210,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["google_user",{"_index":577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googleuser",{"_index":582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gpa",{"_index":193,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["grades",{"_index":83,"title":{},"body":{"classes/About.html":{}}}],["handleoauthusers",{"_index":117,"title":{},"body":{"classes/Authentication.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusers(req",{"_index":119,"title":{},"body":{"classes/Authentication.html":{}}}],["handleoauthusersaction",{"_index":486,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusersaction(infos",{"_index":596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":332,"title":{},"body":{"classes/Office.html":{},"miscellaneous/variables.html":{}}}],["hh:mm:ss",{"_index":304,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":34,"title":{},"body":{"classes/About.html":{},"miscellaneous/variables.html":{}}}],["http://api.openweathermap.org",{"_index":42,"title":{},"body":{"classes/About.html":{}}}],["http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key",{"_index":392,"title":{},"body":{"classes/Temperature.html":{}}}],["https://${region}.api.riotgames.com/lol/league/v4/entries/by",{"_index":250,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["https://${region}.api.riotgames.com/lol/summoner/v4/summoners/by",{"_index":240,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["https://api.nasa.gov",{"_index":59,"title":{},"body":{"classes/About.html":{}}}],["https://api.nasa.gov/mars",{"_index":320,"title":{},"body":{"classes/Nasa.html":{}}}],["https://api.nasa.gov/planetary/apod?api_key=${api_key}&date=${date",{"_index":318,"title":{},"body":{"classes/Nasa.html":{}}}],["https://ddragon.leagueoflegends.com/cdn/11.23.1/img/profileicon/${response.data['profileiconid']}.png",{"_index":246,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["https://epi",{"_index":156,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["https://freecurrencyapi.net",{"_index":54,"title":{},"body":{"classes/About.html":{}}}],["https://freecurrencyapi.net/api/v2/latest?base_currency=${from}&apikey=${api_key",{"_index":131,"title":{},"body":{"classes/Currency.html":{}}}],["https://graph.facebook.com/me/?fields=id,name,email",{"_index":585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://graph.microsoft.com/v1.0/me",{"_index":94,"title":{},"body":{"classes/About.html":{},"miscellaneous/variables.html":{}}}],["https://graph.microsoft.com/v1.0/me/calendarview?startdatetime=${start_date}&enddatetime=${end_date",{"_index":331,"title":{},"body":{"classes/Office.html":{}}}],["https://intra.epitech.eu/${autologin",{"_index":154,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/binome/?format=json",{"_index":196,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/notes?format=json",{"_index":201,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/notification/message?format=json",{"_index":199,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user?format=json",{"_index":176,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/admin/autolog",{"_index":73,"title":{},"body":{"classes/About.html":{}}}],["https://www.googleapis.com/oauth2/v1/userinfo?alt=json",{"_index":579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifier",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":68,"title":{},"body":{"classes/About.html":{}}}],["import",{"_index":23,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["incorrect",{"_index":298,"title":{},"body":{"classes/Login.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["informations",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos",{"_index":376,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["infos.apple_mail",{"_index":539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.apple_token",{"_index":540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.facebook_mail",{"_index":537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.facebook_token",{"_index":538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.google_mail",{"_index":535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.google_token",{"_index":536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.mail",{"_index":532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.office_mail",{"_index":541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.office_token",{"_index":542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.password",{"_index":534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insert",{"_index":529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":203,"title":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["interfaces",{"_index":204,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"index.html":{}}}],["internal",{"_index":144,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["intra",{"_index":71,"title":{},"body":{"classes/About.html":{}}}],["intra_autologin",{"_index":86,"title":{},"body":{"classes/About.html":{}}}],["intra_epitech",{"_index":70,"title":{},"body":{"classes/About.html":{}}}],["intra_epitech_grades",{"_index":82,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_notifications",{"_index":80,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_partners",{"_index":78,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_profile",{"_index":74,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intraepitech",{"_index":159,"title":{"classes/IntraEpitech.html":{}},"body":{"classes/IntraEpitech.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["intraepitech.getgrades(req",{"_index":437,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getnotifications(req",{"_index":435,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getpartners(req",{"_index":434,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getprofile(req",{"_index":433,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitechuser",{"_index":173,"title":{"interfaces/IntraEpitechUser.html":{}},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["invalid",{"_index":346,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["ip",{"_index":26,"title":{},"body":{"classes/About.html":{}}}],["ip.split(':')[3",{"_index":29,"title":{},"body":{"classes/About.html":{}}}],["json.stringify(widget",{"_index":548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jsonwebtoken",{"_index":280,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"dependencies.html":{}}}],["jwt",{"_index":279,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwt.jwtpayload",{"_index":343,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwt.sign",{"_index":291,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["jwt.verify(token",{"_index":344,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwttoken",{"_index":564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":181,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["league",{"_index":102,"title":{},"body":{"classes/About.html":{}}}],["league_of_legends",{"_index":101,"title":{},"body":{"classes/About.html":{}}}],["league_of_legends_summoner_profile",{"_index":104,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["leagueoflegends",{"_index":232,"title":{"classes/LeagueOfLegends.html":{}},"body":{"classes/LeagueOfLegends.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["leagueoflegends.getuserprofile(req",{"_index":439,"title":{},"body":{"classes/Widget.html":{}}}],["leagueoflegendsgamedata",{"_index":218,"title":{"interfaces/LeagueOfLegendsGameData.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["leagueoflegendsprofiledata",{"_index":226,"title":{"interfaces/LeagueOfLegendsProfileData.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["leaguepoints",{"_index":224,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["legends",{"_index":103,"title":{},"body":{"classes/About.html":{}}}],["length",{"_index":417,"title":{},"body":{"classes/Utils.html":{}}}],["limit",{"_index":554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["literal",{"_index":613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":187,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["logged",{"_index":307,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":177,"title":{"classes/Login.html":{}},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["logue.eu/api/doors_open?login=${autologin}&door_name=${door_name",{"_index":157,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["losses",{"_index":223,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["mail",{"_index":208,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":111,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":283,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":134,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":7,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["miscellaneous",{"_index":505,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":302,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["module.exports",{"_index":108,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["modules",{"_index":517,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moment",{"_index":25,"title":{},"body":{"classes/About.html":{},"classes/Login.html":{},"classes/Token.html":{},"dependencies.html":{}}}],["moment().format('yyyy",{"_index":301,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["moment().unix",{"_index":37,"title":{},"body":{"classes/About.html":{}}}],["moment(result[0].token_created_at",{"_index":407,"title":{},"body":{"classes/Token.html":{}}}],["moment.moment",{"_index":406,"title":{},"body":{"classes/Token.html":{}}}],["montpellier",{"_index":90,"title":{},"body":{"classes/About.html":{}}}],["mysql.createconnection",{"_index":569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":502,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":17,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["name/${summoner_name}?api_key=${api_key",{"_index":241,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["nasa",{"_index":58,"title":{"classes/Nasa.html":{}},"body":{"classes/About.html":{},"classes/Nasa.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["nasa.getnasadayimage(req",{"_index":431,"title":{},"body":{"classes/Widget.html":{}}}],["nasa.getnasaroverimage(req",{"_index":432,"title":{},"body":{"classes/Widget.html":{}}}],["new",{"_index":109,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newtoken",{"_index":290,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{}}}],["newvalues",{"_index":558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["next",{"_index":513,"title":{},"body":{"miscellaneous/functions.html":{}}}],["none",{"_index":598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notifications",{"_index":81,"title":{},"body":{"classes/About.html":{}}}],["now",{"_index":408,"title":{},"body":{"classes/Token.html":{}}}],["now.diff(createdat",{"_index":410,"title":{},"body":{"classes/Token.html":{}}}],["null",{"_index":403,"title":{},"body":{"classes/Token.html":{}}}],["number",{"_index":135,"title":{},"body":{"classes/Currency.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"miscellaneous/variables.html":{}}}],["number(process.env.expire_time",{"_index":287,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["office",{"_index":92,"title":{"classes/Office.html":{}},"body":{"classes/About.html":{},"classes/Office.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["office.getcalendarevents(req",{"_index":438,"title":{},"body":{"classes/Widget.html":{}}}],["office_calendar_events",{"_index":95,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["office_mail",{"_index":215,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["office_token",{"_index":100,"title":{},"body":{"classes/About.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Office.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["office_user",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["officeuser",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["open",{"_index":88,"title":{},"body":{"classes/About.html":{}}}],["opendoor",{"_index":149,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["opendoor(req",{"_index":150,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["optional",{"_index":19,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["outlook_mail",{"_index":358,"title":{},"body":{"classes/Profile.html":{}}}],["overview",{"_index":514,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":493,"title":{"dependencies.html":{}},"body":{}}],["parameters",{"_index":15,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":43,"title":{},"body":{"classes/About.html":{}}}],["partners",{"_index":79,"title":{},"body":{"classes/About.html":{}}}],["password",{"_index":217,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":365,"title":{},"body":{"classes/ProfileUpdate.html":{},"classes/WidgetsDB.html":{}}}],["patch(req",{"_index":366,"title":{},"body":{"classes/ProfileUpdate.html":{},"classes/WidgetsDB.html":{}}}],["payload",{"_index":289,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["photo",{"_index":324,"title":{},"body":{"classes/Nasa.html":{}}}],["photos/api/v1/rovers/curiosity/photos?earth_date=${date}&camera=${camera}&api_key=${api_key",{"_index":321,"title":{},"body":{"classes/Nasa.html":{}}}],["picture",{"_index":62,"title":{},"body":{"classes/About.html":{}}}],["plain_user",{"_index":617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plainuser",{"_index":618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["possible",{"_index":419,"title":{},"body":{"classes/Utils.html":{}}}],["post",{"_index":114,"title":{},"body":{"classes/Authentication.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["post(req",{"_index":115,"title":{},"body":{"classes/Authentication.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["process.env.jwt_secret",{"_index":292,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["process.env.my_sql_database",{"_index":574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_host",{"_index":570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_password",{"_index":572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_user",{"_index":571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.nasa_api_key",{"_index":317,"title":{},"body":{"classes/Nasa.html":{}}}],["process.env.weather_api_key",{"_index":391,"title":{},"body":{"classes/Temperature.html":{}}}],["profile",{"_index":75,"title":{"classes/Profile.html":{}},"body":{"classes/About.html":{},"classes/LeagueOfLegends.html":{},"classes/Profile.html":{},"coverage.html":{}}}],["profileactions",{"_index":369,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["profileiconurl",{"_index":229,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["profilepicture",{"_index":183,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["profileupdate",{"_index":363,"title":{"classes/ProfileUpdate.html":{}},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{}}}],["promise",{"_index":603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise(async",{"_index":604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promo",{"_index":185,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["properties",{"_index":206,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["query",{"_index":528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["querystring",{"_index":566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queuetype",{"_index":219,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["rank",{"_index":221,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["ranked_flex_sr",{"_index":267,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["ranked_solo_5x5",{"_index":265,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["rate",{"_index":57,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{}}}],["rc.0",{"_index":504,"title":{},"body":{"dependencies.html":{}}}],["region",{"_index":107,"title":{},"body":{"classes/About.html":{},"classes/LeagueOfLegends.html":{}}}],["register",{"_index":371,"title":{"classes/Register.html":{}},"body":{"classes/Register.html":{},"coverage.html":{}}}],["registeractions",{"_index":375,"title":{},"body":{"classes/Register.html":{}}}],["registerbasicuser",{"_index":374,"title":{},"body":{"classes/Register.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registerbasicuser(infos",{"_index":377,"title":{},"body":{"classes/Register.html":{}}}],["register|login",{"_index":614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reject",{"_index":606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req",{"_index":20,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["req.body",{"_index":128,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["req.body.mail",{"_index":619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.body.password",{"_index":620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":338,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["req.ip",{"_index":28,"title":{},"body":{"classes/About.html":{}}}],["req.params.type",{"_index":425,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesthandler",{"_index":479,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["requesthandler(req",{"_index":512,"title":{},"body":{"miscellaneous/functions.html":{}}}],["require(\"http\").server(app",{"_index":565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":284,"title":{},"body":{"classes/Login.html":{}}}],["res",{"_index":11,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["res.status(200).json",{"_index":32,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["res.status(200).json(photo",{"_index":326,"title":{},"body":{"classes/Nasa.html":{}}}],["res.status(200).json(profile",{"_index":271,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["res.status(200).json(response.data",{"_index":319,"title":{},"body":{"classes/Nasa.html":{},"classes/Office.html":{}}}],["res.status(200).json(response.data['main",{"_index":393,"title":{},"body":{"classes/Temperature.html":{}}}],["res.status(200).json(response.data['weather",{"_index":394,"title":{},"body":{"classes/Temperature.html":{}}}],["res.status(200).json(response2.data",{"_index":200,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(response2.data['binomes",{"_index":198,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(response2.data['modules",{"_index":202,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(user",{"_index":195,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(400).json",{"_index":281,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["res.status(401).json",{"_index":339,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["res.status(403).json",{"_index":382,"title":{},"body":{"classes/Register.html":{}}}],["res.status(404).json",{"_index":350,"title":{},"body":{"classes/Profile.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["res.status(500).json",{"_index":143,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["res.status(response.status).json(response.data",{"_index":158,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["res.status(response2.status).json",{"_index":272,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["resolve",{"_index":605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":132,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["response.data",{"_index":581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response.data.data[to",{"_index":136,"title":{},"body":{"classes/Currency.html":{}}}],["response.data.photos",{"_index":323,"title":{},"body":{"classes/Nasa.html":{}}}],["response.data['credits",{"_index":192,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['firstname",{"_index":180,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['gpa'][0]['gpa",{"_index":194,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['groups'][0]['name",{"_index":188,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['id",{"_index":245,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response.data['lastname",{"_index":182,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['login",{"_index":178,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['name",{"_index":248,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response.data['picture",{"_index":184,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['promo",{"_index":186,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['semester_code",{"_index":190,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['summonerlevel",{"_index":247,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response.status",{"_index":243,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response2",{"_index":197,"title":{},"body":{"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{}}}],["response2.data.length",{"_index":254,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response2.data.map((data",{"_index":255,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response2.status",{"_index":253,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["result",{"_index":295,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["result.affectedrows",{"_index":412,"title":{},"body":{"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["result.error",{"_index":378,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["result.length",{"_index":297,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["result.message",{"_index":379,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["result.result",{"_index":383,"title":{},"body":{"classes/Register.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["result[0",{"_index":353,"title":{},"body":{"classes/Profile.html":{}}}],["result[addusers",{"_index":611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[getusers",{"_index":612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[updateuserauthtoken",{"_index":602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["results",{"_index":110,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":31,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":21,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["routes",{"_index":483,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rover",{"_index":67,"title":{},"body":{"classes/About.html":{}}}],["row",{"_index":552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rows",{"_index":557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rslt",{"_index":354,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['apple_mail",{"_index":360,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['facebook_mail",{"_index":357,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['google_mail",{"_index":356,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['mail",{"_index":355,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['office_mail",{"_index":361,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['outlook_mail",{"_index":359,"title":{},"body":{"classes/Profile.html":{}}}],["seconds",{"_index":411,"title":{},"body":{"classes/Token.html":{}}}],["secondurl",{"_index":249,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["select",{"_index":553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["semestercode",{"_index":189,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["server",{"_index":35,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":510,"title":{},"body":{"miscellaneous/functions.html":{}}}],["services",{"_index":38,"title":{},"body":{"classes/About.html":{}}}],["set",{"_index":562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":3,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["src/.../authactions.ts",{"_index":523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.ts",{"_index":522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../databaseactions.ts",{"_index":519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../profileactions.ts",{"_index":525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../registeractions.ts",{"_index":524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../request_handler.ts",{"_index":508,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../routes.ts",{"_index":507,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../tokenaction.ts",{"_index":521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/database/database.ts",{"_index":461,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/databaseactions.ts",{"_index":465,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/interfaces.ts",{"_index":205,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["src/index.ts",{"_index":475,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/request_handler.ts",{"_index":477,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/routes.ts",{"_index":481,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/routes/about/about.ts",{"_index":5,"title":{},"body":{"classes/About.html":{},"coverage.html":{}}}],["src/routes/about/about.ts:5",{"_index":14,"title":{},"body":{"classes/About.html":{}}}],["src/routes/auth/authactions.ts",{"_index":485,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/auth/login.ts",{"_index":274,"title":{},"body":{"classes/Login.html":{},"coverage.html":{}}}],["src/routes/auth/login.ts:8",{"_index":275,"title":{},"body":{"classes/Login.html":{}}}],["src/routes/auth/oauth.ts",{"_index":113,"title":{},"body":{"classes/Authentication.html":{},"coverage.html":{}}}],["src/routes/auth/oauth.ts:5",{"_index":116,"title":{},"body":{"classes/Authentication.html":{}}}],["src/routes/auth/register.ts",{"_index":372,"title":{},"body":{"classes/Register.html":{},"coverage.html":{}}}],["src/routes/auth/register.ts:6",{"_index":373,"title":{},"body":{"classes/Register.html":{}}}],["src/routes/auth/registeractions.ts",{"_index":487,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/auth/token.ts",{"_index":395,"title":{},"body":{"classes/Token.html":{},"coverage.html":{}}}],["src/routes/auth/token.ts:42",{"_index":397,"title":{},"body":{"classes/Token.html":{}}}],["src/routes/auth/token.ts:9",{"_index":396,"title":{},"body":{"classes/Token.html":{}}}],["src/routes/auth/tokenaction.ts",{"_index":489,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/profile/profile.ts",{"_index":335,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{}}}],["src/routes/profile/profile.ts:6",{"_index":336,"title":{},"body":{"classes/Profile.html":{}}}],["src/routes/profile/profileactions.ts",{"_index":490,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/profile/profileupdate.ts",{"_index":364,"title":{},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{}}}],["src/routes/profile/profileupdate.ts:6",{"_index":367,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["src/routes/widgets/currency.ts",{"_index":120,"title":{},"body":{"classes/Currency.html":{},"coverage.html":{}}}],["src/routes/widgets/currency.ts:5",{"_index":123,"title":{},"body":{"classes/Currency.html":{}}}],["src/routes/widgets/epitechdoors.ts",{"_index":148,"title":{},"body":{"classes/EpitechDoors.html":{},"coverage.html":{}}}],["src/routes/widgets/epitechdoors.ts:5",{"_index":151,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["src/routes/widgets/intraepitech.ts",{"_index":160,"title":{},"body":{"classes/IntraEpitech.html":{},"coverage.html":{}}}],["src/routes/widgets/intraepitech.ts:105",{"_index":166,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:43",{"_index":170,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:6",{"_index":172,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:74",{"_index":168,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/leagueoflegends.ts",{"_index":233,"title":{},"body":{"classes/LeagueOfLegends.html":{},"coverage.html":{}}}],["src/routes/widgets/leagueoflegends.ts:6",{"_index":236,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["src/routes/widgets/nasa.ts",{"_index":309,"title":{},"body":{"classes/Nasa.html":{},"coverage.html":{}}}],["src/routes/widgets/nasa.ts:24",{"_index":315,"title":{},"body":{"classes/Nasa.html":{}}}],["src/routes/widgets/nasa.ts:5",{"_index":313,"title":{},"body":{"classes/Nasa.html":{}}}],["src/routes/widgets/office.ts",{"_index":327,"title":{},"body":{"classes/Office.html":{},"coverage.html":{}}}],["src/routes/widgets/office.ts:5",{"_index":330,"title":{},"body":{"classes/Office.html":{}}}],["src/routes/widgets/temperature.ts",{"_index":384,"title":{},"body":{"classes/Temperature.html":{},"coverage.html":{}}}],["src/routes/widgets/temperature.ts:24",{"_index":390,"title":{},"body":{"classes/Temperature.html":{}}}],["src/routes/widgets/temperature.ts:5",{"_index":388,"title":{},"body":{"classes/Temperature.html":{}}}],["src/routes/widgets/widget.ts",{"_index":422,"title":{},"body":{"classes/Widget.html":{},"coverage.html":{}}}],["src/routes/widgets/widget.ts:12",{"_index":423,"title":{},"body":{"classes/Widget.html":{}}}],["src/routes/widgets/widgetsdb.ts",{"_index":441,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{}}}],["src/routes/widgets/widgetsdb.ts:6",{"_index":442,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["src/routes/widgets/widgetsdb.ts:66",{"_index":443,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["src/utils/utils.ts",{"_index":413,"title":{},"body":{"classes/Utils.html":{},"coverage.html":{}}}],["src/utils/utils.ts:2",{"_index":416,"title":{},"body":{"classes/Utils.html":{}}}],["start_date",{"_index":98,"title":{},"body":{"classes/About.html":{},"classes/Office.html":{}}}],["statements",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":27,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["success",{"_index":454,"title":{},"body":{"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["summoner",{"_index":105,"title":{},"body":{"classes/About.html":{}}}],["summoner/${summoner_id}?api_key=${api_key",{"_index":251,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["summoner_id",{"_index":237,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["summoner_name",{"_index":106,"title":{},"body":{"classes/About.html":{},"classes/LeagueOfLegends.html":{}}}],["summonerlevel",{"_index":228,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["summonername",{"_index":227,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["switch",{"_index":426,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":492,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":491,"title":{},"body":{"coverage.html":{}}}],["target_currency",{"_index":139,"title":{},"body":{"classes/Currency.html":{}}}],["temperature",{"_index":48,"title":{"classes/Temperature.html":{}},"body":{"classes/About.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["temperature.gettemperature(req",{"_index":429,"title":{},"body":{"classes/Widget.html":{}}}],["temperature.getweather(req",{"_index":430,"title":{},"body":{"classes/Widget.html":{}}}],["text",{"_index":418,"title":{},"body":{"classes/Utils.html":{}}}],["tier",{"_index":220,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["token",{"_index":308,"title":{"classes/Token.html":{}},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token.split",{"_index":341,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["token_created_at",{"_index":306,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["token_wl",{"_index":480,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenaction",{"_index":401,"title":{},"body":{"classes/Token.html":{}}}],["true",{"_index":362,"title":{},"body":{"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":126,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":18,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":285,"title":{},"body":{"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["unknown",{"_index":22,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["unranked",{"_index":268,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["update",{"_index":561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updated",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos",{"_index":277,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateinfos(['facebook_mail",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['google_mail",{"_index":621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['mail",{"_index":627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['office_mail",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['token",{"_index":305,"title":{},"body":{"classes/Login.html":{}}}],["updates",{"_index":563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuserauthtoken",{"_index":470,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateuserauthtoken(infos",{"_index":599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuserinformations",{"_index":368,"title":{},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateuserinformations(req",{"_index":370,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["updatewidget",{"_index":447,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updatewidget(userid",{"_index":456,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["url",{"_index":130,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":76,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["user.length",{"_index":450,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["user.type",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.email",{"_index":593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.mail",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.password",{"_index":628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user[0]['id",{"_index":452,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["user_id",{"_index":547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":451,"title":{},"body":{"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["userinformations",{"_index":207,"title":{"interfaces/UserInformations.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userjson",{"_index":576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["username",{"_index":216,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils",{"_index":398,"title":{"classes/Utils.html":{}},"body":{"classes/Token.html":{},"classes/Utils.html":{},"coverage.html":{}}}],["utils/utils",{"_index":399,"title":{},"body":{"classes/Token.html":{}}}],["valid",{"_index":282,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["value",{"_index":526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["values",{"_index":533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":518,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["wasfound",{"_index":531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["weather",{"_index":39,"title":{},"body":{"classes/About.html":{}}}],["whererow",{"_index":559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wherevalue",{"_index":560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["widget",{"_index":421,"title":{"classes/Widget.html":{}},"body":{"classes/Widget.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["widgetid",{"_index":549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["widgets",{"_index":45,"title":{},"body":{"classes/About.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["widgetsdb",{"_index":440,"title":{"classes/WidgetsDB.html":{}},"body":{"classes/WidgetsDB.html":{},"coverage.html":{}}}],["winrate",{"_index":225,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["wins",{"_index":222,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/About.html":{"url":"classes/About.html","title":"class - About","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  About\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/about/about.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/about/about.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport moment from \"moment\";\n\nclass About {\n  async get(req: express.Request, res: express.Response) {\n    let ip: string = req.ip;\n    ip = ip.split(':')[3];\n    console.log('ip == ', ip);\n\n    return res.status(200).json({\n      \"client\": {\n        \"host\": ip,\n      },\n      \"server\": {\n        \"current_time\": moment().unix(),\n        \"services\": [\n          {\n            \"name\": \"weather\",\n            \"display_name\": \"Weather\",\n            \"api_url\": \"http://api.openweathermap.org\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"widgets\": [\n              {\n                \"name\": \"city_temperature\",\n                \"display_name\": \"City temperature\",\n                \"description\": \"Display temperature for a city\",\n                \"params\": [\n                  {\n                    \"name\": \"city\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },\n              {\n                \"name\": \"city_weather\",\n                \"display_name\": \"City weather\",\n                \"description\": \"Display weather for a city\",\n                \"params\": [\n                  {\n                    \"name\": \"city\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"currency\",\n            \"display_name\": \"Currency Converter\",\n            \"api_url\": \"https://freecurrencyapi.net/\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"widgets\": [\n              {\n                \"name\": \"currency_converter\",\n                \"display_name\": \"Currency Converter\",\n                \"description\": \"Display the exchange rate of a currency\",\n                \"params\": [\n                  {\n                    \"name\": \"from\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"to\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"nasa\",\n            \"display_name\": \"NASA\",\n            \"api_url\": \"https://api.nasa.gov/\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"widgets\": [\n              {\n                \"name\": \"apod\",\n                \"display_name\": \"Astronomy Picture of the Day\",\n                \"description\": \"Display the Astronomy Picture of the Day\",\n                \"params\": [\n                  {\n                    \"name\": \"date\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },\n              {\n                \"name\": \"curiosity_image\",\n                \"display_name\": \"Curiosity Rover Image\",\n                \"description\": \"Display an image from a curiosity\",\n                \"params\": [\n                  {\n                    \"name\": \"date\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"camera\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"intra_epitech\",\n            \"display_name\": \"Intra Epitech\",\n            \"params\": [],\n            \"api_url\": \"https://intra.epitech.eu/admin/autolog\",\n            \"widgets\": [\n              {\n                \"name\": \"intra_epitech_profile\",\n                \"display_name\": \"Profile\",\n                \"description\": \"Display the profile of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_partners\",\n                \"display_name\": \"Partners\",\n                \"description\": \"Display the partners of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_notifications\",\n                \"display_name\": \"Notifications\",\n                \"description\": \"Display the notifications of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_grades\",\n                \"display_name\": \"Grades\",\n                \"description\": \"Display the grades of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"epitech_doors\",\n            \"display_name\": \"Epitech Doors\",\n            \"params\": [\n              {\n                \"name\": \"intra_autologin\",\n                \"type\": \"string\",\n              }\n            ],\n            \"api_url\": \"https://intra.epitech.eu/admin/autolog\",\n            \"widgets\": [\n              {\n                \"name\": \"epitech_doors_open_door\",\n                \"display_name\": \"Open door\",\n                \"description\": \"Open the door in epitech montpellier\",\n                \"params\": [\n                  {\n                    \"name\": \"door_name\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"intra_autologin\",\n                    \"type\": \"string\",\n                  }\n                ],\n              }\n            ]\n          },{\n            \"name\": \"office\",\n            \"display_name\": \"Office 365\",\n            \"params\": [],\n            \"api_url\": \"https://graph.microsoft.com/v1.0/me/\",\n            \"widgets\": [\n              {\n                \"name\": \"office_calendar_events\",\n                \"display_name\": \"Calendar events\",\n                \"description\": \"Display the calendar events of an office user\",\n                \"params\": [\n                  {\n                    \"name\": \"start_date\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"end_date\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"office_token\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"league_of_legends\",\n            \"display_name\": \"League of Legends\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"api_url\": \"\",\n            \"widgets\": [\n              {\n                \"name\": \"league_of_legends_summoner_profile\",\n                \"display_name\": \"Summoner profile\",\n                \"description\": \"Display the summoner profile of a league of legends user\",\n                \"params\": [\n                  {\n                    \"name\": \"summoner_name\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"region\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"api_key\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    });\n  }\n};\n\nmodule.exports = new About();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Authentication.html":{"url":"classes/Authentication.html","title":"class - Authentication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Authentication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/OAuth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/OAuth.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport { handleOAuthUsers } from './authActions';\n\nclass Authentication {\n    async post(req: express.Request, res: express.Response) {\n        return handleOAuthUsers(req, res);\n    }\n}\n\nmodule.exports = new Authentication();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Currency.html":{"url":"classes/Currency.html","title":"class - Currency","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Currency\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/currency.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getExchangeRate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getExchangeRate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getExchangeRate(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/currency.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Currency {\n    async getExchangeRate(req: express.Request, res: express.Response) {\n        try {\n            const { from, to, api_key } = req.body;\n            console.log(from, to);\n            const url: string = `https://freecurrencyapi.net/api/v2/latest?base_currency=${from}&apikey=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            let currency: number = response.data.data[to];\n            console.log('currency == ', currency);\n            return res.status(200).json({\n                \"base_currency\": from,\n                \"target_currency\": to,\n                \"rate\": currency\n            });\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Currency();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EpitechDoors.html":{"url":"classes/EpitechDoors.html","title":"class - EpitechDoors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EpitechDoors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/epitechDoors.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                openDoor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        openDoor\n                        \n                    \n                \n            \n            \n                \n                    \n                    openDoor(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/epitechDoors.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass EpitechDoors {\n    async openDoor(req: express.Request, res: express.Response) {\n        try {\n            const { autologin, door_name } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autoLogin.startsWith(\"https://intra.epitech.eu/\") == false) {\n                autoLogin = `https://intra.epitech.eu/${autologin}`;\n            }\n            console.log('autologin == ', autoLogin);\n            url = `https://epi-logue.eu/api/doors_open?login=${autologin}&door_name=${door_name}`;\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(response.status).json(response.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n};\n\nexport default new EpitechDoors();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IntraEpitech.html":{"url":"classes/IntraEpitech.html","title":"class - IntraEpitech","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IntraEpitech\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/intraEpitech.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getGrades\n                            \n                            \n                                    Async\n                                getNotifications\n                            \n                            \n                                    Async\n                                getPartners\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getGrades\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGrades(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNotifications(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPartners\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPartners(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\nimport { IntraEpitechUser } from '../../database/interfaces';\n\nclass IntraEpitech {\n    async getProfile(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n            url = `https://intra.epitech.eu/${autoLogin}/user?format=json`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            const user: IntraEpitechUser = {\n                login: response.data['login'],\n                firstname: response.data['firstname'],\n                lastname: response.data['lastname'],\n                profilePicture: response.data['picture'],\n                promo: response.data['promo'],\n                location: response.data['groups'][0]['name'],\n                semesterCode: response.data['semester_code'],\n                credits: response.data['credits'],\n                gpa: response.data['gpa'][0]['gpa'],\n            };\n            return res.status(200).json(user);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getPartners(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n    \n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n    \n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: `https://intra.epitech.eu/${autoLogin}/user?format=json`\n            });\n            const login: string = response.data['login'];\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/binome/?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response2.data['binomes']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getNotifications(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;            \n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: `https://intra.epitech.eu/${autoLogin}/user?format=json`\n            });\n            const login: string = response.data['login'];\n\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/notification/message?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(200).json(response2.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getGrades(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                autoLogin = autoLogin.substring(25);\n            }\n            url = `https://intra.epitech.eu/${autoLogin}/user?format=json`;\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            const login: string = response.data['login'];\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/notes?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(200).json(response2.data['modules']);            \n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new IntraEpitech();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IntraEpitechUser.html":{"url":"interfaces/IntraEpitechUser.html","title":"interface - IntraEpitechUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IntraEpitechUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            credits\n                                        \n                                \n                                \n                                        \n                                            firstname\n                                        \n                                \n                                \n                                        \n                                            gpa\n                                        \n                                \n                                \n                                        \n                                            lastname\n                                        \n                                \n                                \n                                        \n                                            location\n                                        \n                                \n                                \n                                        \n                                            login\n                                        \n                                \n                                \n                                        \n                                            profilePicture\n                                        \n                                \n                                \n                                        \n                                            promo\n                                        \n                                \n                                \n                                        \n                                            semesterCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        credits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        credits:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gpa\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gpa:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        location:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profilePicture\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profilePicture:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        promo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        promo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        semesterCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        semesterCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeagueOfLegends.html":{"url":"classes/LeagueOfLegends.html","title":"class - LeagueOfLegends","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeagueOfLegends\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/leagueoflegends.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/leagueoflegends.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import axios, { AxiosResponse } from 'axios';\nimport express from 'express';\nimport { LeagueOfLegendsProfileData, LeagueOfLegendsGameData } from '../../database/interfaces';\n\nclass LeagueOfLegends {\n    async getUserProfile(req: express.Request, res: express.Response) {\n        try {\n            const { api_key, summoner_name, region } = req.body;\n            let summoner_id: string = '';\n            let profileIconURL: string = '';\n            let summonerLevel: number = 0;\n            let summonerName: string = '';\n            let gameData: Array = [];\n            \n            const firstURL = `https://${region}.api.riotgames.com/lol/summoner/v4/summoners/by-name/${summoner_name}?api_key=${api_key}`;\n            \n            console.debug(\"firstURL: \", firstURL);\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: firstURL,\n            });\n            if (response.status === 200) {\n                summoner_id = response.data['id'];\n                profileIconURL = `https://ddragon.leagueoflegends.com/cdn/11.23.1/img/profileicon/${response.data['profileIconId']}.png`;\n                summonerLevel = response.data['summonerLevel'];\n                summonerName = response.data['name'];\n            }\n            const secondURL = `https://${region}.api.riotgames.com/lol/league/v4/entries/by-summoner/${summoner_id}?api_key=${api_key}`;\n            console.debug(\"secondURL: \", secondURL);\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: secondURL,\n            });\n            if (response2.status == 200) {\n                if (response2.data.length > 0) {\n                    gameData = response2.data.map((data: any) => {\n                        return {\n                            queueType: data.queueType,\n                            tier: data.tier,\n                            rank: data.rank,\n                            wins: data.wins,\n                            losses: data.losses,\n                            leaguePoints: data.leaguePoints,\n                            winRate: data.wins / (data.wins + data.losses),\n                        };\n                    });\n                    if (gameData.length == 1 && gameData[0].queueType == 'RANKED_SOLO_5x5') {\n                        gameData[1] = {\n                            queueType: 'RANKED_FLEX_SR',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        };\n                    }\n                    else if (gameData.length == 1 && gameData[0].queueType == 'RANKED_FLEX_SR') {\n                        gameData[1] = {\n                            queueType: 'RANKED_SOLO_5x5',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        };\n                    }\n                }\n                else {\n                    gameData = [\n                        {\n                            queueType: 'RANKED_FLEX_SR',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        },\n                        {\n                            queueType: 'RANKED_SOLO_5x5',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        },\n                    ];\n                }\n                console.debug(\"setting profile\");\n                let profile: LeagueOfLegendsProfileData = {\n                    summonerName,\n                    summonerLevel,\n                    profileIconURL,\n                    gameData,\n                };\n                console.debug(\"profile: \", profile);\n                return res.status(200).json(profile);\n            }\n            else {\n                return res.status(response2.status).json({\n                    error: 'Error getting user profile',\n                });\n            }\n        } catch (error) {\n            console.log(error);\n            res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new LeagueOfLegends();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LeagueOfLegendsGameData.html":{"url":"interfaces/LeagueOfLegendsGameData.html","title":"interface - LeagueOfLegendsGameData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LeagueOfLegendsGameData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            leaguePoints\n                                        \n                                \n                                \n                                        \n                                            losses\n                                        \n                                \n                                \n                                        \n                                            queueType\n                                        \n                                \n                                \n                                        \n                                            rank\n                                        \n                                \n                                \n                                        \n                                            tier\n                                        \n                                \n                                \n                                        \n                                            winRate\n                                        \n                                \n                                \n                                        \n                                            wins\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        leaguePoints\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leaguePoints:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        losses\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        losses:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queueType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queueType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rank\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rank:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tier\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tier:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        winRate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        winRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wins\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        wins:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LeagueOfLegendsProfileData.html":{"url":"interfaces/LeagueOfLegendsProfileData.html","title":"interface - LeagueOfLegendsProfileData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LeagueOfLegendsProfileData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            gameData\n                                        \n                                \n                                \n                                        \n                                            profileIconURL\n                                        \n                                \n                                \n                                        \n                                            summonerLevel\n                                        \n                                \n                                \n                                        \n                                            summonerName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        gameData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gameData:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileIconURL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profileIconURL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        summonerLevel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        summonerLevel:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        summonerName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        summonerName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Login.html":{"url":"classes/Login.html","title":"class - Login","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Login\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/login.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/login.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport { getUsers, updateInfos } from \"../../database/databaseActions\";\nimport { UserInformations } from \"../../database/interfaces\";\nimport jwt from 'jsonwebtoken';\nimport moment from \"moment\";\n\nclass Login {\n    async post(req: express.Request, res: express.Response) {\n        const { mail, password } = req.body;\n\n        if (!mail || !password) {\n            return res.status(400).json({\n                valid: false,\n                message: \"mail and password are required\"\n            });\n        }\n\n        const user: UserInformations = {\n            mail: mail,\n            google_mail: undefined,\n            google_token: undefined,\n            facebook_mail: undefined,\n            facebook_token: undefined,\n            apple_mail: undefined,\n            apple_token: undefined,\n            office_mail: undefined,\n            office_token: undefined,\n            username: undefined,\n            password: password\n        };\n\n        const expiresIn: number = Number(process.env.EXPIRE_TIME) || 60 * 60;\n        const payload = {\n            mail: mail\n        };\n        const newToken: string = jwt.sign(\n            payload,\n            process.env.JWT_SECRET,\n            { expiresIn: expiresIn }\n        );\n\n        await getUsers(user, async (err: any, result: any) => {\n            if (err) {\n                return res.status(500).json({\n                    valid: false,\n                    message: err\n                });\n            } else {\n                let _result = result;\n                if (result.length === 0) {\n                    return res.status(400).json({\n                        valid: false,\n                        message: \"mail or password is incorrect\"\n                    });\n                } else {\n                    _result['token'] = newToken;\n                    _result['token_created_at'] = moment().format('YYYY-MM-DD HH:mm:ss');\n                    await updateInfos(['token', 'token_created_at'], [newToken, moment().format('YYYY-MM-DD HH:mm:ss')], 'mail', mail, (err: any, result: any) => {\n                        if (err) {\n                            return res.status(500).json({\n                                valid: false,\n                                message: err\n                            });\n                        } else {\n                            return res.status(200).json({ error: false, message: \"user logged in\", token: newToken, expiresIn: expiresIn, result: _result });\n                        }\n                    });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Login();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Nasa.html":{"url":"classes/Nasa.html","title":"class - Nasa","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Nasa\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/nasa.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getNasaDayImage\n                            \n                            \n                                    Async\n                                getNasaRoverImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNasaDayImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNasaDayImage(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/nasa.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNasaRoverImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNasaRoverImage(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/nasa.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport axios, { AxiosResponse } from \"axios\";\n\nclass Nasa {\n    async getNasaDayImage(req: express.Request, res: express.Response) {\n        try {\n            const { date, api_key } = req.body;\n            // const apiKey: string = process.env.NASA_API_KEY;\n            const url = `https://api.nasa.gov/planetary/apod?api_key=${api_key}&date=${date}`;\n\n            let response: AxiosResponse = await axios({\n                method: \"get\",\n                url: url\n            });\n            return res.status(200).json(response.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getNasaRoverImage(req: express.Request, res: express.Response) {\n        try {\n            const { date, camera, api_key } = req.body;\n            // const apiKey: string = process.env.NASA_API_KEY;\n            const url = `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=${date}&camera=${camera}&api_key=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: \"get\",\n                url: url\n            });\n            let data = response.data.photos;\n            let photo: any = data[0] ? data[0] : {};\n\n            return res.status(200).json(photo);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Nasa();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Office.html":{"url":"classes/Office.html","title":"class - Office","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Office\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/office.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCalendarEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCalendarEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCalendarEvents(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/office.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Office {\n    async getCalendarEvents(req: express.Request, res: express.Response) {\n        try {\n            const { start_date, office_token, end_date } = req.body;\n            \n            const url = `https://graph.microsoft.com/v1.0/me/calendarview?startdatetime=${start_date}&enddatetime=${end_date}`;\n    \n            let response: AxiosResponse = await axios({\n                method: 'GET',\n                url,\n                headers: {\n                    'Authorization': `Bearer ${office_token}`\n                }\n            });\n            return res.status(200).json(response.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Office();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/profile/profile.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/profile/profile.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport { getRow, getUsers } from '../../database/databaseActions';\n\nclass Profile {\n    async get(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                console.log(\"heeeeeeeeeeeeeeeeeeeeere\");\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            console.log(\"heeeeeeeeeeeeeeeeeeeeere2\");\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n        await getRow('token', token, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                return res.status(500).json({ error: false, message: \"internal server error\" });\n            } else {\n                if (result.length === 0) {\n                    return res.status(404).json({ error: false, message: \"user not found\" });\n                } else {\n                    console.log(\"result == \", result);\n                    console.log(\"result[0] == \", result[0]);\n                    let rslt = result[0];\n                    let user = {\n                        mail: rslt['mail'],\n                        google_mail: rslt['google_mail'],\n                        facebook_mail: rslt['facebook_mail'],\n                        outlook_mail: rslt['outlook_mail'],\n                        apple_mail: rslt['apple_mail'],\n                        office_mail: rslt['office_mail'],\n                    };\n\n                    return res.status(200).json({ error: true, message: \"user found\", result: user });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Profile();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileUpdate.html":{"url":"classes/ProfileUpdate.html","title":"class - ProfileUpdate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileUpdate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/profile/profileUpdate.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/profile/profileUpdate.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { updateUserInformations } from \"./profileActions\";\n\nclass ProfileUpdate {\n    async patch(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                console.log(\"heeeeeeeeeeeeeeeeeeeeere\");\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            console.log(\"heeeeeeeeeeeeeeeeeeeeere2\");\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n        await updateUserInformations(req, res);\n    }\n}\n\nmodule.exports = new ProfileUpdate();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Register.html":{"url":"classes/Register.html","title":"class - Register","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Register\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/register.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/register.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\"\nimport { UserInformations } from \"../../database/interfaces\";\nimport { registerBasicUser } from \"./registerActions\";\n\nclass Register {\n    async post(req: express.Request, res: express.Response) {\n        const { mail, password } = req.body;\n\n        const infos: UserInformations = {\n            mail: mail,\n            google_mail: undefined,\n            google_token: undefined,\n            facebook_mail: undefined,\n            facebook_token: undefined,\n            apple_mail: undefined,\n            apple_token: undefined,\n            office_mail: undefined,\n            office_token: undefined,\n            username: undefined,\n            password: password,\n        };\n        let result = await registerBasicUser(infos);\n\n        if (result.error === true) {\n            return res.status(500).json({\n                error: true,\n                message: result.message,\n            });\n        }\n        if (result.error === false && result.message === \"user already exists\") {\n            return res.status(403).json({ error: true, message: result.message });\n        }\n        return res.status(200).json({ error: false, message: result.message, result: result.result });\n    }\n}\n\nmodule.exports = new Register();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Temperature.html":{"url":"classes/Temperature.html","title":"class - Temperature","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Temperature\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/temperature.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTemperature\n                            \n                            \n                                    Async\n                                getWeather\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTemperature\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTemperature(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/temperature.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getWeather\n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeather(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/temperature.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Temperature {\n    async getTemperature(req: express.Request, res: express.Response) {\n        try {\n            const { city, api_key } = req.body;\n            // const apikey: string = process.env.WEATHER_API_KEY;\n            const url: string = `http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response.data['main']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getWeather(req: express.Request, res: express.Response) {\n        try {\n            const { city, api_key } = req.body;\n            // const apikey: string = process.env.WEATHER_API_KEY;\n            const url: string = `http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response.data['weather']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n};\n\nexport default new Temperature();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Token.html":{"url":"classes/Token.html","title":"class - Token","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Token\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/token.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/token.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/token.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport moment from 'moment';\nimport { updateInfos } from '../../database/databaseActions';\nimport Utils from '../../utils/utils';\nimport { checkToken } from './tokenAction';\n\nclass Token {\n    async get(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                console.log(\"heeeeeeeeeeeeeeeeeeeeere\");\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            console.log(\"heeeeeeeeeeeeeeeeeeeeere2\");\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n        checkToken(token, (err: any, result: any) => {\n            if (err || result === [] || result === null || result === undefined || result.length === 0) {\n                console.debug(result);\n                return res.status(401).json({ valid: false, message: \"token invalid or not found\" });\n            } else {\n                let createdAt: moment.Moment = moment(result[0].token_created_at);\n                let now: moment.Moment = moment();\n                let diff: number = now.diff(createdAt, 'seconds');\n                if (diff  {\n            if (err) {\n                console.debug(err);\n                return res.status(500).json({ valid: false, message: \"internal server error\" });\n            } else {\n                if (result.affectedRows === 0) {\n                    return res.status(401).json({ valid: false, message: \"token invalid or not found\" });\n                } else {\n                    return res.status(200).json({ valid: true, message: \"token valid\", expiresIn: expiresIn, token: newToken, result: result.result });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Token();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserInformations.html":{"url":"interfaces/UserInformations.html","title":"interface - UserInformations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserInformations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apple_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            apple_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            facebook_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            facebook_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            google_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            google_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            office_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            office_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apple_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apple_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        apple_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apple_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        facebook_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        facebook_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        google_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        google_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        office_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        office_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        office_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        office_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Utils.html":{"url":"classes/Utils.html","title":"class - Utils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Utils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/utils.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRandomString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRandomString\n                        \n                    \n                \n            \n            \n                \ngetRandomString(length: number)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/utils.ts:2\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        class Utils {\n    getRandomString(length: number): string {\n        let text: string = \"\";\n        let possible: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!$&#@.\";\n        for (let i: number = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Widget.html":{"url":"classes/Widget.html","title":"class - Widget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Widget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/widget.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widget.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport Currency from './currency';\nimport Nasa from './nasa';\nimport Temperature from './temperature';\nimport IntraEpitech from './intraEpitech';\nimport Office from './office';\nimport leagueoflegends from './leagueoflegends';\nimport EpitechDoors from './epitechDoors';\n\nclass Widget {\n    async post(req: express.Request, res: express.Response) {\n        let valid: boolean = true;\n        const type: string = req.params.type;\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n\n        switch (type) {\n            case 'currency_converter':\n                return await Currency.getExchangeRate(req, res);\n            case 'city_temperature':\n                return await Temperature.getTemperature(req, res);\n            case 'city_weather':\n                return await Temperature.getWeather(req, res);\n            case 'apod':\n                return await Nasa.getNasaDayImage(req, res);\n            case 'curiosity_image':\n                return await Nasa.getNasaRoverImage(req, res);\n            case 'intra_epitech_profile':\n                return await IntraEpitech.getProfile(req, res);\n            case 'intra_epitech_partners':\n                return await IntraEpitech.getPartners(req, res);\n            case 'intra_epitech_notifications':\n                return await IntraEpitech.getNotifications(req, res);\n            case 'epitech_doors_open_door':\n                return await EpitechDoors.openDoor(req, res);\n            case 'intra_epitech_grades':\n                return await IntraEpitech.getGrades(req, res);\n            case 'office_calendar_events':\n                return await Office.getCalendarEvents(req, res);\n            case 'league_of_legends_summoner_profile':\n                return await leagueoflegends.getUserProfile(req, res);\n            default:\n                return res.status(404).json({ error: true, message: \"widget not found\" });\n        }\n    }\n}\n\nmodule.exports = new Widget();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WidgetsDB.html":{"url":"classes/WidgetsDB.html","title":"class - WidgetsDB","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WidgetsDB\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/widgetsdb.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widgetsdb.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widgetsdb.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport { getWidgetsByUserId, getUserByToken, addWidget, updateWidget } from '../../database/databaseActions';\nimport jwt from 'jsonwebtoken';\n\nclass WidgetsDB {\n    async get(req: express.Request, res: express.Response) {\n        try {\n            let token: string = req.headers.authorization;\n\n            if (!token) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token not found\"\n                });\n            }\n            token = token.split(\" \")[1];\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n\n            if (!decoded) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token invalid\"\n                });\n            }\n            await getUserByToken(token, async(err: any, user: any) => {\n                if (err) {\n                    console.debug(err);\n                    return res.status(500).json({\n                        valid: false,\n                        message: \"error\"\n                    });\n                } else {\n                    if (user.length === 0) {\n                        return res.status(404).json({\n                            valid: false,\n                            message: \"user not found\"\n                        });\n                    } else {\n                        let userId = user[0]['id'];\n                        await getWidgetsByUserId(userId, (err: any, result: any) => {\n                            if (err) {\n                                console.debug(err);\n                                return res.status(500).json({\n                                    valid: false,\n                                    message: \"error\"\n                                });\n                            }\n                            return res.status(200).json({\n                                valid: true,\n                                message: \"success\",\n                                data: result\n                            });\n                        });\n                    }\n                }\n            });\n        } catch (error) {\n            console.log(error);\n            return res.status(401).json({\n                valid: false,\n                message: \"token invalid\"\n            });\n        }\n    }\n\n    async patch(req: express.Request, res: express.Response) {\n        try {\n            let token: string = req.headers.authorization;\n            const { widgets } = req.body;            \n\n            if (!token) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token not found\"\n                });\n            }\n            token = token.split(\" \")[1];\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n\n            if (!decoded) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token invalid\"\n                });\n            }\n            await getUserByToken(token, async(err: any, user: any) => {\n                if (err) {\n                    console.debug(err);\n                    return res.status(500).json({\n                        valid: false,\n                        message: \"error\"\n                    });\n                } else {\n                    if (user.length === 0) {\n                        return res.status(404).json({\n                            valid: false,\n                            message: \"user not found\"\n                        });\n                    } else {\n                        let userId = user[0]['id'];\n                        await getWidgetsByUserId(userId, async(err: any, result: any) => {\n                            if (err) {\n                                console.debug(err);\n                                return res.status(500).json({\n                                    valid: false,\n                                    message: \"error\"\n                                });\n                            }\n                            if (result.length === 0) {\n                                await addWidget(userId, widgets, (err: any, result: any) => {\n                                    if (err) {\n                                        console.debug(err);\n                                        return res.status(500).json({\n                                            valid: false,\n                                            message: \"error\"\n                                        });\n                                    }\n                                    return res.status(200).json({\n                                        valid: true,\n                                        message: \"success\",\n                                        data: result\n                                    });\n                                });\n                            }\n                            else {\n                                await updateWidget(userId, widgets, (err: any, result: any) => {\n                                    if (err) {\n                                        console.debug(err);\n                                        return res.status(500).json({\n                                            valid: false,\n                                            message: \"error\"\n                                        });\n                                    }\n                                    return res.status(200).json({\n                                        valid: true,\n                                        message: \"success\",\n                                        data: result\n                                    });\n                                });\n                            }\n                        });\n                    }\n                }\n            }\n        )}\n        catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                valid: false,\n                message: \"error\"\n            });\n        }\n    }\n};\n\nmodule.exports = new WidgetsDB();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/database/database.ts\n            \n            variable\n            db\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            addUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            addWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            deleteWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getRow\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getUserByToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getWidgetsByUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateInfos\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateUserAuthToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            IntraEpitechUser\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            LeagueOfLegendsGameData\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            LeagueOfLegendsProfileData\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            UserInformations\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            app\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            server\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/request_handler.ts\n            \n            function\n            requestHandler\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/request_handler.ts\n            \n            variable\n            TOKEN_WL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes.ts\n            \n            function\n            addRoute\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/about/about.ts\n            \n            class\n            About\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/OAuth.ts\n            \n            class\n            Authentication\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/authActions.ts\n            \n            variable\n            handleOAuthUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/authActions.ts\n            \n            variable\n            handleOAuthUsersAction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/login.ts\n            \n            class\n            Login\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/register.ts\n            \n            class\n            Register\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/registerActions.ts\n            \n            variable\n            registerBasicUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/token.ts\n            \n            class\n            Token\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/auth/tokenAction.ts\n            \n            variable\n            checkToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/profile/profile.ts\n            \n            class\n            Profile\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/profile/profileActions.ts\n            \n            variable\n            updateUserInformations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/profile/profileUpdate.ts\n            \n            class\n            ProfileUpdate\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/currency.ts\n            \n            class\n            Currency\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/epitechDoors.ts\n            \n            class\n            EpitechDoors\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/intraEpitech.ts\n            \n            class\n            IntraEpitech\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/routes/widgets/leagueoflegends.ts\n            \n            class\n            LeagueOfLegends\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/nasa.ts\n            \n            class\n            Nasa\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/widgets/office.ts\n            \n            class\n            Office\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/temperature.ts\n            \n            class\n            Temperature\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/widgets/widget.ts\n            \n            class\n            Widget\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/widgetsdb.ts\n            \n            class\n            WidgetsDB\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/utils.ts\n            \n            class\n            Utils\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            cors : ^2.8.5\n        \n            dotenv : ^10.0.0\n        \n            express : ^4.17.1\n        \n            jsonwebtoken : ^8.5.1\n        \n            moment : ^2.29.1\n        \n            mysql2 : ^2.3.3-rc.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addRoute   (src/.../routes.ts)\n                        \n                        \n                            requestHandler   (src/.../request_handler.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addRoute\n                        \n                    \n                \n            \n            \n                \naddRoute(endpoint: string, service: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    service\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/request_handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        requestHandler\n                        \n                    \n                \n            \n            \n                \nrequestHandler(req, res, next)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    17 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addUsers   (src/.../databaseActions.ts)\n                        \n                        \n                            addWidget   (src/.../databaseActions.ts)\n                        \n                        \n                            app   (src/.../index.ts)\n                        \n                        \n                            checkToken   (src/.../tokenAction.ts)\n                        \n                        \n                            db   (src/.../database.ts)\n                        \n                        \n                            deleteWidget   (src/.../databaseActions.ts)\n                        \n                        \n                            getRow   (src/.../databaseActions.ts)\n                        \n                        \n                            getUserByToken   (src/.../databaseActions.ts)\n                        \n                        \n                            getUsers   (src/.../databaseActions.ts)\n                        \n                        \n                            getWidgetsByUserId   (src/.../databaseActions.ts)\n                        \n                        \n                            handleOAuthUsers   (src/.../authActions.ts)\n                        \n                        \n                            handleOAuthUsersAction   (src/.../authActions.ts)\n                        \n                        \n                            registerBasicUser   (src/.../registerActions.ts)\n                        \n                        \n                            routes   (src/.../routes.ts)\n                        \n                        \n                            server   (src/.../index.ts)\n                        \n                        \n                            TOKEN_WL   (src/.../request_handler.ts)\n                        \n                        \n                            updateInfos   (src/.../databaseActions.ts)\n                        \n                        \n                            updateUserAuthToken   (src/.../databaseActions.ts)\n                        \n                        \n                            updateUserInformations   (src/.../profileActions.ts)\n                        \n                        \n                            updateWidget   (src/.../databaseActions.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/databaseActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, callback: Function) => {\n    let query: string = \"INSERT into users (\";\n    let wasFound: boolean = false;\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"mail, password) VALUES ('\"\n                + infos.mail + \"', '\" + infos.password + \"');\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"google_mail, google_token) VALUES ('\"\n                + infos.google_mail + \"', '\" + infos.google_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"facebook_mail, facebook_token) VALUES ('\"\n                + infos.facebook_mail + \"', '\" + infos.facebook_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"apple_mail, apple_token) VALUES ('\"\n                + infos.apple_mail + \"', '\" + infos.apple_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"office_mail, office_token) VALUES ('\"\n                + infos.office_mail + \"', '\" + infos.office_token + \"');\";\n            wasFound = true;\n        }\n\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widget: string, callback: Function) => {\n    let query: string = \"INSERT INTO widgets (user_id, data) VALUES ('\" + userId + \"', '\" + JSON.stringify(widget) + \"');\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widgetId: string, callback: Function) => {\n    let query: string = \"DELETE FROM widgets WHERE user_id = '\" + userId + \"' AND id = '\" + widgetId + \"';\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRow\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (row: string, value: string, callback: Function) => {\n    let query: string = \"SELECT * FROM users WHERE \" + row + \" = '\" + value + \"' LIMIT 1;\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserByToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (token: string, callback: Function) => {\n    let query: string = \"SELECT * FROM users WHERE token = '\" + token + \"';\";\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(\"[getUserByToken] err \", err);\n                callback(err);\n            } else {\n                console.debug(\"[getUserByToken] success \", result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, callback: Function) => {\n    let wasFound: boolean = false;\n    let query: string = \"SELECT * FROM users WHERE \";\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"mail = '\" + infos.mail + \"' AND password = '\" + infos.password + \"';\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"google_mail = '\" + infos.google_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"facebook_mail = '\" + infos.facebook_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"apple_mail = '\" + infos.apple_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"office_mail = '\" + infos.office_mail + \"';\";\n            wasFound = true;\n        }\n\n        console.debug(\"query == \", query);\n\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(\"[getUser] err \", err);\n                callback(err);\n            } else {\n                console.debug(\"[getUser] success \", result);\n                callback(null, result);\n            }\n        });\n\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getWidgetsByUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, callback: Function) => {\n    let query: string = \"SELECT * FROM widgets WHERE user_id = '\" + userId + \"';\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateInfos\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n    rows: Array, newValues: Array,\n    whereRow: string, whereValue: string, callback: Function) => {\n    let query: string = 'UPDATE users SET ';\n\n    for (let i = 0; i  {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n            \n                \n                    updates a row in the users table\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserAuthToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, jwtToken: string, callback: Function) => {\n    let query: string = \"UPDATE users SET \";\n    let wasFound: boolean = false;\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE mail = '\" + infos.mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE google_mail = '\" + infos.google_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE facebook_mail = '\" + infos.facebook_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE apple_mail = '\" + infos.apple_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE office_mail = '\" + infos.office_mail + \"';\";\n            wasFound = true;\n        }\n\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err || result.affectedRows === 0) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widget: string, callback: Function) => {\n    let query: string = \"UPDATE widgets SET data = '\" + widget + \"' WHERE user_id = '\" + userId + \"';\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n\n    src/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        app\n                        \n                    \n                \n            \n                \n                    \n                        Default value : express()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"http\").Server(app)\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/tokenAction.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        checkToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (token: string, callback: Function) => {\n    const queryString: string = \"SELECT * FROM users WHERE token = '\" + token + \"' LIMIT 1;\";\n    db.query(queryString, (err: any, result: any) => {\n        if (err) {\n            callback(err);\n        } else {\n            console.log(\"res == \", result);\n            callback(null, result);\n        }\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/database/database.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mysql.createConnection({\n    host: process.env.MY_SQL_HOST,\n    user: process.env.MY_SQL_USER,\n    password: process.env.MY_SQL_PASSWORD,\n    database: process.env.MY_SQL_DATABASE,\n})\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/authActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleOAuthUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (req: express.Request, res: express.Response) => {\n    try {\n        const type: string = req.params.type;\n        const { access_token } = req.body;\n        let user: { type: string, userJson: any } = { type: '', userJson: {} };\n        let response: AxiosResponse;\n\n        switch (type) {\n            case 'google_user':\n                console.log('bearer token == ', access_token);\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.debug(\"response == \", response.data);\n                let googleUser = response.data;\n                user = { type: 'google_user', userJson: googleUser };\n                break;\n            case 'facebook_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.facebook.com/me/?fields=id,name,email',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let facebookUser = response.data;\n                user = { type: 'facebook_user', userJson: facebookUser };\n                break;\n            case 'office_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.microsoft.com/v1.0/me',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.log(\"response == \", response.data);\n                let officeUser = response.data;\n                user = { type: 'office_user', userJson: officeUser };\n                break;\n            default:\n                return res.status(400).json({ message: 'Bad request' });\n        }\n\n        const infos: UserInformations = {\n            mail: undefined,\n            google_mail: (user.type === 'google_user') ? user.userJson.email : undefined,\n            google_token: (user.type === 'google_user') ? access_token : undefined,\n            facebook_mail: (user.type === 'facebook_user') ? user.userJson.email : undefined,\n            facebook_token: (user.type === 'facebook_user') ? access_token : undefined,\n            apple_mail: (user.type === 'apple_user') ? user.userJson.email : undefined,\n            apple_token: (user.type === 'apple_user') ? access_token : undefined,\n            office_mail: (user.type === 'office_user') ? user.userJson.mail : undefined,\n            office_token: (user.type === 'office_user') ? access_token : undefined,\n            username: undefined,\n            password: undefined,\n        };\n\n        const result = await handleOAuthUsersAction(infos);\n        if (result.error === true) {\n            return res.status(500).json({\n                error: result.error,\n                message: result.message,\n            });\n        }\n        if (result.message === \"user created\") {\n            return res.status(200).json({ error: false, message: \"user created\", result: result.result });\n        }\n        if (result.message === \"user already exists\") {\n            const expiresIn: number = Number(process.env.EXPIRE_TIME) || 60 * 60;\n            const payload = {\n                mail: (user.type === 'google_user') ? user.userJson.email : (user.type === 'facebook_user') ? user.userJson.email : (user.type === 'apple_user') ? user.userJson.email : (user.type === 'office_user') ? user.userJson.email : \"none\",\n            };\n            const token: string = jwt.sign(\n                payload,\n                process.env.JWT_SECRET,\n                { expiresIn: expiresIn }\n            );\n            await updateUserAuthToken(infos, token, (err: any, result: any) => {\n                if (err) {\n                    console.debug('[handleOAuthUsersAction] | error[updateUserAuthToken] = ', err);\n                } else {\n                    console.debug('[handleOAuthUsersAction] | result[updateUserAuthToken] = ', result);\n                }\n            });\n            return res.status(200).json({ error: false, message: \"user logged in\", expiresIn: expiresIn, token: token, result: result.result });\n        }\n    } catch (err) {\n        console.debug('[handleOAuthUsersAction] | error = ', err);\n        return res.status(500).json({ error: true, message: \"server error\" });\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleOAuthUsersAction\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations): Promise => {\n    return new Promise(async (resolve, reject) => {\n        await getUsers(infos, async (err: any, result: any) => {\n            if (err) {\n                console.debug('[handleOAuthUsersAction] | error[getUsers] = ', err);\n                await addUsers(infos, (err: any, result: any) => {\n                    if (err) {\n                        console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                        return resolve({ error: true, message: \"internal error\" });\n                    } else {\n                        console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                        return resolve({ error: false, message: \"user created\", result: result });\n                    }\n                });\n            } else {\n                console.debug('[handleOAuthUsersAction] | result[getUsers] = ', result);\n                if (result.length === 0) {\n                    await addUsers(infos, (err: any, result: any) => {\n                        if (err) {\n                            console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                            return resolve({ error: true, message: \"internal error\" });\n                        } else {\n                            console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                            return resolve({ error: false, message: \"user created\", result: result });\n                        }\n                    });\n                } else {\n                    return resolve({ error: false, message: \"user already exists\", result: result });\n                }\n            }\n        });\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/registerActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        registerBasicUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations): Promise => {\n    return new Promise(async (resolve, reject) => {\n        await getUsers(infos, async (err: any, result: any) => {\n            if (err) {\n                console.debug('[handleOAuthUsersAction] | error[getUsers] = ', err);\n                await addUsers(infos, (err: any, result: any) => {\n                    if (err) {\n                        console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                        return resolve({ error: true, message: \"internal error\" });\n                    } else {\n                        console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                        return resolve({ error: false, message: \"user created\", result: result });\n                    }\n                });\n            } else {\n                console.debug('[handleOAuthUsersAction] | result[getUsers] = ', result);\n                if (result.length === 0) {\n                    await addUsers(infos, (err: any, result: any) => {\n                        if (err) {\n                            console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                            return resolve({ error: true, message: \"internal error\" });\n                        } else {\n                            console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                            return resolve({ error: false, message: \"user created\", result: result });\n                        }\n                    });\n                } else {\n                    return resolve({ error: false, message: \"user already exists\", result: result });\n                }\n            }\n        });\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        routes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n\n\n        \n    \n\n    src/request_handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TOKEN_WL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(register|login)/\n                    \n                \n\n\n        \n    \n\n    src/routes/profile/profileActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        updateUserInformations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (req: express.Request, res: express.Response) => {\n    try {\n        const type: string = req.params.type;\n        const { access_token, existingInformation, existingInformationType } = req.body;\n        let response: AxiosResponse;\n        let user: { type: string, userJson: any } = { type: '', userJson: {} };\n\n        switch (type) {\n            case 'google_user':\n                console.log('bearer token == ', access_token);\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.debug(\"response == \", response.data);\n                let googleUser = response.data;\n                user = { type: 'google_user', userJson: googleUser };\n                break;\n            case 'facebook_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.facebook.com/me/?fields=id,name,email',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let facebookUser = response.data;\n                user = { type: 'facebook_user', userJson: facebookUser };\n                break;\n            case 'office_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.microsoft.com/v1.0/me',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.log(\"response == \", response.data);\n                let officeUser = response.data;\n                user = { type: 'office_user', userJson: officeUser };\n                break;\n            case 'plain_user':\n                let plainUser = {\n                    mail: req.body.mail,\n                    password: req.body.password,\n                };\n                user = { type: 'plain_user', userJson: plainUser };\n                break;\n            default:\n                return res.status(400).json({ message: 'Bad request' });\n        };\n\n        if (user.type === 'google_user') {\n            await updateInfos(['google_mail', 'google_token'], [user.userJson.email, access_token], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n        if (user.type === 'office_user') {\n            await updateInfos(['office_mail', 'office_token'], [user.userJson.email, access_token], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n        if (user.type === 'facebook_user') {\n            await updateInfos(['facebook_mail', 'facebook_token'], [user.userJson.email, access_token], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n        if (user.type === 'plain_user') {\n            await updateInfos(['mail', 'password'], [user.userJson.mail, user.userJson.password], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n    } catch (error) {\n        console.error(error);\n        return res.status(500).json({ message: 'server error' });\n    }\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
