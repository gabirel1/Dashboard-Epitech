var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/About.html",[0,0.232]],["body/classes/About.html",[0,0.149,1,0.341,2,0.287,3,0.287,4,0.235,5,1.779,6,0.142,7,0.582,8,0.687,9,2.193,10,0.687,11,0.587,12,0.687,13,0.4,14,2.197,15,0.341,16,0.05,17,0.87,18,0.347,19,0.287,20,0.341,21,0.4,22,0.463,23,0.674,24,0.497,25,1.893,26,4.154,27,0.701,28,2.197,29,2.197,30,2.197,31,0.4,32,0.88,33,2.197,34,1.779,35,0.687,36,2.197,37,2.197,38,2.197,39,4.154,40,5.272,41,4.154,42,2.197,43,5.272,44,2.234,45,4.154,46,1.779,47,3.734,48,1.654,49,5.055,50,4.975,51,1.779,52,2.144,53,3.203,54,2.197,55,1.779,56,2.197,57,1.779,58,1.654,59,2.197,60,1.779,61,3.203,62,3.203,63,3.203,64,2.594,65,1.779,66,3.203,67,2.197,68,3.203,69,1.779,70,2.197,71,4.416,72,4.611,73,2.197,74,1.779,75,1.893,76,1.886,77,3.576,78,1.779,79,3.203,80,1.779,81,3.203,82,1.779,83,3.203,84,1.779,85,3.203,86,2.197,87,2.197,88,2.197,89,1.779,90,0.778,91,0.341,92,0.027,93,0.027]],["title/classes/Authentication.html",[0,0.186,94,1.873]],["body/classes/Authentication.html",[0,0.261,1,0.597,2,0.501,3,0.501,4,0.412,6,0.248,7,0.847,8,0.911,10,0.911,11,0.809,12,0.911,13,0.699,15,0.597,16,0.048,17,0.597,18,0.248,19,0.501,20,0.597,21,0.699,22,0.809,23,0.981,24,0.723,31,0.699,90,1.362,91,0.597,92,0.04,93,0.04,94,3.431,95,3.114,96,2.405,97,2.405,98,3.845,99,2.632,100,3.845,101,3.845]],["title/classes/Currency.html",[0,0.186,52,1.413]],["body/classes/Currency.html",[0,0.231,1,0.528,2,0.444,3,0.444,4,0.365,6,0.22,7,0.786,8,0.863,10,0.863,11,0.737,12,0.863,13,0.619,15,0.528,16,0.049,17,0.528,18,0.22,19,0.444,20,0.528,21,0.619,22,0.717,23,0.909,24,0.671,27,0.444,31,0.786,32,1.364,35,1.065,44,2.012,52,2.717,57,2.757,91,0.528,92,0.037,93,0.037,102,2.757,103,4.32,104,4.32,105,3.404,106,2.449,107,2.23,108,1.065,109,1.146,110,1.364,111,3.404,112,2.33,113,3.404,114,2.449,115,3.404,116,1.757,117,0.938,118,1.757,119,1.364,120,3.404,121,3.404,122,3.404,123,3.404,124,1.065,125,1.146,126,2.012,127,1.065,128,1.364,129,1.546,130,1.546]],["title/classes/IntraEpitech.html",[0,0.186,131,1.617]],["body/classes/IntraEpitech.html",[0,0.124,1,0.284,2,0.239,3,0.239,4,0.196,6,0.118,7,0.509,8,0.936,10,0.936,11,0.799,12,0.936,13,0.743,15,0.635,16,0.05,17,0.635,18,0.264,19,0.533,20,0.635,21,0.743,22,0.861,23,0.714,24,0.434,27,0.658,31,0.879,35,1.278,76,0.832,77,4.378,89,1.483,91,0.284,92,0.024,93,0.024,106,2.495,107,2.445,108,1.278,109,1.144,110,1.638,114,2.801,116,2.11,117,1.273,118,2.386,124,1.278,125,1.243,126,2.416,127,1.278,128,1.638,129,0.832,130,0.832,131,2.004,132,1.483,133,2.796,134,2.796,135,2.796,136,2.796,137,2.796,138,2.796,139,1.832,140,2.796,141,1.832,142,2.796,143,1.832,144,2.796,145,1.832,146,2.796,147,1.832,148,1.443,149,1.254,150,4.088,151,3.796,152,3.796,153,1.723,154,3.796,155,1.254,156,1.832,157,1.254,158,1.832,159,1.254,160,1.832,161,1.254,162,1.832,163,1.254,164,1.832,165,1.254,166,1.832,167,1.254,168,1.832,169,1.254,170,1.832,171,1.832,172,1.832,173,3.392,174,1.832,175,1.832,176,1.832,177,1.832,178,1.832,179,0.649,180,1.832,181,1.832,182,1.832,183,1.832,184,1.832]],["title/interfaces/IntraEpitechUser.html",[148,1.413,185,1.413]],["body/interfaces/IntraEpitechUser.html",[2,0.433,3,0.433,4,0.355,6,0.214,16,0.048,18,0.351,27,0.752,92,0.036,93,0.036,119,2.095,129,1.929,148,2.194,153,2.244,155,3.384,157,3.384,159,3.384,161,3.384,163,3.384,165,3.384,167,3.384,169,3.384,185,2.194,186,2.271,187,2.271,188,3.441,189,1.33,190,1.507,191,1.507,192,1.713,193,1.507,194,1.713,195,1.507,196,1.713,197,1.507,198,1.713,199,1.713,200,1.713]],["title/classes/Login.html",[0,0.186,153,1.242]],["body/classes/Login.html",[0,0.183,1,0.418,2,0.351,3,0.351,4,0.289,6,0.174,7,0.673,8,0.827,10,0.769,11,0.656,12,0.769,13,0.49,15,0.418,16,0.05,17,0.418,18,0.174,19,0.351,20,0.418,21,0.49,22,0.567,23,1.004,24,0.574,25,2.187,27,0.351,31,0.867,32,1.079,76,1.68,90,0.954,91,0.418,92,0.032,93,0.032,96,1.91,97,1.91,109,1.152,110,1.079,117,1.019,119,1.079,125,0.651,127,1.157,149,1.844,153,1.919,179,1.689,189,1.483,190,2.396,191,1.223,192,1.39,193,1.223,194,1.39,195,1.223,196,1.39,197,1.223,198,1.39,199,1.39,200,2.544,201,2.181,202,2.694,203,1.592,204,1.592,205,1.844,206,1.39,207,1.223,208,2.996,209,2.349,210,1.911,211,2.694,212,3.083,213,3.265,214,2.181,215,2.996,216,2.996,217,3.685,218,2.181,219,1.223,220,2.694,221,2.912,222,2.349,223,3.7,224,1.592,225,1.223,226,2.694,227,2.694,228,2.694,229,2.996,230,2.996,231,2.996,232,2.996,233,2.694,234,2.181,235,2.181,236,0.954]],["title/classes/Nasa.html",[0,0.186,58,1.413]],["body/classes/Nasa.html",[0,0.2,1,0.457,2,0.384,3,0.384,4,0.316,6,0.19,7,0.715,8,0.92,10,0.92,11,0.786,12,0.92,13,0.715,15,0.61,16,0.049,17,0.61,18,0.254,19,0.513,20,0.61,21,0.715,22,0.828,23,0.828,24,0.61,27,0.513,31,0.859,35,1.229,44,2.323,58,2.284,64,3.184,69,2.385,91,0.457,92,0.034,93,0.034,106,2.437,107,2.284,108,1.229,109,1.222,110,1.575,112,2.691,114,2.612,116,2.029,117,1.083,118,2.029,124,1.229,125,1.222,126,2.323,127,1.229,128,1.575,129,1.337,130,1.337,237,2.385,238,3.931,239,3.931,240,3.931,241,2.946,242,3.931,243,2.946,244,3.931,245,2.946,246,2.946,247,2.946,248,2.946,249,2.946,250,2.946,251,2.946,252,3.931,253,2.946]],["title/classes/Profile.html",[0,0.186,75,1.617]],["body/classes/Profile.html",[0,0.198,1,0.454,2,0.381,3,0.381,4,0.313,6,0.189,7,0.711,8,0.802,9,2.678,10,0.802,11,0.684,12,0.802,13,0.532,15,0.454,16,0.05,17,0.454,18,0.189,19,0.381,20,0.454,21,0.532,22,0.615,23,0.928,24,0.607,27,0.51,31,0.918,32,1.172,35,0.914,75,2.605,76,2.137,90,1.035,91,0.454,92,0.033,93,0.033,108,0.914,109,0.706,117,0.805,124,0.914,125,1.185,127,0.914,128,1.172,179,1.737,190,1.327,191,1.327,193,1.327,195,1.327,197,1.327,203,1.728,205,2.001,206,1.509,207,1.327,209,2.276,210,2.023,219,1.327,221,2.312,222,2.276,224,1.728,225,1.327,236,1.826,254,2.368,255,2.924,256,2.001,257,1.728,258,2.605,259,2.605,260,1.728,261,1.509,262,2.312,263,1.728,264,1.728,265,2.001,266,2.312,267,2.001,268,2.924,269,2.001,270,2.368,271,2.924,272,2.924,273,3.912,274,2.924,275,2.924,276,2.924,277,2.924,278,2.924,279,2.924,280,2.924,281,2.924,282,1.509]],["title/classes/ProfileUpdate.html",[0,0.186,283,1.873]],["body/classes/ProfileUpdate.html",[0,0.229,1,0.523,2,0.439,3,0.439,4,0.361,6,0.217,7,0.78,8,0.859,10,0.859,11,0.772,12,0.859,13,0.612,15,0.523,16,0.049,17,0.523,18,0.217,19,0.439,20,0.523,21,0.612,22,0.709,23,0.994,24,0.666,27,0.559,31,0.859,90,1.193,91,0.523,92,0.037,93,0.037,108,1.053,109,0.814,117,0.928,124,1.053,125,0.814,179,1.672,206,1.739,207,1.529,209,2.437,210,1.892,219,1.529,236,1.859,257,1.99,258,2.79,259,1.99,260,1.99,261,1.739,262,2.535,263,1.99,264,1.99,265,2.305,266,2.535,267,2.305,283,3.232,284,2.727,285,4.29,286,4.29,287,3.368,288,2.305,289,3.368,290,3.368]],["title/classes/Register.html",[0,0.186,291,1.873]],["body/classes/Register.html",[0,0.218,1,0.499,2,0.419,3,0.419,4,0.345,6,0.208,7,0.757,8,0.84,10,0.84,11,0.717,12,0.84,13,0.585,15,0.499,16,0.049,17,0.499,18,0.208,19,0.419,20,0.499,21,0.585,22,0.677,23,0.972,24,0.647,31,0.84,32,1.289,76,1.46,90,1.139,91,0.499,92,0.036,93,0.036,96,2.15,97,2.15,109,1.006,110,1.289,117,0.886,125,1.116,127,1.006,149,2.202,179,1.475,189,1.669,190,2.097,191,1.46,192,1.66,193,1.46,194,1.66,195,1.46,196,1.66,197,1.46,198,1.66,199,1.66,200,2.385,210,1.851,212,3.194,222,2.15,282,2.385,291,3.162,292,2.605,293,3.217,294,2.202,295,3.217,296,2.605,297,3.217,298,3.373,299,3.957,300,2.605,301,2.605,302,3.217,303,2.202]],["title/classes/Temperature.html",[0,0.186,48,1.413]],["body/classes/Temperature.html",[0,0.204,1,0.466,2,0.391,3,0.391,4,0.322,6,0.194,7,0.724,8,0.925,10,0.925,11,0.79,12,0.925,13,0.724,15,0.618,16,0.049,17,0.618,18,0.257,19,0.519,20,0.618,21,0.724,22,0.838,23,0.838,24,0.618,27,0.62,31,0.865,35,1.245,44,2.353,47,3.224,48,2.306,91,0.466,92,0.034,93,0.034,106,2.456,107,2.306,108,1.245,109,1.229,110,1.595,112,2.725,114,2.626,116,2.055,117,1.096,118,2.055,124,1.245,125,1.229,126,2.353,127,1.245,128,1.595,129,1.363,130,1.363,304,2.431,305,3.981,306,3.981,307,3.981,308,3.002,309,3.981,310,3.002,311,3.981,312,3.981,313,3.002,314,3.002]],["title/classes/Token.html",[0,0.186,236,0.969]],["body/classes/Token.html",[0,0.181,1,0.413,2,0.347,3,0.347,4,0.285,6,0.172,7,0.667,8,0.864,9,2.512,10,0.864,11,0.737,12,0.864,13,0.667,15,0.57,16,0.05,17,0.57,18,0.237,19,0.479,20,0.57,21,0.667,22,0.773,23,1.034,24,0.57,25,2.482,27,0.479,31,0.915,32,1.067,35,0.832,90,0.943,91,0.413,92,0.031,93,0.031,96,1.895,97,1.374,108,0.832,109,0.643,119,1.067,124,0.832,125,0.887,127,0.832,128,1.067,179,1.739,204,1.573,205,1.822,206,1.374,207,1.208,209,2.646,210,2.016,212,1.573,213,2.512,217,2.155,219,1.208,221,2.482,222,2.452,224,1.573,225,1.666,236,1.913,257,1.573,258,2.807,259,2.482,260,1.573,261,1.374,262,2.169,263,1.573,264,1.573,265,1.822,266,2.676,267,1.822,269,1.822,282,1.374,303,1.822,315,2.155,316,2.662,317,2.662,318,1.573,319,2.662,320,1.822,321,2.662,322,2.662,323,2.662,324,2.155,325,2.662,326,3.67,327,2.662,328,2.662,329,3.67,330,2.662,331,2.662,332,2.155]],["title/interfaces/UserInformations.html",[185,1.413,189,1.097]],["body/interfaces/UserInformations.html",[2,0.402,3,0.402,4,0.33,6,0.199,16,0.048,18,0.352,19,0.74,27,0.753,92,0.035,93,0.035,119,1.624,129,1.84,148,1.592,153,1.4,155,2.111,157,2.111,159,2.111,161,2.111,163,2.111,165,2.111,167,2.111,169,2.111,185,2.092,186,2.111,187,2.111,188,3.282,189,1.624,190,2.183,191,2.183,192,2.482,193,2.183,194,2.482,195,2.183,196,2.482,197,2.183,198,2.482,199,2.482,200,2.482]],["title/classes/Utils.html",[0,0.186,318,1.617]],["body/classes/Utils.html",[0,0.27,1,0.618,2,0.519,3,0.519,4,0.427,6,0.257,7,0.865,13,0.724,15,0.618,16,0.048,17,0.618,18,0.257,19,0.519,21,0.724,27,0.687,92,0.041,93,0.041,119,2.112,225,1.808,318,2.811,333,3.224,334,4.757,335,4.757,336,3.981,337,3.981,338,3.981,339,3.981,340,3.981]],["title/classes/Widget.html",[0,0.186,341,1.873]],["body/classes/Widget.html",[0,0.194,1,0.443,2,0.372,3,0.372,4,0.306,6,0.184,7,0.7,8,0.792,10,0.792,11,0.847,12,0.792,13,0.519,15,0.443,16,0.049,17,0.443,18,0.281,19,0.372,20,0.443,21,0.519,22,0.601,23,1.056,24,0.598,27,0.568,31,0.998,46,2.312,48,1.987,51,2.312,52,1.987,55,2.312,58,1.987,60,2.312,65,2.312,74,2.312,78,2.312,80,2.312,82,2.312,84,2.312,90,1.011,91,0.443,92,0.033,93,0.033,96,1.987,97,1.987,108,0.893,109,0.93,117,1.47,124,0.893,125,0.93,130,1.296,131,2.275,179,1.542,206,1.474,207,1.296,209,2.406,210,1.868,219,1.296,236,1.776,257,1.687,258,2.574,259,2.275,260,1.687,261,1.474,262,2.275,263,1.687,264,1.687,266,2.275,270,2.312,282,1.987,341,3.191,342,2.312,343,2.855,344,2.312,345,2.312,346,2.312,347,4.322,348,2.855,349,2.855,350,2.855,351,2.855,352,2.855,353,2.855,354,2.855,355,2.855,356,2.855,357,2.855]],["title/coverage.html",[358,3.029]],["body/coverage.html",[0,0.371,4,0.305,5,2.308,16,0.049,18,0.184,35,0.891,48,1.471,52,1.471,58,1.471,75,1.684,91,0.442,92,0.033,93,0.033,94,1.951,95,2.308,99,1.951,102,2.308,131,1.684,132,2.308,148,1.471,153,1.294,185,1.985,187,2.632,189,1.142,201,2.308,203,1.684,204,1.684,225,2.593,236,1.009,237,2.308,254,2.308,256,1.951,283,1.951,284,2.308,288,1.951,291,1.951,292,2.308,294,1.951,304,2.308,315,2.308,318,1.684,320,1.951,333,2.308,341,1.951,342,2.308,358,2.308,359,2.85,360,2.85,361,2.85,362,2.308,363,5.514,364,2.308,365,5.537,366,3.939,367,2.308,368,2.85,369,2.85,370,2.308,371,2.85,372,2.85,373,3.114,374,2.308,375,2.632,376,3.114,377,2.308,378,2.308,379,2.632,380,2.308,381,2.308,382,5.279,383,3.114,384,2.308,385,2.308,386,4.351,387,2.308,388,2.308,389,2.85,390,2.85,391,2.308]],["title/dependencies.html",[392,2.282,393,2.666]],["body/dependencies.html",[16,0.048,24,0.656,25,2.498,92,0.042,93,0.042,207,1.919,393,3.423,394,4.227,395,4.227,396,4.227,397,4.227,398,4.227,399,4.227,400,4.227,401,4.227,402,4.227,403,4.227]],["title/miscellaneous/functions.html",[404,1.349,405,2.666]],["body/miscellaneous/functions.html",[6,0.264,11,0.751,15,0.751,16,0.046,17,0.751,18,0.264,19,0.631,20,0.636,27,0.631,92,0.041,93,0.041,375,2.803,377,3.917,379,2.803,380,3.917,404,2.42,405,3.316,406,3.316,407,3.316,408,4.095,409,4.838,410,4.095,411,4.095,412,4.838]],["title/index.html",[6,0.177,413,2.216]],["body/index.html",[1,0.684,16,0.043,92,0.043,93,0.043,186,3.015,413,3.567,414,4.405,415,4.405]],["title/modules.html",[416,3.029]],["body/modules.html",[16,0.043,92,0.043,93,0.043,416,3.607]],["title/miscellaneous/variables.html",[404,1.349,417,2.666]],["body/miscellaneous/variables.html",[6,0.047,8,0.65,10,0.234,11,0.2,12,0.234,16,0.05,18,0.268,20,0.2,24,0.112,27,0.542,31,0.849,32,1.077,34,0.585,35,0.973,76,2.064,91,0.2,92,0.011,93,0.011,99,0.881,106,1.388,107,0.664,108,0.841,109,0.83,110,0.516,114,1.388,116,1.607,117,1.163,118,1.388,119,0.289,124,0.912,125,1.151,127,0.912,128,1.247,130,1.886,179,1.594,189,1.077,190,1.221,191,0.959,192,0.898,193,0.959,194,0.898,195,0.959,196,0.664,197,0.959,198,0.898,199,0.373,200,1.388,203,0.76,204,0.76,208,1.042,210,1.839,212,2.735,213,1.66,214,0.585,215,1.042,216,1.042,218,0.585,219,0.328,221,3.075,222,2.638,224,0.76,225,0.959,229,1.963,230,1.963,231,1.963,232,1.963,234,1.963,235,0.585,236,1.383,256,0.881,261,0.664,269,1.446,282,2.272,288,0.881,294,0.881,296,2.177,298,1.042,299,1.409,300,1.409,301,1.409,303,0.881,320,0.881,324,1.711,332,0.585,344,1.409,345,1.042,346,1.042,347,2.361,362,0.585,364,1.042,366,0.585,367,1.042,370,1.042,373,0.585,374,1.042,375,0.494,376,2.177,378,1.042,379,0.494,381,1.042,383,0.585,384,1.042,385,0.585,387,0.585,388,0.585,391,0.585,404,0.427,406,0.585,407,0.585,417,0.585,418,2.425,419,1.287,420,0.722,421,0.722,422,1.287,423,0.722,424,0.722,425,4.153,426,2.689,427,4.547,428,0.722,429,2.916,430,4.767,431,2.689,432,2.425,433,0.722,434,2.689,435,0.722,436,2.689,437,0.722,438,2.689,439,0.722,440,2.689,441,0.722,442,2.113,443,2.113,444,3.574,445,2.689,446,1.74,447,1.74,448,1.287,449,0.722,450,1.287,451,0.722,452,0.722,453,1.287,454,0.722,455,0.722,456,0.722,457,1.287,458,1.287,459,0.722,460,2.689,461,0.722,462,0.722,463,0.722,464,0.722,465,0.722,466,0.722,467,0.722,468,0.722,469,0.722,470,0.722,471,4.153,472,3.574,473,3.113,474,1.287,475,1.287,476,2.689,477,2.689,478,2.689,479,1.287,480,3.438,481,2.113,482,2.916,483,3.113,484,1.287,485,2.113,486,3.113,487,1.287,488,1.287,489,2.113,490,1.287,491,1.287,492,4.077,493,3.438,494,1.74,495,1.287,496,0.722,497,2.689,498,0.722,499,0.722,500,3.995,501,0.722,502,0.722,503,1.287,504,1.287,505,3.696,506,1.287,507,1.287,508,1.287,509,2.113,510,2.113,511,2.113,512,1.287,513,0.722,514,0.722,515,2.425,516,2.425,517,1.74,518,1.287,519,0.722,520,0.722,521,0.722,522,2.113,523,2.113,524,2.113,525,0.722,526,0.722,527,0.722,528,0.722,529,0.722]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":225,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/Utils.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0/1",{"_index":365,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":371,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":372,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":382,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":386,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":389,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":261,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["1/1",{"_index":369,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":397,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":368,"title":{},"body":{"coverage.html":{}}}],["13",{"_index":414,"title":{},"body":{"index.html":{}}}],["2",{"_index":415,"title":{},"body":{"index.html":{}}}],["2.29.1",{"_index":400,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":402,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":395,"title":{},"body":{"dependencies.html":{}}}],["4.17.1",{"_index":398,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":215,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["8.5.1",{"_index":399,"title":{},"body":{"dependencies.html":{}}}],["_result",{"_index":223,"title":{},"body":{"classes/Login.html":{}}}],["_result['token",{"_index":227,"title":{},"body":{"classes/Login.html":{}}}],["_result['token_created_at",{"_index":228,"title":{},"body":{"classes/Login.html":{}}}],["abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789",{"_index":340,"title":{},"body":{"classes/Utils.html":{}}}],["access_token",{"_index":471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addroute",{"_index":380,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["addroute(endpoint",{"_index":408,"title":{},"body":{"miscellaneous/functions.html":{}}}],["addusers",{"_index":367,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["addusers(infos",{"_index":509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["already",{"_index":300,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["api_key",{"_index":44,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{}}}],["api_url",{"_index":41,"title":{},"body":{"classes/About.html":{}}}],["apikey",{"_index":112,"title":{},"body":{"classes/Currency.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{}}}],["apod",{"_index":60,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["app",{"_index":374,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apple_mail",{"_index":195,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["apple_token",{"_index":196,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["apple_user",{"_index":494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["astronomy",{"_index":61,"title":{},"body":{"classes/About.html":{}}}],["async",{"_index":8,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["authactions",{"_index":100,"title":{},"body":{"classes/Authentication.html":{}}}],["authentication",{"_index":94,"title":{"classes/Authentication.html":{}},"body":{"classes/Authentication.html":{},"coverage.html":{}}}],["authorization",{"_index":477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["autologin",{"_index":77,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{}}}],["autologin.startswith(\"https://intra.epitech.eu",{"_index":150,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["autologin.substring(25",{"_index":151,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["await",{"_index":117,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["axios",{"_index":106,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["axiosresponse",{"_index":107,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["bad",{"_index":490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base_currency",{"_index":122,"title":{},"body":{"classes/Currency.html":{}}}],["bearer",{"_index":478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":344,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["break",{"_index":482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback",{"_index":426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(err",{"_index":444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["camera",{"_index":69,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["case",{"_index":347,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":124,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["checktoken",{"_index":320,"title":{},"body":{"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checktoken(token",{"_index":322,"title":{},"body":{"classes/Token.html":{}}}],["city",{"_index":47,"title":{},"body":{"classes/About.html":{},"classes/Temperature.html":{}}}],["city_temperature",{"_index":46,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["city_weather",{"_index":51,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["class",{"_index":0,"title":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{}},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["classes",{"_index":1,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"index.html":{}}}],["client",{"_index":33,"title":{},"body":{"classes/About.html":{}}}],["console.debug(\"[getuser",{"_index":450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"query",{"_index":442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"response",{"_index":479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug('[handleoauthusersaction",{"_index":500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(err",{"_index":269,"title":{},"body":{"classes/Profile.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["console.debug(result",{"_index":324,"title":{},"body":{"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["console.error(\"error",{"_index":522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error(error",{"_index":529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"heeeeeeeeeeeeeeeeeeeeere",{"_index":265,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{}}}],["console.log(\"heeeeeeeeeeeeeeeeeeeeere2",{"_index":267,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{}}}],["console.log(\"res",{"_index":464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"response",{"_index":488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"result",{"_index":271,"title":{},"body":{"classes/Profile.html":{}}}],["console.log(\"result[0",{"_index":272,"title":{},"body":{"classes/Profile.html":{}}}],["console.log('autologin",{"_index":181,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["console.log('bearer",{"_index":474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('currency",{"_index":121,"title":{},"body":{"classes/Currency.html":{}}}],["console.log('ip",{"_index":30,"title":{},"body":{"classes/About.html":{}}}],["console.log(error",{"_index":126,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{}}}],["console.log(from",{"_index":111,"title":{},"body":{"classes/Currency.html":{}}}],["const",{"_index":109,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["converter",{"_index":53,"title":{},"body":{"classes/About.html":{}}}],["cors",{"_index":394,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":358,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdat",{"_index":325,"title":{},"body":{"classes/Token.html":{}}}],["credits",{"_index":167,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}}}],["curiosity",{"_index":66,"title":{},"body":{"classes/About.html":{}}}],["curiosity_image",{"_index":65,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["currency",{"_index":52,"title":{"classes/Currency.html":{}},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["currency.getexchangerate(req",{"_index":348,"title":{},"body":{"classes/Widget.html":{}}}],["currency_converter",{"_index":55,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["current_time",{"_index":36,"title":{},"body":{"classes/About.html":{}}}],["data",{"_index":249,"title":{},"body":{"classes/Nasa.html":{}}}],["data[0",{"_index":252,"title":{},"body":{"classes/Nasa.html":{}}}],["database",{"_index":469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database/databaseactions",{"_index":205,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{}}}],["database/interfaces",{"_index":149,"title":{},"body":{"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Register.html":{}}}],["date",{"_index":64,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["day",{"_index":63,"title":{},"body":{"classes/About.html":{}}}],["db",{"_index":364,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["db.query(query",{"_index":443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db.query(querystring",{"_index":463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dd",{"_index":231,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["decoded",{"_index":262,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["default",{"_index":130,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{}}}],["dependencies",{"_index":393,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":49,"title":{},"body":{"classes/About.html":{}}}],["diff",{"_index":329,"title":{},"body":{"classes/Token.html":{}}}],["display",{"_index":50,"title":{},"body":{"classes/About.html":{}}}],["display_name",{"_index":40,"title":{},"body":{"classes/About.html":{}}}],["documentation",{"_index":359,"title":{},"body":{"coverage.html":{}}}],["door",{"_index":87,"title":{},"body":{"classes/About.html":{}}}],["door_name",{"_index":89,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{}}}],["doors",{"_index":86,"title":{},"body":{"classes/About.html":{}}}],["dotenv",{"_index":396,"title":{},"body":{"dependencies.html":{}}}],["endpoint",{"_index":410,"title":{},"body":{"miscellaneous/functions.html":{}}}],["epitech",{"_index":72,"title":{},"body":{"classes/About.html":{}}}],["err",{"_index":221,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":125,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["error[addusers",{"_index":510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error[getusers",{"_index":508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error[updateuserauthtoken",{"_index":501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exchange",{"_index":56,"title":{},"body":{"classes/About.html":{}}}],["existinginformation",{"_index":515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existinginformationtype",{"_index":516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exists",{"_index":301,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":213,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":129,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{},"interfaces/UserInformations.html":{}}}],["express",{"_index":24,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["express.request",{"_index":10,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["express.response",{"_index":12,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["facebook_mail",{"_index":193,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["facebook_token",{"_index":194,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["facebook_user",{"_index":483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["facebookuser",{"_index":485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":179,"title":{},"body":{"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["firstname",{"_index":155,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}}}],["found",{"_index":259,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["function",{"_index":376,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":405,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(req",{"_index":9,"title":{},"body":{"classes/About.html":{},"classes/Profile.html":{},"classes/Token.html":{}}}],["getexchangerate",{"_index":103,"title":{},"body":{"classes/Currency.html":{}}}],["getexchangerate(req",{"_index":104,"title":{},"body":{"classes/Currency.html":{}}}],["getgrades",{"_index":133,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getgrades(req",{"_index":138,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getnasadayimage",{"_index":238,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasadayimage(req",{"_index":240,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasaroverimage",{"_index":239,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasaroverimage(req",{"_index":242,"title":{},"body":{"classes/Nasa.html":{}}}],["getnotifications",{"_index":134,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getnotifications(req",{"_index":140,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getpartners",{"_index":135,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getpartners(req",{"_index":142,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getprofile",{"_index":136,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getprofile(req",{"_index":144,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getrandomstring",{"_index":334,"title":{},"body":{"classes/Utils.html":{}}}],["getrandomstring(length",{"_index":335,"title":{},"body":{"classes/Utils.html":{}}}],["getrow",{"_index":256,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrow('token",{"_index":268,"title":{},"body":{"classes/Profile.html":{}}}],["gettemperature",{"_index":305,"title":{},"body":{"classes/Temperature.html":{}}}],["gettemperature(req",{"_index":307,"title":{},"body":{"classes/Temperature.html":{}}}],["getusers",{"_index":203,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getusers(infos",{"_index":507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getusers(user",{"_index":220,"title":{},"body":{"classes/Login.html":{}}}],["getweather",{"_index":306,"title":{},"body":{"classes/Temperature.html":{}}}],["getweather(req",{"_index":309,"title":{},"body":{"classes/Temperature.html":{}}}],["google_mail",{"_index":191,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["google_token",{"_index":192,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["google_user",{"_index":473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googleuser",{"_index":481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gpa",{"_index":169,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}}}],["grades",{"_index":83,"title":{},"body":{"classes/About.html":{}}}],["handleoauthusers",{"_index":99,"title":{},"body":{"classes/Authentication.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusers(req",{"_index":101,"title":{},"body":{"classes/Authentication.html":{}}}],["handleoauthusersaction",{"_index":384,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusersaction(infos",{"_index":496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hh:mm:ss",{"_index":232,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":34,"title":{},"body":{"classes/About.html":{},"miscellaneous/variables.html":{}}}],["http://api.openweathermap.org",{"_index":42,"title":{},"body":{"classes/About.html":{}}}],["http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key",{"_index":312,"title":{},"body":{"classes/Temperature.html":{}}}],["https://api.nasa.gov",{"_index":59,"title":{},"body":{"classes/About.html":{}}}],["https://api.nasa.gov/mars",{"_index":247,"title":{},"body":{"classes/Nasa.html":{}}}],["https://api.nasa.gov/planetary/apod?api_key=${api_key}&date=${date",{"_index":245,"title":{},"body":{"classes/Nasa.html":{}}}],["https://epi",{"_index":182,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://freecurrencyapi.net",{"_index":54,"title":{},"body":{"classes/About.html":{}}}],["https://freecurrencyapi.net/api/v2/latest?base_currency=${from}&apikey=${apikey",{"_index":115,"title":{},"body":{"classes/Currency.html":{}}}],["https://graph.facebook.com/me/?fields=id,name,email",{"_index":484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://graph.microsoft.com/v1.0/me",{"_index":487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://intra.epitech.eu",{"_index":73,"title":{},"body":{"classes/About.html":{}}}],["https://intra.epitech.eu/${autologin",{"_index":180,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/binome/?format=json",{"_index":172,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/notes?format=json",{"_index":177,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/notification/message?format=json",{"_index":175,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user?format=json",{"_index":152,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://www.googleapis.com/oauth2/v1/userinfo?alt=json",{"_index":475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifier",{"_index":360,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":68,"title":{},"body":{"classes/About.html":{}}}],["import",{"_index":23,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["incorrect",{"_index":226,"title":{},"body":{"classes/Login.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{}}}],["informations",{"_index":523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos",{"_index":296,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["infos.apple_mail",{"_index":438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.apple_token",{"_index":439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.facebook_mail",{"_index":436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.facebook_token",{"_index":437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.google_mail",{"_index":434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.google_token",{"_index":435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.mail",{"_index":431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.office_mail",{"_index":440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.office_token",{"_index":441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.password",{"_index":449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.username",{"_index":433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insert",{"_index":428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":185,"title":{"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["interfaces",{"_index":186,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{},"index.html":{}}}],["internal",{"_index":128,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["intra",{"_index":71,"title":{},"body":{"classes/About.html":{}}}],["intra_epitech",{"_index":70,"title":{},"body":{"classes/About.html":{}}}],["intra_epitech_doors",{"_index":84,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_grades",{"_index":82,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_notifications",{"_index":80,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_partners",{"_index":78,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_profile",{"_index":74,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intraepitech",{"_index":131,"title":{"classes/IntraEpitech.html":{}},"body":{"classes/IntraEpitech.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["intraepitech.getgrades(req",{"_index":357,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getnotifications(req",{"_index":355,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getpartners(req",{"_index":354,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getprofile(req",{"_index":353,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.opendoor(req",{"_index":356,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitechuser",{"_index":148,"title":{"interfaces/IntraEpitechUser.html":{}},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["invalid",{"_index":266,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["ip",{"_index":26,"title":{},"body":{"classes/About.html":{}}}],["ip.split(':')[3",{"_index":29,"title":{},"body":{"classes/About.html":{}}}],["jsonwebtoken",{"_index":207,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"dependencies.html":{}}}],["jwt",{"_index":206,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["jwt.jwtpayload",{"_index":263,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["jwt.sign",{"_index":218,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["jwt.verify(token",{"_index":264,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["jwttoken",{"_index":460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":157,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}}}],["length",{"_index":337,"title":{},"body":{"classes/Utils.html":{}}}],["limit",{"_index":448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["literal",{"_index":513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":163,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}}}],["logged",{"_index":235,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":153,"title":{"classes/Login.html":{}},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["logue.eu/api/doors_open?login=${autologin}&door_name=${door_name",{"_index":183,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["mail",{"_index":190,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":93,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":210,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":118,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":7,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{}}}],["miscellaneous",{"_index":404,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":230,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["module.exports",{"_index":90,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["modules",{"_index":416,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moment",{"_index":25,"title":{},"body":{"classes/About.html":{},"classes/Login.html":{},"classes/Token.html":{},"dependencies.html":{}}}],["moment().format('yyyy",{"_index":229,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["moment().unix",{"_index":37,"title":{},"body":{"classes/About.html":{}}}],["moment(result[0].token_created_at",{"_index":327,"title":{},"body":{"classes/Token.html":{}}}],["moment.moment",{"_index":326,"title":{},"body":{"classes/Token.html":{}}}],["montpellier",{"_index":88,"title":{},"body":{"classes/About.html":{}}}],["mysql.createconnection",{"_index":465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":401,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":17,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"miscellaneous/functions.html":{}}}],["nasa",{"_index":58,"title":{"classes/Nasa.html":{}},"body":{"classes/About.html":{},"classes/Nasa.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["nasa.getnasadayimage(req",{"_index":351,"title":{},"body":{"classes/Widget.html":{}}}],["nasa.getnasaroverimage(req",{"_index":352,"title":{},"body":{"classes/Widget.html":{}}}],["new",{"_index":91,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newtoken",{"_index":217,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{}}}],["newvalues",{"_index":454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["next",{"_index":412,"title":{},"body":{"miscellaneous/functions.html":{}}}],["none",{"_index":498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notifications",{"_index":81,"title":{},"body":{"classes/About.html":{}}}],["now",{"_index":328,"title":{},"body":{"classes/Token.html":{}}}],["now.diff(createdat",{"_index":330,"title":{},"body":{"classes/Token.html":{}}}],["null",{"_index":323,"title":{},"body":{"classes/Token.html":{}}}],["number",{"_index":119,"title":{},"body":{"classes/Currency.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"miscellaneous/variables.html":{}}}],["number(process.env.expire_time",{"_index":214,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["office_mail",{"_index":197,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["office_token",{"_index":198,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["office_user",{"_index":486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["officeuser",{"_index":489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["open",{"_index":85,"title":{},"body":{"classes/About.html":{}}}],["opendoor",{"_index":137,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["opendoor(req",{"_index":146,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["optional",{"_index":19,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"miscellaneous/functions.html":{}}}],["outlook_mail",{"_index":278,"title":{},"body":{"classes/Profile.html":{}}}],["overview",{"_index":413,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":392,"title":{"dependencies.html":{}},"body":{}}],["parameters",{"_index":15,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":43,"title":{},"body":{"classes/About.html":{}}}],["partners",{"_index":79,"title":{},"body":{"classes/About.html":{}}}],["password",{"_index":200,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":285,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["patch(req",{"_index":286,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["payload",{"_index":216,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["photo",{"_index":251,"title":{},"body":{"classes/Nasa.html":{}}}],["photos/api/v1/rovers/curiosity/photos?earth_date=${date}&camera=${camera}&api_key=${api_key",{"_index":248,"title":{},"body":{"classes/Nasa.html":{}}}],["picture",{"_index":62,"title":{},"body":{"classes/About.html":{}}}],["plain_user",{"_index":517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plainuser",{"_index":518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["possible",{"_index":339,"title":{},"body":{"classes/Utils.html":{}}}],["post",{"_index":96,"title":{},"body":{"classes/Authentication.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["post(req",{"_index":97,"title":{},"body":{"classes/Authentication.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["process.env.free_currency_api_key",{"_index":113,"title":{},"body":{"classes/Currency.html":{}}}],["process.env.jwt_secret",{"_index":219,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["process.env.my_sql_database",{"_index":470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_host",{"_index":466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_password",{"_index":468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_user",{"_index":467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.nasa_api_key",{"_index":244,"title":{},"body":{"classes/Nasa.html":{}}}],["process.env.weather_api_key",{"_index":311,"title":{},"body":{"classes/Temperature.html":{}}}],["profile",{"_index":75,"title":{"classes/Profile.html":{}},"body":{"classes/About.html":{},"classes/Profile.html":{},"coverage.html":{}}}],["profileactions",{"_index":289,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["profilepicture",{"_index":159,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}}}],["profileupdate",{"_index":283,"title":{"classes/ProfileUpdate.html":{}},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{}}}],["promise",{"_index":503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise(async",{"_index":504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promo",{"_index":161,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}}}],["properties",{"_index":188,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}}}],["query",{"_index":427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["querystring",{"_index":462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rate",{"_index":57,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{}}}],["rc.0",{"_index":403,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":291,"title":{"classes/Register.html":{}},"body":{"classes/Register.html":{},"coverage.html":{}}}],["registeractions",{"_index":295,"title":{},"body":{"classes/Register.html":{}}}],["registerbasicuser",{"_index":294,"title":{},"body":{"classes/Register.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registerbasicuser(infos",{"_index":297,"title":{},"body":{"classes/Register.html":{}}}],["register|login",{"_index":514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reject",{"_index":506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req",{"_index":20,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["req.body",{"_index":110,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["req.body.mail",{"_index":519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.body.password",{"_index":520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":257,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["req.ip",{"_index":28,"title":{},"body":{"classes/About.html":{}}}],["req.params.type",{"_index":345,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesthandler",{"_index":377,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["requesthandler(req",{"_index":411,"title":{},"body":{"miscellaneous/functions.html":{}}}],["require(\"http\").server(app",{"_index":461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":211,"title":{},"body":{"classes/Login.html":{}}}],["res",{"_index":11,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["res.status(200).json",{"_index":32,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["res.status(200).json(photo",{"_index":253,"title":{},"body":{"classes/Nasa.html":{}}}],["res.status(200).json(response.data",{"_index":246,"title":{},"body":{"classes/Nasa.html":{}}}],["res.status(200).json(response.data['main",{"_index":313,"title":{},"body":{"classes/Temperature.html":{}}}],["res.status(200).json(response.data['weather",{"_index":314,"title":{},"body":{"classes/Temperature.html":{}}}],["res.status(200).json(response2.data",{"_index":176,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(response2.data['binomes",{"_index":174,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(response2.data['modules",{"_index":178,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(user",{"_index":171,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(400).json",{"_index":208,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["res.status(401).json",{"_index":258,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["res.status(403).json",{"_index":302,"title":{},"body":{"classes/Register.html":{}}}],["res.status(404).json",{"_index":270,"title":{},"body":{"classes/Profile.html":{},"classes/Widget.html":{}}}],["res.status(500).json",{"_index":127,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["res.status(response.status).json(response.data",{"_index":184,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["resolve",{"_index":505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":116,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["response.data",{"_index":480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response.data.data[to",{"_index":120,"title":{},"body":{"classes/Currency.html":{}}}],["response.data.photos",{"_index":250,"title":{},"body":{"classes/Nasa.html":{}}}],["response.data['credits",{"_index":168,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['firstname",{"_index":156,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['gpa'][0]['gpa",{"_index":170,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['groups'][0]['name",{"_index":164,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['lastname",{"_index":158,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['login",{"_index":154,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['picture",{"_index":160,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['promo",{"_index":162,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['semester_code",{"_index":166,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response2",{"_index":173,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["result",{"_index":222,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["result.affectedrows",{"_index":332,"title":{},"body":{"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["result.error",{"_index":298,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["result.length",{"_index":224,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["result.message",{"_index":299,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["result.result",{"_index":303,"title":{},"body":{"classes/Register.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["result[0",{"_index":273,"title":{},"body":{"classes/Profile.html":{}}}],["result[addusers",{"_index":511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[getusers",{"_index":512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[updateuserauthtoken",{"_index":502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["results",{"_index":92,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":31,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":21,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{}}}],["routes",{"_index":381,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rover",{"_index":67,"title":{},"body":{"classes/About.html":{}}}],["row",{"_index":446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rows",{"_index":452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rslt",{"_index":274,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['apple_mail",{"_index":280,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['facebook_mail",{"_index":277,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['google_mail",{"_index":276,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['mail",{"_index":275,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['office_mail",{"_index":281,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['outlook_mail",{"_index":279,"title":{},"body":{"classes/Profile.html":{}}}],["seconds",{"_index":331,"title":{},"body":{"classes/Token.html":{}}}],["select",{"_index":447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["semestercode",{"_index":165,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}}}],["server",{"_index":35,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":409,"title":{},"body":{"miscellaneous/functions.html":{}}}],["services",{"_index":38,"title":{},"body":{"classes/About.html":{}}}],["set",{"_index":458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":3,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{}}}],["src/.../authactions.ts",{"_index":422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.ts",{"_index":421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../databaseactions.ts",{"_index":418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../profileactions.ts",{"_index":424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../registeractions.ts",{"_index":423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../request_handler.ts",{"_index":407,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../routes.ts",{"_index":406,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../tokenaction.ts",{"_index":420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/database/database.ts",{"_index":362,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/databaseactions.ts",{"_index":366,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/interfaces.ts",{"_index":187,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["src/index.ts",{"_index":373,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/request_handler.ts",{"_index":375,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/routes.ts",{"_index":379,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/routes/about/about.ts",{"_index":5,"title":{},"body":{"classes/About.html":{},"coverage.html":{}}}],["src/routes/about/about.ts:5",{"_index":14,"title":{},"body":{"classes/About.html":{}}}],["src/routes/auth/authactions.ts",{"_index":383,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/auth/login.ts",{"_index":201,"title":{},"body":{"classes/Login.html":{},"coverage.html":{}}}],["src/routes/auth/login.ts:8",{"_index":202,"title":{},"body":{"classes/Login.html":{}}}],["src/routes/auth/oauth.ts",{"_index":95,"title":{},"body":{"classes/Authentication.html":{},"coverage.html":{}}}],["src/routes/auth/oauth.ts:5",{"_index":98,"title":{},"body":{"classes/Authentication.html":{}}}],["src/routes/auth/register.ts",{"_index":292,"title":{},"body":{"classes/Register.html":{},"coverage.html":{}}}],["src/routes/auth/register.ts:6",{"_index":293,"title":{},"body":{"classes/Register.html":{}}}],["src/routes/auth/registeractions.ts",{"_index":385,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/auth/token.ts",{"_index":315,"title":{},"body":{"classes/Token.html":{},"coverage.html":{}}}],["src/routes/auth/token.ts:42",{"_index":317,"title":{},"body":{"classes/Token.html":{}}}],["src/routes/auth/token.ts:9",{"_index":316,"title":{},"body":{"classes/Token.html":{}}}],["src/routes/auth/tokenaction.ts",{"_index":387,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/profile/profile.ts",{"_index":254,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{}}}],["src/routes/profile/profile.ts:6",{"_index":255,"title":{},"body":{"classes/Profile.html":{}}}],["src/routes/profile/profileactions.ts",{"_index":388,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/profile/profileupdate.ts",{"_index":284,"title":{},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{}}}],["src/routes/profile/profileupdate.ts:6",{"_index":287,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["src/routes/widgets/currency.ts",{"_index":102,"title":{},"body":{"classes/Currency.html":{},"coverage.html":{}}}],["src/routes/widgets/currency.ts:5",{"_index":105,"title":{},"body":{"classes/Currency.html":{}}}],["src/routes/widgets/intraepitech.ts",{"_index":132,"title":{},"body":{"classes/IntraEpitech.html":{},"coverage.html":{}}}],["src/routes/widgets/intraepitech.ts:105",{"_index":139,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:134",{"_index":147,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:43",{"_index":143,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:6",{"_index":145,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:74",{"_index":141,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/nasa.ts",{"_index":237,"title":{},"body":{"classes/Nasa.html":{},"coverage.html":{}}}],["src/routes/widgets/nasa.ts:24",{"_index":243,"title":{},"body":{"classes/Nasa.html":{}}}],["src/routes/widgets/nasa.ts:5",{"_index":241,"title":{},"body":{"classes/Nasa.html":{}}}],["src/routes/widgets/temperature.ts",{"_index":304,"title":{},"body":{"classes/Temperature.html":{},"coverage.html":{}}}],["src/routes/widgets/temperature.ts:24",{"_index":310,"title":{},"body":{"classes/Temperature.html":{}}}],["src/routes/widgets/temperature.ts:5",{"_index":308,"title":{},"body":{"classes/Temperature.html":{}}}],["src/routes/widgets/widget.ts",{"_index":342,"title":{},"body":{"classes/Widget.html":{},"coverage.html":{}}}],["src/routes/widgets/widget.ts:9",{"_index":343,"title":{},"body":{"classes/Widget.html":{}}}],["src/utils/utils.ts",{"_index":333,"title":{},"body":{"classes/Utils.html":{},"coverage.html":{}}}],["src/utils/utils.ts:2",{"_index":336,"title":{},"body":{"classes/Utils.html":{}}}],["statements",{"_index":361,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":27,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["success",{"_index":451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["switch",{"_index":346,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":391,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":390,"title":{},"body":{"coverage.html":{}}}],["target_currency",{"_index":123,"title":{},"body":{"classes/Currency.html":{}}}],["temperature",{"_index":48,"title":{"classes/Temperature.html":{}},"body":{"classes/About.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["temperature.gettemperature(req",{"_index":349,"title":{},"body":{"classes/Widget.html":{}}}],["temperature.getweather(req",{"_index":350,"title":{},"body":{"classes/Widget.html":{}}}],["text",{"_index":338,"title":{},"body":{"classes/Utils.html":{}}}],["token",{"_index":236,"title":{"classes/Token.html":{}},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token.split",{"_index":260,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["token_created_at",{"_index":234,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["token_wl",{"_index":378,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenaction",{"_index":321,"title":{},"body":{"classes/Token.html":{}}}],["true",{"_index":282,"title":{},"body":{"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":108,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":18,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":212,"title":{},"body":{"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["unknown",{"_index":22,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["update",{"_index":457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updated",{"_index":524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos",{"_index":204,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateinfos(['facebook_mail",{"_index":526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['google_mail",{"_index":521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['mail",{"_index":527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['office_mail",{"_index":525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['token",{"_index":233,"title":{},"body":{"classes/Login.html":{}}}],["updates",{"_index":459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuserauthtoken",{"_index":370,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateuserauthtoken(infos",{"_index":499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuserinformations",{"_index":288,"title":{},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateuserinformations(req",{"_index":290,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["url",{"_index":114,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":76,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["user.type",{"_index":492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.email",{"_index":493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.mail",{"_index":495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.password",{"_index":528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userinformations",{"_index":189,"title":{"interfaces/UserInformations.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userjson",{"_index":472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["username",{"_index":199,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils",{"_index":318,"title":{"classes/Utils.html":{}},"body":{"classes/Token.html":{},"classes/Utils.html":{},"coverage.html":{}}}],["utils/utils",{"_index":319,"title":{},"body":{"classes/Token.html":{}}}],["valid",{"_index":209,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["value",{"_index":425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["values",{"_index":432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":363,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":417,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["wasfound",{"_index":430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["weather",{"_index":39,"title":{},"body":{"classes/About.html":{}}}],["whererow",{"_index":455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wherevalue",{"_index":456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["widget",{"_index":341,"title":{"classes/Widget.html":{}},"body":{"classes/Widget.html":{},"coverage.html":{}}}],["widgets",{"_index":45,"title":{},"body":{"classes/About.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/About.html":{"url":"classes/About.html","title":"class - About","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  About\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/about/about.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/about/about.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport moment from \"moment\";\n\nclass About {\n  async get(req: express.Request, res: express.Response) {\n    let ip: string = req.ip;\n    ip = ip.split(':')[3];\n    console.log('ip == ', ip);\n\n    return res.status(200).json({\n      \"client\": {\n        \"host\": ip,\n      },\n      \"server\": {\n        \"current_time\": moment().unix(),\n        \"services\": [\n          {\n            \"name\": \"weather\",\n            \"display_name\": \"Weather\",\n            \"api_url\": \"http://api.openweathermap.org\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"widgets\": [\n              {\n                \"name\": \"city_temperature\",\n                \"display_name\": \"City temperature\",\n                \"description\": \"Display temperature for a city\",\n                \"params\": [\n                  {\n                    \"name\": \"city\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },\n              {\n                \"name\": \"city_weather\",\n                \"display_name\": \"City weather\",\n                \"description\": \"Display weather for a city\",\n                \"params\": [\n                  {\n                    \"name\": \"city\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"currency\",\n            \"display_name\": \"Currency Converter\",\n            \"api_url\": \"https://freecurrencyapi.net/\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"widgets\": [\n              {\n                \"name\": \"currency_converter\",\n                \"display_name\": \"Currency Converter\",\n                \"description\": \"Display the exchange rate of a currency\",\n                \"params\": [\n                  {\n                    \"name\": \"from\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"to\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"nasa\",\n            \"display_name\": \"NASA\",\n            \"api_url\": \"https://api.nasa.gov/\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"widgets\": [\n              {\n                \"name\": \"apod\",\n                \"display_name\": \"Astronomy Picture of the Day\",\n                \"description\": \"Display the Astronomy Picture of the Day\",\n                \"params\": [\n                  {\n                    \"name\": \"date\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },\n              {\n                \"name\": \"curiosity_image\",\n                \"display_name\": \"Curiosity Rover Image\",\n                \"description\": \"Display an image from a curiosity\",\n                \"params\": [\n                  {\n                    \"name\": \"date\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"camera\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"intra_epitech\",\n            \"display_name\": \"Intra Epitech\",\n            \"params\": [],\n            \"api_url\": \"https://intra.epitech.eu/\",\n            \"widgets\": [\n              {\n                \"name\": \"intra_epitech_profile\",\n                \"display_name\": \"Profile\",\n                \"description\": \"Display the profile of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_partners\",\n                \"display_name\": \"Partners\",\n                \"description\": \"Display the partners of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_notifications\",\n                \"display_name\": \"Notifications\",\n                \"description\": \"Display the notifications of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_grades\",\n                \"display_name\": \"Grades\",\n                \"description\": \"Display the grades of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_doors\",\n                \"display_name\": \"Open doors\",\n                \"description\": \"Open the door in epitech montpellier\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"door_name\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    });\n  }\n};\n\nmodule.exports = new About();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Authentication.html":{"url":"classes/Authentication.html","title":"class - Authentication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Authentication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/OAuth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/OAuth.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport { handleOAuthUsers } from './authActions';\n\nclass Authentication {\n    async post(req: express.Request, res: express.Response) {\n        return handleOAuthUsers(req, res);\n    }\n}\n\nmodule.exports = new Authentication();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Currency.html":{"url":"classes/Currency.html","title":"class - Currency","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Currency\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/currency.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getExchangeRate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getExchangeRate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getExchangeRate(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/currency.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Currency {\n    async getExchangeRate(req: express.Request, res: express.Response) {\n        try {\n            const { from, to, api_key } = req.body;\n            console.log(from, to);\n            const apikey = process.env.FREE_CURRENCY_API_KEY;\n            const url: string = `https://freecurrencyapi.net/api/v2/latest?base_currency=${from}&apikey=${apikey}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            let currency: number = response.data.data[to];\n            console.log('currency == ', currency);\n            return res.status(200).json({\n                \"base_currency\": from,\n                \"target_currency\": to,\n                \"rate\": currency\n            });\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Currency();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IntraEpitech.html":{"url":"classes/IntraEpitech.html","title":"class - IntraEpitech","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IntraEpitech\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/intraEpitech.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getGrades\n                            \n                            \n                                    Async\n                                getNotifications\n                            \n                            \n                                    Async\n                                getPartners\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                openDoor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getGrades\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGrades(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNotifications(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPartners\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPartners(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        openDoor\n                        \n                    \n                \n            \n            \n                \n                    \n                    openDoor(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\nimport { IntraEpitechUser } from '../../database/interfaces';\n\nclass IntraEpitech {\n    async getProfile(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n            url = `https://intra.epitech.eu/${autoLogin}/user?format=json`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            const user: IntraEpitechUser = {\n                login: response.data['login'],\n                firstname: response.data['firstname'],\n                lastname: response.data['lastname'],\n                profilePicture: response.data['picture'],\n                promo: response.data['promo'],\n                location: response.data['groups'][0]['name'],\n                semesterCode: response.data['semester_code'],\n                credits: response.data['credits'],\n                gpa: response.data['gpa'][0]['gpa'],\n            };\n            return res.status(200).json(user);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getPartners(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n    \n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n    \n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: `https://intra.epitech.eu/${autoLogin}/user?format=json`\n            });\n            const login: string = response.data['login'];\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/binome/?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response2.data['binomes']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getNotifications(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;            \n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: `https://intra.epitech.eu/${autoLogin}/user?format=json`\n            });\n            const login: string = response.data['login'];\n\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/notification/message?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(200).json(response2.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getGrades(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                autoLogin = autoLogin.substring(25);\n            }\n            url = `https://intra.epitech.eu/${autoLogin}/user?format=json`;\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            const login: string = response.data['login'];\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/notes?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(200).json(response2.data['modules']);            \n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async openDoor(req: express.Request, res: express.Response) {\n        try {\n            const { autologin, door_name } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autoLogin.startsWith(\"https://intra.epitech.eu/\") == false) {\n                autoLogin = `https://intra.epitech.eu/${autologin}`;\n            }\n            console.log('autologin == ', autoLogin);\n            url = `https://epi-logue.eu/api/doors_open?login=${autologin}&door_name=${door_name}`;\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(response.status).json(response.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new IntraEpitech();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IntraEpitechUser.html":{"url":"interfaces/IntraEpitechUser.html","title":"interface - IntraEpitechUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IntraEpitechUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            credits\n                                        \n                                \n                                \n                                        \n                                            firstname\n                                        \n                                \n                                \n                                        \n                                            gpa\n                                        \n                                \n                                \n                                        \n                                            lastname\n                                        \n                                \n                                \n                                        \n                                            location\n                                        \n                                \n                                \n                                        \n                                            login\n                                        \n                                \n                                \n                                        \n                                            profilePicture\n                                        \n                                \n                                \n                                        \n                                            promo\n                                        \n                                \n                                \n                                        \n                                            semesterCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        credits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        credits:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gpa\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gpa:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        location:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profilePicture\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profilePicture:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        promo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        promo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        semesterCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        semesterCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Login.html":{"url":"classes/Login.html","title":"class - Login","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Login\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/login.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/login.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport { getUsers, updateInfos } from \"../../database/databaseActions\";\nimport { UserInformations } from \"../../database/interfaces\";\nimport jwt from 'jsonwebtoken';\nimport moment from \"moment\";\n\nclass Login {\n    async post(req: express.Request, res: express.Response) {\n        const { mail, password } = req.body;\n\n        if (!mail || !password) {\n            return res.status(400).json({\n                valid: false,\n                message: \"mail and password are required\"\n            });\n        }\n\n        const user: UserInformations = {\n            mail: mail,\n            google_mail: undefined,\n            google_token: undefined,\n            facebook_mail: undefined,\n            facebook_token: undefined,\n            apple_mail: undefined,\n            apple_token: undefined,\n            office_mail: undefined,\n            office_token: undefined,\n            username: undefined,\n            password: password\n        };\n\n        const expiresIn: number = Number(process.env.EXPIRE_TIME) || 60 * 60;\n        const payload = {\n            mail: mail\n        };\n        const newToken: string = jwt.sign(\n            payload,\n            process.env.JWT_SECRET,\n            { expiresIn: expiresIn }\n        );\n\n        await getUsers(user, async (err: any, result: any) => {\n            if (err) {\n                return res.status(500).json({\n                    valid: false,\n                    message: err\n                });\n            } else {\n                let _result = result;\n                if (result.length === 0) {\n                    return res.status(400).json({\n                        valid: false,\n                        message: \"mail or password is incorrect\"\n                    });\n                } else {\n                    _result['token'] = newToken;\n                    _result['token_created_at'] = moment().format('YYYY-MM-DD HH:mm:ss');\n                    await updateInfos(['token', 'token_created_at'], [newToken, moment().format('YYYY-MM-DD HH:mm:ss')], 'mail', mail, (err: any, result: any) => {\n                        if (err) {\n                            return res.status(500).json({\n                                valid: false,\n                                message: err\n                            });\n                        } else {\n                            return res.status(200).json({ error: false, message: \"user logged in\", token: newToken, expiresIn: expiresIn, result: _result });\n                        }\n                    });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Login();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Nasa.html":{"url":"classes/Nasa.html","title":"class - Nasa","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Nasa\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/nasa.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getNasaDayImage\n                            \n                            \n                                    Async\n                                getNasaRoverImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNasaDayImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNasaDayImage(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/nasa.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNasaRoverImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNasaRoverImage(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/nasa.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport axios, { AxiosResponse } from \"axios\";\n\nclass Nasa {\n    async getNasaDayImage(req: express.Request, res: express.Response) {\n        try {\n            const { date, api_key } = req.body;\n            // const apiKey: string = process.env.NASA_API_KEY;\n            const url = `https://api.nasa.gov/planetary/apod?api_key=${api_key}&date=${date}`;\n\n            let response: AxiosResponse = await axios({\n                method: \"get\",\n                url: url\n            });\n            return res.status(200).json(response.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getNasaRoverImage(req: express.Request, res: express.Response) {\n        try {\n            const { date, camera, api_key } = req.body;\n            // const apiKey: string = process.env.NASA_API_KEY;\n            const url = `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=${date}&camera=${camera}&api_key=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: \"get\",\n                url: url\n            });\n            let data = response.data.photos;\n            let photo: any = data[0] ? data[0] : {};\n\n            return res.status(200).json(photo);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Nasa();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/profile/profile.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/profile/profile.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport { getRow, getUsers } from '../../database/databaseActions';\n\nclass Profile {\n    async get(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                console.log(\"heeeeeeeeeeeeeeeeeeeeere\");\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            console.log(\"heeeeeeeeeeeeeeeeeeeeere2\");\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n        await getRow('token', token, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                return res.status(500).json({ error: false, message: \"internal server error\" });\n            } else {\n                if (result.length === 0) {\n                    return res.status(404).json({ error: false, message: \"user not found\" });\n                } else {\n                    console.log(\"result == \", result);\n                    console.log(\"result[0] == \", result[0]);\n                    let rslt = result[0];\n                    let user = {\n                        mail: rslt['mail'],\n                        google_mail: rslt['google_mail'],\n                        facebook_mail: rslt['facebook_mail'],\n                        outlook_mail: rslt['outlook_mail'],\n                        apple_mail: rslt['apple_mail'],\n                        office_mail: rslt['office_mail'],\n                    };\n\n                    return res.status(200).json({ error: true, message: \"user found\", result: user });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Profile();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileUpdate.html":{"url":"classes/ProfileUpdate.html","title":"class - ProfileUpdate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileUpdate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/profile/profileUpdate.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/profile/profileUpdate.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { updateUserInformations } from \"./profileActions\";\n\nclass ProfileUpdate {\n    async patch(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                console.log(\"heeeeeeeeeeeeeeeeeeeeere\");\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            console.log(\"heeeeeeeeeeeeeeeeeeeeere2\");\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n        await updateUserInformations(req, res);\n    }\n}\n\nmodule.exports = new ProfileUpdate();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Register.html":{"url":"classes/Register.html","title":"class - Register","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Register\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/register.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/register.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\"\nimport { UserInformations } from \"../../database/interfaces\";\nimport { registerBasicUser } from \"./registerActions\";\n\nclass Register {\n    async post(req: express.Request, res: express.Response) {\n        const { mail, password } = req.body;\n\n        const infos: UserInformations = {\n            mail: mail,\n            google_mail: undefined,\n            google_token: undefined,\n            facebook_mail: undefined,\n            facebook_token: undefined,\n            apple_mail: undefined,\n            apple_token: undefined,\n            office_mail: undefined,\n            office_token: undefined,\n            username: undefined,\n            password: password,\n        };\n        let result = await registerBasicUser(infos);\n\n        if (result.error === true) {\n            return res.status(500).json({\n                error: true,\n                message: result.message,\n            });\n        }\n        if (result.error === false && result.message === \"user already exists\") {\n            return res.status(403).json({ error: true, message: result.message });\n        }\n        return res.status(200).json({ error: false, message: result.message, result: result.result });\n    }\n}\n\nmodule.exports = new Register();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Temperature.html":{"url":"classes/Temperature.html","title":"class - Temperature","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Temperature\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/temperature.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTemperature\n                            \n                            \n                                    Async\n                                getWeather\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTemperature\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTemperature(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/temperature.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getWeather\n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeather(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/temperature.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Temperature {\n    async getTemperature(req: express.Request, res: express.Response) {\n        try {\n            const { city, api_key } = req.body;\n            // const apikey: string = process.env.WEATHER_API_KEY;\n            const url: string = `http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response.data['main']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getWeather(req: express.Request, res: express.Response) {\n        try {\n            const { city, api_key } = req.body;\n            // const apikey: string = process.env.WEATHER_API_KEY;\n            const url: string = `http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response.data['weather']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n};\n\nexport default new Temperature();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Token.html":{"url":"classes/Token.html","title":"class - Token","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Token\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/token.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/token.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/token.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport moment from 'moment';\nimport { updateInfos } from '../../database/databaseActions';\nimport Utils from '../../utils/utils';\nimport { checkToken } from './tokenAction';\n\nclass Token {\n    async get(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                console.log(\"heeeeeeeeeeeeeeeeeeeeere\");\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            console.log(\"heeeeeeeeeeeeeeeeeeeeere2\");\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n        checkToken(token, (err: any, result: any) => {\n            if (err || result === [] || result === null || result === undefined || result.length === 0) {\n                console.debug(result);\n                return res.status(401).json({ valid: false, message: \"token invalid or not found\" });\n            } else {\n                let createdAt: moment.Moment = moment(result[0].token_created_at);\n                let now: moment.Moment = moment();\n                let diff: number = now.diff(createdAt, 'seconds');\n                if (diff  {\n            if (err) {\n                console.debug(err);\n                return res.status(500).json({ valid: false, message: \"internal server error\" });\n            } else {\n                if (result.affectedRows === 0) {\n                    return res.status(401).json({ valid: false, message: \"token invalid or not found\" });\n                } else {\n                    return res.status(200).json({ valid: true, message: \"token valid\", expiresIn: expiresIn, token: newToken, result: result.result });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Token();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserInformations.html":{"url":"interfaces/UserInformations.html","title":"interface - UserInformations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserInformations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apple_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            apple_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            facebook_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            facebook_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            google_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            google_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            office_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            office_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apple_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apple_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        apple_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apple_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        facebook_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        facebook_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        google_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        google_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        office_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        office_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        office_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        office_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Utils.html":{"url":"classes/Utils.html","title":"class - Utils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Utils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/utils.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRandomString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRandomString\n                        \n                    \n                \n            \n            \n                \ngetRandomString(length: number)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/utils.ts:2\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        class Utils {\n    getRandomString(length: number): string {\n        let text: string = \"\";\n        let possible: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!$&#@.\";\n        for (let i: number = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Widget.html":{"url":"classes/Widget.html","title":"class - Widget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Widget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/widget.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widget.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport Currency from './currency';\nimport Nasa from './nasa';\nimport Temperature from './temperature';\nimport IntraEpitech from './intraEpitech';\n\nclass Widget {\n    async post(req: express.Request, res: express.Response) {\n        let valid: boolean = true;\n        const type: string = req.params.type;\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n\n        switch (type) {\n            case 'currency_converter':\n                return await Currency.getExchangeRate(req, res);\n            case 'city_temperature':\n                return await Temperature.getTemperature(req, res);\n            case 'city_weather':\n                return await Temperature.getWeather(req, res);\n            case 'apod':\n                return await Nasa.getNasaDayImage(req, res);\n            case 'curiosity_image':\n                return await Nasa.getNasaRoverImage(req, res);\n            case 'intra_epitech_profile':\n                return await IntraEpitech.getProfile(req, res);\n            case 'intra_epitech_partners':\n                return await IntraEpitech.getPartners(req, res);\n            case 'intra_epitech_notifications':\n                return await IntraEpitech.getNotifications(req, res);\n            case 'intra_epitech_doors':\n                return await IntraEpitech.openDoor(req, res);\n            case 'intra_epitech_grades':\n                return await IntraEpitech.getGrades(req, res);\n            default:\n                return res.status(404).json({ error: true, message: \"widget not found\" });\n        }\n    }\n}\n\nmodule.exports = new Widget();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/database/database.ts\n            \n            variable\n            db\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            addUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getRow\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateInfos\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateUserAuthToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            IntraEpitechUser\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            UserInformations\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            app\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            server\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/request_handler.ts\n            \n            function\n            requestHandler\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/request_handler.ts\n            \n            variable\n            TOKEN_WL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes.ts\n            \n            function\n            addRoute\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/about/about.ts\n            \n            class\n            About\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/OAuth.ts\n            \n            class\n            Authentication\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/authActions.ts\n            \n            variable\n            handleOAuthUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/authActions.ts\n            \n            variable\n            handleOAuthUsersAction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/login.ts\n            \n            class\n            Login\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/register.ts\n            \n            class\n            Register\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/registerActions.ts\n            \n            variable\n            registerBasicUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/token.ts\n            \n            class\n            Token\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/auth/tokenAction.ts\n            \n            variable\n            checkToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/profile/profile.ts\n            \n            class\n            Profile\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/profile/profileActions.ts\n            \n            variable\n            updateUserInformations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/profile/profileUpdate.ts\n            \n            class\n            ProfileUpdate\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/currency.ts\n            \n            class\n            Currency\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/intraEpitech.ts\n            \n            class\n            IntraEpitech\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/routes/widgets/nasa.ts\n            \n            class\n            Nasa\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/widgets/temperature.ts\n            \n            class\n            Temperature\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/widgets/widget.ts\n            \n            class\n            Widget\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/utils.ts\n            \n            class\n            Utils\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            cors : ^2.8.5\n        \n            dotenv : ^10.0.0\n        \n            express : ^4.17.1\n        \n            jsonwebtoken : ^8.5.1\n        \n            moment : ^2.29.1\n        \n            mysql2 : ^2.3.3-rc.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addRoute   (src/.../routes.ts)\n                        \n                        \n                            requestHandler   (src/.../request_handler.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addRoute\n                        \n                    \n                \n            \n            \n                \naddRoute(endpoint: string, service: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    service\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/request_handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        requestHandler\n                        \n                    \n                \n            \n            \n                \nrequestHandler(req, res, next)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addUsers   (src/.../databaseActions.ts)\n                        \n                        \n                            app   (src/.../index.ts)\n                        \n                        \n                            checkToken   (src/.../tokenAction.ts)\n                        \n                        \n                            db   (src/.../database.ts)\n                        \n                        \n                            getRow   (src/.../databaseActions.ts)\n                        \n                        \n                            getUsers   (src/.../databaseActions.ts)\n                        \n                        \n                            handleOAuthUsers   (src/.../authActions.ts)\n                        \n                        \n                            handleOAuthUsersAction   (src/.../authActions.ts)\n                        \n                        \n                            registerBasicUser   (src/.../registerActions.ts)\n                        \n                        \n                            routes   (src/.../routes.ts)\n                        \n                        \n                            server   (src/.../index.ts)\n                        \n                        \n                            TOKEN_WL   (src/.../request_handler.ts)\n                        \n                        \n                            updateInfos   (src/.../databaseActions.ts)\n                        \n                        \n                            updateUserAuthToken   (src/.../databaseActions.ts)\n                        \n                        \n                            updateUserInformations   (src/.../profileActions.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/databaseActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, callback: Function) => {\n    let query: string = \"INSERT into users (\";\n    let wasFound: boolean = false;\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"mail, password) VALUES ('\"\n                + infos.mail + \"', '\" + infos.username + \"');\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"google_mail, google_token) VALUES ('\"\n                + infos.google_mail + \"', '\" + infos.google_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"facebook_mail, facebook_token) VALUES ('\"\n                + infos.facebook_mail + \"', '\" + infos.facebook_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"apple_mail, apple_token) VALUES ('\"\n                + infos.apple_mail + \"', '\" + infos.apple_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"office_mail, office_token) VALUES ('\"\n                + infos.office_mail + \"', '\" + infos.office_token + \"');\";\n            wasFound = true;\n        }\n\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRow\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (row: string, value: string, callback: Function) => {\n    let query: string = \"SELECT * FROM users WHERE \" + row + \" = '\" + value + \"' LIMIT 1;\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, callback: Function) => {\n    let wasFound: boolean = false;\n    let query: string = \"SELECT * FROM users WHERE \";\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"mail = '\" + infos.mail + \"' AND password = '\" + infos.password + \"';\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"google_mail = '\" + infos.google_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"facebook_mail = '\" + infos.facebook_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"apple_mail = '\" + infos.apple_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"office_mail = '\" + infos.office_mail + \"';\";\n            wasFound = true;\n        }\n\n        console.debug(\"query == \", query);\n\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(\"[getUser] err \", err);\n                callback(err);\n            } else {\n                console.debug(\"[getUser] success \", result);\n                callback(null, result);\n            }\n        });\n\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateInfos\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n    rows: Array, newValues: Array,\n    whereRow: string, whereValue: string, callback: Function) => {\n    let query: string = 'UPDATE users SET ';\n\n    for (let i = 0; i  {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n            \n                \n                    updates a row in the users table\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserAuthToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, jwtToken: string, callback: Function) => {\n    let query: string = \"UPDATE users SET \";\n    let wasFound: boolean = false;\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE mail = '\" + infos.mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE google_mail = '\" + infos.google_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE facebook_mail = '\" + infos.facebook_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE apple_mail = '\" + infos.apple_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE office_mail = '\" + infos.office_mail + \"';\";\n            wasFound = true;\n        }\n\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err || result.affectedRows === 0) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n\n    src/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        app\n                        \n                    \n                \n            \n                \n                    \n                        Default value : express()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"http\").Server(app)\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/tokenAction.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        checkToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (token: string, callback: Function) => {\n    const queryString: string = \"SELECT * FROM users WHERE token = '\" + token + \"' LIMIT 1;\";\n    db.query(queryString, (err: any, result: any) => {\n        if (err) {\n            callback(err);\n        } else {\n            console.log(\"res == \", result);\n            callback(null, result);\n        }\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/database/database.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mysql.createConnection({\n    host: process.env.MY_SQL_HOST,\n    user: process.env.MY_SQL_USER,\n    password: process.env.MY_SQL_PASSWORD,\n    database: process.env.MY_SQL_DATABASE,\n})\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/authActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleOAuthUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (req: express.Request, res: express.Response) => {\n    try {\n        const type: string = req.params.type;\n        const { access_token } = req.body;\n        let user: { type: string, userJson: any } = { type: '', userJson: {} };\n        let response: AxiosResponse;\n\n        switch (type) {\n            case 'google_user':\n                console.log('bearer token == ', access_token);\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.debug(\"response == \", response.data);\n                let googleUser = response.data;\n                user = { type: 'google_user', userJson: googleUser };\n                break;\n            case 'facebook_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.facebook.com/me/?fields=id,name,email',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let facebookUser = response.data;\n                user = { type: 'facebook_user', userJson: facebookUser };\n                break;\n            case 'office_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.microsoft.com/v1.0/me',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.log(\"response == \", response.data);\n                let officeUser = response.data;\n                user = { type: 'office_user', userJson: officeUser };\n                break;\n            default:\n                return res.status(400).json({ message: 'Bad request' });\n        }\n\n        const infos: UserInformations = {\n            mail: undefined,\n            google_mail: (user.type === 'google_user') ? user.userJson.email : undefined,\n            google_token: (user.type === 'google_user') ? access_token : undefined,\n            facebook_mail: (user.type === 'facebook_user') ? user.userJson.email : undefined,\n            facebook_token: (user.type === 'facebook_user') ? access_token : undefined,\n            apple_mail: (user.type === 'apple_user') ? user.userJson.email : undefined,\n            apple_token: (user.type === 'apple_user') ? access_token : undefined,\n            office_mail: (user.type === 'office_user') ? user.userJson.mail : undefined,\n            office_token: (user.type === 'office_user') ? access_token : undefined,\n            username: undefined,\n            password: undefined,\n        };\n\n        const result = await handleOAuthUsersAction(infos);\n        if (result.error === true) {\n            return res.status(500).json({\n                error: result.error,\n                message: result.message,\n            });\n        }\n        if (result.message === \"user created\") {\n            return res.status(200).json({ error: false, message: \"user created\", result: result.result });\n        }\n        if (result.message === \"user already exists\") {\n            const expiresIn: number = Number(process.env.EXPIRE_TIME) || 60 * 60;\n            const payload = {\n                mail: (user.type === 'google_user') ? user.userJson.email : (user.type === 'facebook_user') ? user.userJson.email : (user.type === 'apple_user') ? user.userJson.email : (user.type === 'office_user') ? user.userJson.email : \"none\",\n            };\n            const token: string = jwt.sign(\n                payload,\n                process.env.JWT_SECRET,\n                { expiresIn: expiresIn }\n            );\n            await updateUserAuthToken(infos, token, (err: any, result: any) => {\n                if (err) {\n                    console.debug('[handleOAuthUsersAction] | error[updateUserAuthToken] = ', err);\n                } else {\n                    console.debug('[handleOAuthUsersAction] | result[updateUserAuthToken] = ', result);\n                }\n            });\n            return res.status(200).json({ error: false, message: \"user logged in\", expiresIn: expiresIn, token: token, result: result.result });\n        }\n    } catch (err) {\n        console.debug('[handleOAuthUsersAction] | error = ', err);\n        return res.status(500).json({ error: true, message: \"server error\" });\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleOAuthUsersAction\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations): Promise => {\n    return new Promise(async (resolve, reject) => {\n        await getUsers(infos, async (err: any, result: any) => {\n            if (err) {\n                console.debug('[handleOAuthUsersAction] | error[getUsers] = ', err);\n                await addUsers(infos, (err: any, result: any) => {\n                    if (err) {\n                        console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                        return resolve({ error: true, message: \"internal error\" });\n                    } else {\n                        console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                        return resolve({ error: false, message: \"user created\", result: result });\n                    }\n                });\n            } else {\n                console.debug('[handleOAuthUsersAction] | result[getUsers] = ', result);\n                if (result.length === 0) {\n                    await addUsers(infos, (err: any, result: any) => {\n                        if (err) {\n                            console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                            return resolve({ error: true, message: \"internal error\" });\n                        } else {\n                            console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                            return resolve({ error: false, message: \"user created\", result: result });\n                        }\n                    });\n                } else {\n                    return resolve({ error: false, message: \"user already exists\", result: result });\n                }\n            }\n        });\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/registerActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        registerBasicUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations): Promise => {\n    return new Promise(async (resolve, reject) => {\n        await getUsers(infos, async (err: any, result: any) => {\n            if (err) {\n                console.debug('[handleOAuthUsersAction] | error[getUsers] = ', err);\n                await addUsers(infos, (err: any, result: any) => {\n                    if (err) {\n                        console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                        return resolve({ error: true, message: \"internal error\" });\n                    } else {\n                        console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                        return resolve({ error: false, message: \"user created\", result: result });\n                    }\n                });\n            } else {\n                console.debug('[handleOAuthUsersAction] | result[getUsers] = ', result);\n                if (result.length === 0) {\n                    await addUsers(infos, (err: any, result: any) => {\n                        if (err) {\n                            console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                            return resolve({ error: true, message: \"internal error\" });\n                        } else {\n                            console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                            return resolve({ error: false, message: \"user created\", result: result });\n                        }\n                    });\n                } else {\n                    return resolve({ error: false, message: \"user already exists\", result: result });\n                }\n            }\n        });\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        routes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n\n\n        \n    \n\n    src/request_handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TOKEN_WL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(register|login)/\n                    \n                \n\n\n        \n    \n\n    src/routes/profile/profileActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        updateUserInformations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (req: express.Request, res: express.Response) => {\n    try {\n        const type: string = req.params.type;\n        const { access_token, existingInformation, existingInformationType } = req.body;\n        let response: AxiosResponse;\n        let user: { type: string, userJson: any } = { type: '', userJson: {} };\n\n        switch (type) {\n            case 'google_user':\n                console.log('bearer token == ', access_token);\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.debug(\"response == \", response.data);\n                let googleUser = response.data;\n                user = { type: 'google_user', userJson: googleUser };\n                break;\n            case 'facebook_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.facebook.com/me/?fields=id,name,email',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let facebookUser = response.data;\n                user = { type: 'facebook_user', userJson: facebookUser };\n                break;\n            case 'office_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.microsoft.com/v1.0/me',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.log(\"response == \", response.data);\n                let officeUser = response.data;\n                user = { type: 'office_user', userJson: officeUser };\n                break;\n            case 'plain_user':\n                let plainUser = {\n                    mail: req.body.mail,\n                    password: req.body.password,\n                };\n                user = { type: 'plain_user', userJson: plainUser };\n                break;\n            default:\n                return res.status(400).json({ message: 'Bad request' });\n        };\n\n        if (user.type === 'google_user') {\n            await updateInfos(['google_mail', 'google_token'], [user.userJson.email, access_token], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n        if (user.type === 'office_user') {\n            await updateInfos(['office_mail', 'office_token'], [user.userJson.email, access_token], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n        if (user.type === 'facebook_user') {\n            await updateInfos(['facebook_mail', 'facebook_token'], [user.userJson.email, access_token], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n        if (user.type === 'plain_user') {\n            await updateInfos(['mail', 'password'], [user.userJson.mail, user.userJson.password], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n    } catch (error) {\n        console.error(error);\n        return res.status(500).json({ message: 'server error' });\n    }\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
