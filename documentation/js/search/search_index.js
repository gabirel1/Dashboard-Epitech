var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/About.html",[0,0.259]],["body/classes/About.html",[0,0.14,1,0.273,2,0.174,3,0.174,4,0.145,5,1.685,6,0.088,7,0.471,8,0.57,9,1.952,10,0.57,11,0.504,12,0.57,13,0.309,14,2.036,15,0.273,16,0.038,17,0.834,18,0.261,19,0.238,20,0.273,21,0.309,22,0.347,23,0.529,24,0.416,25,1.952,26,4.203,27,0.605,28,2.036,29,2.036,30,2.036,31,0.309,32,0.767,33,2.036,34,1.685,35,0.526,36,2.036,37,2.036,38,2.036,39,4.203,40,5.898,41,5.11,42,2.036,43,5.898,44,2.359,45,3.648,46,1.685,47,3.945,48,1.741,49,5.573,50,5.506,51,1.685,52,2.359,53,3.102,54,2.036,55,1.685,56,2.036,57,1.685,58,1.741,59,2.036,60,1.685,61,3.102,62,3.102,63,3.102,64,2.215,65,1.685,66,3.102,67,2.036,68,3.102,69,1.685,70,2.036,71,4.525,72,4.957,73,3.102,74,1.685,75,2.359,76,2.054,77,3.001,78,1.685,79,3.102,80,1.685,81,3.102,82,1.685,83,3.102,84,2.036,85,2.036,86,2.567,87,1.685,88,3.102,89,3.102,90,2.036,91,1.685,92,2.11,93,2.036,94,1.685,95,1.685,96,3.102,97,3.102,98,1.685,99,1.685,100,0.767,101,2.036,102,3.102,103,3.102,104,1.685,105,3.102,106,1.685,107,1.685,108,2.11,109,1.685,110,2.036,111,1.685,112,3.102,113,1.685,114,0.636,115,0.767,116,0.273,117,0.018,118,0.018]],["title/classes/Authentication.html",[0,0.207,119,2.145]],["body/classes/Authentication.html",[0,0.294,1,0.571,2,0.365,3,0.365,4,0.303,6,0.185,7,0.782,8,0.841,10,0.841,11,0.771,12,0.841,13,0.647,15,0.571,16,0.037,17,0.571,18,0.185,19,0.499,20,0.571,21,0.647,22,0.727,23,0.879,24,0.691,31,0.647,115,1.606,116,0.571,117,0.03,118,0.03,119,3.955,120,3.527,121,2.893,122,2.893,123,4.262,124,3.043,125,4.262,126,4.262]],["title/classes/Currency.html",[0,0.207,52,1.686]],["body/classes/Currency.html",[0,0.263,1,0.511,2,0.327,3,0.327,4,0.271,6,0.166,7,0.731,8,0.8,10,0.8,11,0.707,12,0.8,13,0.579,15,0.511,16,0.037,17,0.511,18,0.166,19,0.447,20,0.511,21,0.579,22,0.651,23,0.821,24,0.645,27,0.386,31,0.731,32,1.438,35,0.985,44,2.143,52,3.272,57,3.159,114,1.192,116,0.511,117,0.028,118,0.028,127,3.159,128,4.814,129,4.814,130,3.817,131,1.987,132,1.814,133,0.893,134,0.917,135,1.085,136,3.817,137,1.987,138,3.817,139,1.438,140,0.807,141,1.438,142,3.817,143,3.817,144,3.817,145,3.817,146,0.893,147,1.004,148,1.438,149,0.893,150,1.192,151,1.085,152,1.309]],["title/classes/EpitechDoors.html",[0,0.207,153,1.89]],["body/classes/EpitechDoors.html",[0,0.26,1,0.505,2,0.323,3,0.323,4,0.268,6,0.164,7,0.725,8,0.796,10,0.796,11,0.702,12,0.796,13,0.572,15,0.505,16,0.037,17,0.505,18,0.164,19,0.441,20,0.505,21,0.572,22,0.643,23,0.814,24,0.64,27,0.483,31,0.725,35,0.973,77,3.743,86,3.952,91,3.119,116,0.505,117,0.028,118,0.028,131,1.975,132,1.799,133,0.882,134,0.718,135,1.071,137,2.077,139,1.42,140,0.797,141,1.42,146,0.882,147,0.998,148,1.42,149,0.882,150,1.177,151,1.071,152,1.293,153,3.298,154,3.119,155,4.776,156,4.776,157,3.769,158,3.119,159,1.42,160,3.769,161,3.769,162,3.769,163,3.769,164,3.769]],["title/classes/Gmail.html",[0,0.207,108,1.686]],["body/classes/Gmail.html",[0,0.235,1,0.457,2,0.292,3,0.292,4,0.242,6,0.148,7,0.68,8,0.759,10,0.759,11,0.67,12,0.759,13,0.518,15,0.457,16,0.038,17,0.457,18,0.148,19,0.399,20,0.457,21,0.518,22,0.582,23,0.764,24,0.6,27,0.345,31,0.68,32,1.285,35,0.88,64,2.435,108,2.806,109,4.137,113,2.822,116,0.457,117,0.026,118,0.026,131,2,132,1.884,133,0.798,134,0.853,135,0.969,137,2,139,1.285,140,0.947,141,1.687,146,0.798,147,0.853,148,1.285,149,0.798,150,1.065,151,0.969,152,1.17,165,2.822,166,4.478,167,4.478,168,3.411,169,1.687,170,2.822,171,3.197,172,3.197,173,3.197,174,3.411,175,3.411,176,2.435,177,3.411,178,2.044,179,3.411,180,3.411,181,4.999,182,1.285,183,5.308,184,3.411,185,4.999,186,3.411,187,3.411,188,3.411,189,3.411,190,2.435,191,1.557,192,1.285]],["title/classes/IntraEpitech.html",[0,0.207,193,1.89]],["body/classes/IntraEpitech.html",[0,0.158,1,0.306,2,0.196,3,0.196,4,0.162,6,0.099,7,0.513,8,0.857,10,0.857,11,0.756,12,0.857,13,0.676,15,0.597,16,0.038,17,0.597,18,0.193,19,0.522,20,0.597,21,0.676,22,0.76,23,0.687,24,0.453,27,0.563,31,0.803,35,1.15,76,0.947,77,4.239,116,0.306,117,0.02,118,0.02,131,2.036,132,1.994,133,1.042,134,1.007,135,1.266,137,2.256,139,1.678,140,1.09,141,1.942,146,1.042,147,1.075,148,1.678,149,1.042,150,1.391,151,0.649,152,0.784,158,3.686,176,2.876,193,2.535,194,1.891,195,3.383,196,3.383,197,3.383,198,3.383,199,3.383,200,2.285,201,3.383,202,2.285,203,3.383,204,2.285,205,3.383,206,2.285,207,1.545,208,1.437,209,4.454,210,4.454,211,1.846,212,4.454,213,1.283,214,2.285,215,1.283,216,2.285,217,1.283,218,2.285,219,1.283,220,2.285,221,1.283,222,2.285,223,1.283,224,2.285,225,1.283,226,2.285,227,1.283,228,2.285,229,2.285,230,2.285,231,2.285,232,2.285,233,2.285,234,2.285,235,2.285]],["title/interfaces/IntraEpitechUser.html",[207,1.372,236,1.132]],["body/interfaces/IntraEpitechUser.html",[2,0.297,3,0.297,4,0.246,6,0.15,16,0.037,18,0.258,27,0.643,100,1.305,114,1.884,117,0.027,118,0.027,151,1.517,169,1.305,178,1.581,207,2.065,211,2.212,213,2.997,215,2.997,217,2.997,219,2.997,221,2.997,223,2.997,225,2.997,227,2.997,236,2.012,237,1.944,238,1.944,239,2.845,240,1.305,241,1.435,242,1.581,243,1.435,244,1.581,245,1.435,246,1.581,247,1.435,248,1.581,249,1.581,250,1.581,251,1.944,252,1.944,253,1.944,254,1.944,255,1.944,256,1.944,257,1.944,258,1.581,259,1.944,260,1.944,261,1.944,262,1.944]],["title/classes/LeagueOfLegends.html",[0,0.207,263,1.89]],["body/classes/LeagueOfLegends.html",[0,0.184,1,0.357,2,0.228,3,0.228,4,0.189,6,0.116,7,0.574,8,0.667,10,0.667,11,0.589,12,0.667,13,0.405,15,0.357,16,0.038,17,0.357,18,0.116,19,0.312,20,0.357,21,0.405,22,0.455,23,0.75,24,0.507,27,0.444,31,0.667,35,0.688,44,1.496,75,2.687,76,1.104,106,2.206,107,2.206,114,0.832,116,0.357,117,0.022,118,0.022,131,1.804,132,1.657,133,0.624,134,0.837,135,0.757,137,1.425,139,1.004,140,0.8,141,1.425,146,0.624,147,0.963,148,1.004,149,0.624,150,0.832,151,0.757,152,0.914,176,1.903,178,1.217,182,2.273,208,1.677,250,1.217,251,2.838,252,2.838,253,2.838,254,2.838,255,2.838,256,2.838,257,2.838,258,1.727,259,2.469,260,2.469,261,2.469,262,2.687,263,2.767,264,2.206,265,3.783,266,3.783,267,2.665,268,3.783,269,4.398,270,2.665,271,2.665,272,2.665,273,2.665,274,3.783,275,2.665,276,2.665,277,2.665,278,2.665,279,4.398,280,2.665,281,2.665,282,2.665,283,2.665,284,2.665,285,2.665,286,2.665,287,2.665,288,2.665,289,4.398,290,3.783,291,2.665,292,3.783,293,1.727,294,3.783,295,4.398,296,3.783,297,4.398,298,5.519,299,2.665,300,2.665,301,2.665,302,2.665,303,2.665]],["title/interfaces/LeagueOfLegendsGameData.html",[236,1.132,250,1.372]],["body/interfaces/LeagueOfLegendsGameData.html",[2,0.305,3,0.305,4,0.253,6,0.155,16,0.036,18,0.253,27,0.64,100,1.341,114,1.928,117,0.027,118,0.027,151,1.533,169,1.341,178,1.625,207,1.625,211,1.475,213,1.998,215,1.998,217,1.998,219,1.998,221,1.998,223,1.998,225,1.998,227,1.998,236,2.033,237,1.998,238,1.998,239,2.896,240,1.341,241,1.475,242,1.625,243,1.475,244,1.625,245,1.475,246,1.625,247,1.475,248,1.625,249,1.625,250,2.102,251,3.029,252,3.029,253,3.029,254,3.029,255,3.029,256,3.029,257,3.029,258,1.625,259,1.998,260,1.998,261,1.998,262,1.998]],["title/interfaces/LeagueOfLegendsProfileData.html",[236,1.132,258,1.372]],["body/interfaces/LeagueOfLegendsProfileData.html",[2,0.318,3,0.318,4,0.264,6,0.161,16,0.036,18,0.238,27,0.64,100,1.4,114,1.878,117,0.028,118,0.028,151,1.558,169,1.4,178,2.377,207,1.696,211,1.539,213,2.085,215,2.085,217,2.085,219,2.085,221,2.085,223,2.085,225,2.085,227,2.085,236,2.066,237,2.085,238,2.085,239,2.977,240,1.4,241,1.539,242,1.696,243,1.539,244,1.696,245,1.539,246,1.696,247,1.539,248,1.696,249,1.696,250,1.696,251,2.085,252,2.085,253,2.085,254,2.085,255,2.085,256,2.085,257,2.085,258,2.16,259,3.077,260,3.077,261,3.077,262,3.077]],["title/classes/Login.html",[0,0.207,211,1.245]],["body/classes/Login.html",[0,0.208,1,0.403,2,0.258,3,0.258,4,0.214,6,0.131,7,0.625,8,0.766,10,0.712,11,0.629,12,0.712,13,0.457,15,0.403,16,0.038,17,0.403,18,0.131,19,0.352,20,0.403,21,0.457,22,0.513,23,0.901,24,0.552,25,2.59,27,0.304,31,0.802,32,1.134,76,1.706,100,1.134,114,0.94,115,1.134,116,0.403,117,0.024,118,0.024,121,2.311,122,2.311,134,1.006,135,0.855,140,0.871,147,0.573,149,0.964,159,1.991,169,2.199,182,1.134,192,1.991,208,1.893,211,1.945,240,1.551,241,1.247,242,1.374,243,1.247,244,1.374,245,1.247,246,1.374,247,1.247,248,1.374,249,2.492,304,2.491,305,3.01,306,1.893,307,1.893,308,1.893,309,1.52,310,1.374,311,3.407,312,2.548,313,3.01,314,3.629,315,3.773,316,2.491,317,3.407,318,3.407,319,4.176,320,2.491,321,1.374,322,3.01,323,3.063,324,2.548,325,4.118,326,1.689,327,3.01,328,3.01,329,3.01,330,3.407,331,3.407,332,3.407,333,3.407,334,3.01,335,2.491,336,2.491,337,1.134]],["title/classes/Nasa.html",[0,0.207,58,1.686]],["body/classes/Nasa.html",[0,0.226,1,0.439,2,0.28,3,0.28,4,0.232,6,0.142,7,0.661,8,0.849,10,0.849,11,0.749,12,0.849,13,0.661,15,0.584,16,0.037,17,0.584,18,0.189,19,0.51,20,0.584,21,0.661,22,0.743,23,0.743,24,0.584,27,0.44,31,0.793,35,1.125,44,2.446,58,2.75,64,3.111,69,2.709,116,0.439,117,0.026,118,0.026,131,1.968,132,1.846,133,1.02,134,1.065,135,1.238,137,2.107,139,1.642,140,0.922,141,1.642,146,1.02,147,1.065,148,1.642,149,1.02,150,1.361,151,0.93,152,1.123,338,2.709,339,4.358,340,4.358,341,4.358,342,3.274,343,4.358,344,3.274,345,3.606,346,4.358,347,3.274,348,2.709,349,3.274,350,3.274,351,2.337,352,3.274,353,3.274,354,4.358,355,3.274]],["title/classes/Office.html",[0,0.207,92,1.686]],["body/classes/Office.html",[0,0.268,1,0.52,2,0.333,3,0.333,4,0.276,6,0.169,7,0.739,8,0.807,10,0.807,11,0.712,12,0.807,13,0.589,15,0.52,16,0.037,17,0.52,18,0.169,19,0.455,20,0.52,21,0.589,22,0.662,23,0.83,24,0.652,31,0.739,35,1.002,92,2.983,98,3.214,99,3.214,100,1.834,116,0.52,117,0.029,118,0.029,131,2.003,132,1.834,133,0.909,134,0.927,135,1.103,137,1.834,139,1.463,140,0.821,141,1.463,146,0.909,147,1.012,148,1.463,149,0.909,150,1.213,151,1.103,152,1.332,171,2.772,172,2.772,173,2.772,348,3.214,356,3.214,357,4.866,358,4.866,359,3.883,360,3.883]],["title/classes/Profile.html",[0,0.207,75,1.686]],["body/classes/Profile.html",[0,0.225,1,0.437,2,0.279,3,0.279,4,0.232,6,0.142,7,0.66,8,0.742,9,2.735,10,0.742,11,0.655,12,0.742,13,0.495,15,0.437,16,0.037,17,0.437,18,0.142,19,0.382,20,0.437,21,0.495,22,0.556,23,0.834,24,0.583,27,0.439,31,0.848,32,1.229,35,0.842,75,2.745,76,2.161,115,1.229,116,0.437,117,0.026,118,0.026,133,0.763,134,0.621,140,0.69,146,0.763,147,1.034,149,0.763,150,1.019,159,2.047,169,1.229,182,1.229,191,1.489,192,2.105,241,1.351,243,1.351,245,1.351,247,1.351,293,1.489,306,2.052,308,2.052,309,1.647,310,1.489,312,2.469,321,1.489,323,2.44,324,2.469,326,1.831,337,2.149,361,2.699,362,3.262,363,2.329,364,1.831,365,2.745,366,2.745,367,1.831,368,2.44,369,1.831,370,1.831,371,2.329,372,2.44,373,2.329,374,3.262,375,2.052,376,2.329,377,3.262,378,3.262,379,4.347,380,3.262,381,3.262,382,3.262,383,3.262,384,3.262,385,3.262,386,3.262,387,3.262]],["title/classes/ProfileUpdate.html",[0,0.207,388,2.145]],["body/classes/ProfileUpdate.html",[0,0.258,1,0.502,2,0.321,3,0.321,4,0.266,6,0.163,7,0.722,8,0.793,10,0.793,11,0.737,12,0.793,13,0.568,15,0.502,16,0.037,17,0.502,18,0.163,19,0.439,20,0.502,21,0.568,22,0.639,23,0.891,24,0.637,27,0.481,31,0.793,115,1.411,116,0.502,117,0.028,118,0.028,133,0.877,134,0.713,140,0.792,146,0.877,147,0.713,159,1.97,192,1.97,293,1.71,309,1.891,310,1.71,312,2.639,321,1.71,337,2.186,364,2.102,365,2.934,366,2.102,367,2.102,368,2.67,369,2.102,370,2.102,371,2.674,372,2.67,373,2.674,388,3.732,389,3.099,390,3.936,391,3.936,392,3.745,393,2.674,394,3.745,395,3.745]],["title/classes/Register.html",[0,0.207,396,2.145]],["body/classes/Register.html",[0,0.247,1,0.48,2,0.307,3,0.307,4,0.254,6,0.155,7,0.701,8,0.777,10,0.777,11,0.686,12,0.777,13,0.543,15,0.48,16,0.037,17,0.48,18,0.155,19,0.419,20,0.48,21,0.543,22,0.611,23,0.873,24,0.619,31,0.777,32,1.349,76,1.484,100,1.349,115,1.349,116,0.48,117,0.027,118,0.027,121,2.594,122,2.594,134,0.88,135,1.017,140,0.757,147,0.974,149,0.838,159,1.741,169,1.928,191,2.337,192,1.928,208,2.253,240,1.741,241,1.484,242,1.635,243,1.484,244,1.635,245,1.484,246,1.635,247,1.484,248,1.635,249,2.337,314,3.757,324,2.334,396,3.654,397,2.963,398,3.581,399,2.556,400,3.581,401,2.963,402,3.581,403,3.825,404,4.475,405,2.963,406,2.963,407,3.581,408,2.556]],["title/classes/Temperature.html",[0,0.207,48,1.686]],["body/classes/Temperature.html",[0,0.231,1,0.448,2,0.287,3,0.287,4,0.238,6,0.145,7,0.671,8,0.854,10,0.854,11,0.754,12,0.854,13,0.671,15,0.593,16,0.037,17,0.593,18,0.192,19,0.518,20,0.593,21,0.671,22,0.754,23,0.754,24,0.593,27,0.532,31,0.8,35,1.142,44,2.482,47,3.66,48,2.78,116,0.448,117,0.026,118,0.026,131,1.985,132,1.866,133,1.035,134,1.072,135,1.257,137,2.121,139,1.666,140,0.935,141,1.666,146,1.035,147,1.072,148,1.666,149,1.035,150,1.381,151,0.951,152,1.148,345,3.66,409,2.77,410,4.422,411,4.422,412,4.422,413,3.347,414,4.422,415,3.347,416,4.422,417,4.422,418,3.347,419,3.347]],["title/classes/Token.html",[0,0.207,337,1.132]],["body/classes/Token.html",[0,0.205,1,0.399,2,0.255,3,0.255,4,0.211,6,0.129,7,0.62,8,0.799,9,2.57,10,0.799,11,0.705,12,0.799,13,0.62,15,0.547,16,0.038,17,0.547,18,0.177,19,0.478,20,0.547,21,0.62,22,0.697,23,0.927,24,0.547,25,2.935,27,0.413,31,0.845,32,1.121,35,0.768,114,0.929,115,1.121,116,0.399,117,0.024,118,0.024,121,2.293,122,1.67,133,0.696,134,0.566,146,0.696,147,0.778,149,0.696,150,0.929,159,2.049,182,1.539,191,1.358,192,2.098,293,1.358,307,1.871,308,1.871,309,1.502,310,1.358,312,2.864,314,1.871,315,2.916,319,2.462,321,1.358,323,2.619,324,2.657,326,1.67,337,2.249,364,1.67,365,2.954,366,2.619,367,1.67,368,2.293,369,1.67,370,1.67,371,2.124,372,2.819,373,2.124,375,1.871,408,2.124,420,2.462,421,2.975,422,2.975,423,1.871,424,2.975,425,2.124,426,2.975,427,2.975,428,2.975,429,2.462,430,2.975,431,4.085,432,2.975,433,2.975,434,4.085,435,2.975,436,2.975,437,2.462]],["title/interfaces/UserInformations.html",[236,1.132,240,1.132]],["body/interfaces/UserInformations.html",[2,0.277,3,0.277,4,0.23,6,0.141,16,0.037,18,0.259,19,0.73,27,0.644,100,1.959,114,1.778,117,0.025,118,0.025,151,1.478,169,1.959,178,1.479,207,1.479,211,1.342,213,1.818,215,1.818,217,1.818,219,1.818,221,1.818,223,1.818,225,1.818,227,1.818,236,1.959,237,1.818,238,1.818,239,2.722,240,1.63,241,2.155,242,2.374,243,2.155,244,2.374,245,2.155,246,2.374,247,2.155,248,2.374,249,2.374,250,1.479,251,1.818,252,1.818,253,1.818,254,1.818,255,1.818,256,1.818,257,1.818,258,1.479,259,1.818,260,1.818,261,1.818,262,1.818]],["title/classes/Utils.html",[0,0.207,423,1.89]],["body/classes/Utils.html",[0,0.304,1,0.591,2,0.378,3,0.378,4,0.313,6,0.191,7,0.798,13,0.669,15,0.591,16,0.037,17,0.591,18,0.191,19,0.516,21,0.669,27,0.588,114,1.818,117,0.031,118,0.031,182,1.661,423,3.308,438,3.648,439,5.259,440,5.259,441,4.408,442,4.408,443,4.408,444,4.408,445,4.408]],["title/classes/Widget.html",[0,0.207,446,1.89]],["body/classes/Widget.html",[0,0.209,1,0.405,2,0.259,3,0.259,4,0.215,6,0.131,7,0.627,8,0.714,10,0.714,11,0.814,12,0.714,13,0.459,15,0.405,16,0.037,17,0.405,18,0.204,19,0.354,20,0.405,21,0.459,22,0.516,23,0.996,24,0.554,27,0.475,31,0.926,46,2.503,48,2.319,51,2.503,52,2.319,55,2.503,58,2.319,60,2.503,65,2.503,74,2.503,78,2.503,80,2.503,82,2.503,87,2.503,92,2.319,95,2.503,104,2.503,108,2.319,111,2.503,115,1.14,116,0.405,117,0.024,118,0.024,121,2.319,122,2.319,133,0.708,134,0.787,140,1.266,146,0.708,147,0.787,152,1.038,153,2.599,159,1.773,191,1.887,192,1.905,193,2.599,263,2.599,293,1.381,309,1.527,310,1.381,312,2.553,321,1.381,337,2.059,364,1.698,365,2.641,366,2.319,367,1.698,368,2.319,369,1.698,370,1.698,372,2.319,376,2.16,446,3.181,447,2.503,448,3.025,449,2.503,450,2.503,451,2.503,452,4.953,453,3.025,454,3.025,455,3.025,456,3.025,457,3.025,458,3.025,459,3.025,460,3.025,461,3.025,462,3.025,463,3.025,464,3.025,465,3.025]],["title/classes/WidgetsDB.html",[0,0.207,466,2.145]],["body/classes/WidgetsDB.html",[0,0.165,1,0.321,2,0.205,3,0.205,4,0.17,6,0.104,7,0.532,8,0.769,9,2.205,10,0.769,11,0.679,12,0.769,13,0.532,15,0.47,16,0.038,17,0.47,18,0.152,19,0.411,20,0.47,21,0.532,22,0.598,23,0.707,24,0.47,27,0.461,31,0.898,32,1.561,45,2.958,76,1.889,115,0.904,116,0.321,117,0.021,118,0.021,133,0.82,134,0.789,135,0.681,140,1.072,146,0.82,147,1.042,148,1.321,149,1.225,159,2.187,182,1.561,190,2.958,191,1.892,192,2.23,293,1.601,308,1.508,309,1.211,310,1.095,312,2.988,321,1.601,323,3.072,324,2.642,326,1.346,337,2.124,351,2.958,364,1.968,365,2.723,366,2.559,367,1.968,368,2.559,369,1.968,370,1.968,372,2.326,375,3.187,376,2.503,390,2.901,391,2.901,466,2.958,467,1.984,468,2.398,469,2.398,470,1.712,471,1.712,472,1.712,473,1.712,474,3.506,475,4.144,476,3.506,477,2.901,478,3.506,479,3.506,480,2.398,481,2.398]],["title/coverage.html",[482,3.403]],["body/coverage.html",[0,0.419,4,0.2,5,2.334,16,0.037,18,0.122,35,0.728,48,1.583,52,1.583,58,1.583,75,1.583,92,1.583,108,1.583,116,0.378,117,0.023,118,0.023,119,2.014,120,2.334,124,2.014,127,2.334,153,1.774,154,2.334,165,2.334,182,2.383,193,1.774,194,2.334,207,1.288,211,1.169,236,1.849,238,2.755,240,1.063,250,1.288,258,1.288,263,1.774,264,2.334,304,2.334,306,1.774,307,1.774,337,1.063,338,2.334,356,2.334,361,2.334,363,2.014,388,2.014,389,2.334,393,2.014,396,2.014,397,2.334,399,2.014,409,2.334,420,2.334,423,1.774,425,2.014,438,2.334,446,1.774,447,2.334,466,2.014,467,2.334,470,2.014,471,2.014,472,2.014,473,2.014,482,2.334,483,2.82,484,2.82,485,2.82,486,2.334,487,6.115,488,2.334,489,6.133,490,4.768,491,2.334,492,2.334,493,2.82,494,2.82,495,2.334,496,2.82,497,2.82,498,3.937,499,2.82,500,3.258,501,2.334,502,2.811,503,3.258,504,2.334,505,2.334,506,2.811,507,2.334,508,2.334,509,5.919,510,3.258,511,2.334,512,2.334,513,4.908,514,2.334,515,2.334,516,2.82,517,2.334]],["title/dependencies.html",[518,2.503,519,2.993]],["body/dependencies.html",[16,0.036,24,0.626,25,2.939,117,0.032,118,0.032,310,2.134,519,3.867,520,4.673,521,4.673,522,4.673,523,4.673,524,4.673,525,4.673,526,4.673,527,4.673,528,4.673,529,4.673]],["title/miscellaneous/functions.html",[530,1.574,531,2.993]],["body/miscellaneous/functions.html",[6,0.197,11,0.716,15,0.716,16,0.034,17,0.716,18,0.197,19,0.626,20,0.607,27,0.54,117,0.031,118,0.031,502,3.235,504,4.423,506,3.235,507,4.423,530,2.85,531,3.75,532,3.75,533,3.75,534,4.531,535,5.345,536,4.531,537,4.531,538,5.345]],["title/index.html",[6,0.13,539,2.486]],["body/index.html",[1,0.652,16,0.033,117,0.033,118,0.033,237,2.73,539,4.024,540,4.863,541,4.863]],["title/modules.html",[542,3.403]],["body/modules.html",[16,0.033,117,0.033,118,0.033,542,4.068]],["title/miscellaneous/variables.html",[530,1.574,543,2.993]],["body/miscellaneous/variables.html",[6,0.031,8,0.658,10,0.197,11,0.174,12,0.197,16,0.038,18,0.192,20,0.174,24,0.096,27,0.519,31,0.762,32,1.048,34,0.595,35,0.838,45,1.543,76,2.021,94,1.072,100,0.666,114,0.225,116,0.174,117,0.008,118,0.008,124,0.925,131,1.048,132,0.488,133,0.88,134,0.687,135,0.368,137,1.048,139,1.223,140,0.952,141,1.048,146,0.912,147,0.978,149,0.709,150,1.013,152,1.636,159,1.818,169,1.048,170,1.072,171,1.985,172,1.985,173,1.985,178,0.591,182,0.814,190,0.925,191,2.15,192,1.856,240,1.048,241,0.895,242,0.807,243,0.895,244,0.807,245,0.895,246,0.591,247,0.895,248,0.328,249,1.269,293,0.591,306,0.815,307,0.815,311,1.072,314,3.129,315,1.781,316,0.595,317,1.072,318,1.072,320,0.595,321,0.328,323,3.28,324,2.882,326,0.727,330,2.064,331,2.064,332,2.064,333,2.064,335,2.064,336,0.595,337,1.665,351,0.925,363,0.925,375,2.042,393,0.925,399,0.925,401,2.301,403,1.072,404,1.462,405,1.462,406,1.462,408,0.925,425,0.925,429,2.686,437,0.595,446,1.112,449,1.462,450,1.072,451,1.072,452,2.506,470,0.925,471,0.925,472,0.925,473,0.925,477,2.686,486,0.595,488,1.072,490,0.595,491,1.072,492,1.072,495,1.072,500,0.595,501,1.072,502,0.513,503,3.112,505,1.072,506,0.513,508,1.072,510,0.595,511,1.072,512,0.595,514,0.595,515,0.595,517,0.595,530,0.452,532,0.595,533,0.595,543,0.595,544,3.607,545,1.295,546,0.719,547,0.719,548,1.295,549,0.719,550,0.719,551,4.768,552,3.76,553,5.237,554,1.295,555,3.245,556,5.136,557,2.78,558,2.78,559,1.295,560,2.78,561,0.719,562,2.78,563,0.719,564,2.78,565,0.719,566,2.78,567,0.719,568,3.245,569,3.437,570,4.708,571,3.76,572,2.161,573,0.719,574,1.295,575,0.719,576,0.719,577,1.767,578,2.494,579,1.295,580,1.295,581,1.295,582,0.719,583,0.719,584,0.719,585,0.719,586,1.767,587,1.767,588,0.719,589,2.78,590,0.719,591,0.719,592,0.719,593,0.719,594,0.719,595,0.719,596,0.719,597,0.719,598,0.719,599,0.719,600,4.42,601,3.76,602,3.245,603,1.295,604,1.295,605,3.607,606,2.161,607,3.028,608,3.245,609,1.295,610,2.161,611,3.245,612,1.295,613,2.161,614,1.295,615,1.295,616,4.333,617,3.607,618,1.767,619,1.295,620,0.719,621,2.78,622,0.719,623,0.719,624,4.238,625,0.719,626,0.719,627,1.295,628,1.295,629,3.897,630,1.295,631,1.295,632,1.295,633,2.161,634,2.161,635,2.161,636,1.295,637,0.719,638,0.719,639,2.494,640,2.494,641,1.767,642,1.295,643,0.719,644,0.719,645,0.719,646,2.161,647,2.161,648,2.161,649,0.719,650,0.719,651,0.719,652,0.719,653,0.719]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":182,"title":{},"body":{"classes/Gmail.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0/1",{"_index":489,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":496,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":499,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":509,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":513,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":498,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":497,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":293,"title":{},"body":{"classes/LeagueOfLegends.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["1/1",{"_index":494,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":523,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":493,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":540,"title":{},"body":{"index.html":{}}}],["2.29.1",{"_index":526,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":528,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":521,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":274,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["365",{"_index":93,"title":{},"body":{"classes/About.html":{}}}],["4",{"_index":541,"title":{},"body":{"index.html":{}}}],["4.17.1",{"_index":524,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":317,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["8.5.1",{"_index":525,"title":{},"body":{"dependencies.html":{}}}],["_result",{"_index":325,"title":{},"body":{"classes/Login.html":{}}}],["_result['token",{"_index":328,"title":{},"body":{"classes/Login.html":{}}}],["_result['token_created_at",{"_index":329,"title":{},"body":{"classes/Login.html":{}}}],["abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789",{"_index":445,"title":{},"body":{"classes/Utils.html":{}}}],["access_token",{"_index":600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addroute",{"_index":507,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["addroute(endpoint",{"_index":534,"title":{},"body":{"miscellaneous/functions.html":{}}}],["addusers",{"_index":491,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["addusers(infos",{"_index":633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addwidget",{"_index":472,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["addwidget(userid",{"_index":480,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["already",{"_index":405,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["api_key",{"_index":44,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{}}}],["api_url",{"_index":41,"title":{},"body":{"classes/About.html":{}}}],["apikey",{"_index":345,"title":{},"body":{"classes/Nasa.html":{},"classes/Temperature.html":{}}}],["apod",{"_index":60,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["app",{"_index":501,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apple_mail",{"_index":245,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["apple_token",{"_index":246,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["apple_user",{"_index":618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":178,"title":{},"body":{"classes/Gmail.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["astronomy",{"_index":61,"title":{},"body":{"classes/About.html":{}}}],["async",{"_index":8,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["async(err",{"_index":475,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["authactions",{"_index":125,"title":{},"body":{"classes/Authentication.html":{}}}],["authentication",{"_index":119,"title":{"classes/Authentication.html":{}},"body":{"classes/Authentication.html":{},"coverage.html":{}}}],["authorization",{"_index":172,"title":{},"body":{"classes/Gmail.html":{},"classes/Office.html":{},"miscellaneous/variables.html":{}}}],["autologin",{"_index":77,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{}}}],["autologin.startswith(\"https://intra.epitech.eu",{"_index":158,"title":{},"body":{"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{}}}],["autologin.substring(25",{"_index":209,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["await",{"_index":140,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["axios",{"_index":131,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["axiosresponse",{"_index":132,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["bad",{"_index":614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base_currency",{"_index":144,"title":{},"body":{"classes/Currency.html":{}}}],["bearer",{"_index":173,"title":{},"body":{"classes/Gmail.html":{},"classes/Office.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":449,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["break",{"_index":607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calendar",{"_index":96,"title":{},"body":{"classes/About.html":{}}}],["callback",{"_index":552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(err",{"_index":570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["camera",{"_index":69,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["case",{"_index":452,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":146,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["checktoken",{"_index":425,"title":{},"body":{"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checktoken(token",{"_index":427,"title":{},"body":{"classes/Token.html":{}}}],["city",{"_index":47,"title":{},"body":{"classes/About.html":{},"classes/Temperature.html":{}}}],["city_temperature",{"_index":46,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["city_weather",{"_index":51,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["class",{"_index":0,"title":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{}}}],["classes",{"_index":1,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"index.html":{}}}],["client",{"_index":33,"title":{},"body":{"classes/About.html":{}}}],["console.debug(\"[getuser",{"_index":581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"[getuserbytoken",{"_index":580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"firsturl",{"_index":272,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug(\"profile",{"_index":300,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug(\"query",{"_index":568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"response",{"_index":604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"secondurl",{"_index":282,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug(\"setting",{"_index":299,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug('[handleoauthusersaction",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(err",{"_index":375,"title":{},"body":{"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["console.debug(result",{"_index":429,"title":{},"body":{"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["console.error(\"error",{"_index":646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error(error",{"_index":653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"heeeeeeeeeeeeeeeeeeeeere",{"_index":371,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{}}}],["console.log(\"heeeeeeeeeeeeeeeeeeeeere2",{"_index":373,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{}}}],["console.log(\"res",{"_index":593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"response",{"_index":612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"result",{"_index":377,"title":{},"body":{"classes/Profile.html":{}}}],["console.log(\"result[0",{"_index":378,"title":{},"body":{"classes/Profile.html":{}}}],["console.log('autologin",{"_index":161,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["console.log('bearer",{"_index":603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('currency",{"_index":143,"title":{},"body":{"classes/Currency.html":{}}}],["console.log('ip",{"_index":30,"title":{},"body":{"classes/About.html":{}}}],["console.log(error",{"_index":148,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"classes/WidgetsDB.html":{}}}],["console.log(from",{"_index":136,"title":{},"body":{"classes/Currency.html":{}}}],["const",{"_index":134,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["converter",{"_index":53,"title":{},"body":{"classes/About.html":{}}}],["cors",{"_index":520,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":482,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdat",{"_index":430,"title":{},"body":{"classes/Token.html":{}}}],["credits",{"_index":225,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["curiosity",{"_index":66,"title":{},"body":{"classes/About.html":{}}}],["curiosity_image",{"_index":65,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["currency",{"_index":52,"title":{"classes/Currency.html":{}},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["currency.getexchangerate(req",{"_index":453,"title":{},"body":{"classes/Widget.html":{}}}],["currency_converter",{"_index":55,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["current_time",{"_index":36,"title":{},"body":{"classes/About.html":{}}}],["data",{"_index":351,"title":{},"body":{"classes/Nasa.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["data.leaguepoints",{"_index":291,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.losses",{"_index":290,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.queuetype",{"_index":286,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.rank",{"_index":288,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.tier",{"_index":287,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.wins",{"_index":289,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data[0",{"_index":354,"title":{},"body":{"classes/Nasa.html":{}}}],["database",{"_index":598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database/databaseactions",{"_index":308,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{}}}],["database/interfaces",{"_index":208,"title":{},"body":{"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Register.html":{}}}],["date",{"_index":64,"title":{},"body":{"classes/About.html":{},"classes/Gmail.html":{},"classes/Nasa.html":{}}}],["date').value",{"_index":186,"title":{},"body":{"classes/Gmail.html":{}}}],["day",{"_index":63,"title":{},"body":{"classes/About.html":{}}}],["db",{"_index":488,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["db.query(query",{"_index":569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db.query(querystring",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dd",{"_index":332,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["decoded",{"_index":368,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["default",{"_index":152,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["delete",{"_index":575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletewidget",{"_index":492,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":519,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":49,"title":{},"body":{"classes/About.html":{}}}],["diff",{"_index":434,"title":{},"body":{"classes/Token.html":{}}}],["display",{"_index":50,"title":{},"body":{"classes/About.html":{}}}],["display_name",{"_index":40,"title":{},"body":{"classes/About.html":{}}}],["documentation",{"_index":483,"title":{},"body":{"coverage.html":{}}}],["door",{"_index":89,"title":{},"body":{"classes/About.html":{}}}],["door_name",{"_index":91,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{}}}],["doors",{"_index":85,"title":{},"body":{"classes/About.html":{}}}],["dotenv",{"_index":522,"title":{},"body":{"dependencies.html":{}}}],["end_date",{"_index":99,"title":{},"body":{"classes/About.html":{},"classes/Office.html":{}}}],["endpoint",{"_index":536,"title":{},"body":{"miscellaneous/functions.html":{}}}],["epitech",{"_index":72,"title":{},"body":{"classes/About.html":{}}}],["epitech_doors",{"_index":84,"title":{},"body":{"classes/About.html":{}}}],["epitech_doors_open_door",{"_index":87,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["epitechdoors",{"_index":153,"title":{"classes/EpitechDoors.html":{}},"body":{"classes/EpitechDoors.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["epitechdoors.opendoor(req",{"_index":461,"title":{},"body":{"classes/Widget.html":{}}}],["err",{"_index":323,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":147,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["error[addusers",{"_index":634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error[getusers",{"_index":632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error[updateuserauthtoken",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["events",{"_index":97,"title":{},"body":{"classes/About.html":{}}}],["exchange",{"_index":56,"title":{},"body":{"classes/About.html":{}}}],["existinginformation",{"_index":639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existinginformationtype",{"_index":640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exists",{"_index":406,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":315,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":151,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"interfaces/UserInformations.html":{}}}],["express",{"_index":24,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["express.request",{"_index":10,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["express.response",{"_index":12,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["facebook_mail",{"_index":243,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["facebook_token",{"_index":244,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["facebook_user",{"_index":608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["facebookuser",{"_index":610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":159,"title":{},"body":{"classes/EpitechDoors.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{}}}],["firstname",{"_index":213,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["firsturl",{"_index":269,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["found",{"_index":366,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["from').value",{"_index":187,"title":{},"body":{"classes/Gmail.html":{}}}],["function",{"_index":503,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":531,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gamedata",{"_index":262,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["gamedata.length",{"_index":292,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["gamedata[0].queuetype",{"_index":294,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["gamedata[1",{"_index":296,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["get(req",{"_index":9,"title":{},"body":{"classes/About.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{}}}],["getcalendarevents",{"_index":357,"title":{},"body":{"classes/Office.html":{}}}],["getcalendarevents(req",{"_index":358,"title":{},"body":{"classes/Office.html":{}}}],["getexchangerate",{"_index":128,"title":{},"body":{"classes/Currency.html":{}}}],["getexchangerate(req",{"_index":129,"title":{},"body":{"classes/Currency.html":{}}}],["getgrades",{"_index":195,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getgrades(req",{"_index":199,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getlastfivemail",{"_index":166,"title":{},"body":{"classes/Gmail.html":{}}}],["getlastfivemail(req",{"_index":167,"title":{},"body":{"classes/Gmail.html":{}}}],["getnasadayimage",{"_index":339,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasadayimage(req",{"_index":341,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasaroverimage",{"_index":340,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasaroverimage(req",{"_index":343,"title":{},"body":{"classes/Nasa.html":{}}}],["getnotifications",{"_index":196,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getnotifications(req",{"_index":201,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getpartners",{"_index":197,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getpartners(req",{"_index":203,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getprofile",{"_index":198,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getprofile(req",{"_index":205,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getrandomstring",{"_index":439,"title":{},"body":{"classes/Utils.html":{}}}],["getrandomstring(length",{"_index":440,"title":{},"body":{"classes/Utils.html":{}}}],["getrow",{"_index":363,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrow('token",{"_index":374,"title":{},"body":{"classes/Profile.html":{}}}],["gettemperature",{"_index":410,"title":{},"body":{"classes/Temperature.html":{}}}],["gettemperature(req",{"_index":412,"title":{},"body":{"classes/Temperature.html":{}}}],["getting",{"_index":303,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["getuserbytoken",{"_index":471,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuserbytoken(token",{"_index":474,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["getuserprofile",{"_index":265,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["getuserprofile(req",{"_index":266,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["getusers",{"_index":306,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getusers(infos",{"_index":631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getusers(user",{"_index":322,"title":{},"body":{"classes/Login.html":{}}}],["getweather",{"_index":411,"title":{},"body":{"classes/Temperature.html":{}}}],["getweather(req",{"_index":414,"title":{},"body":{"classes/Temperature.html":{}}}],["getwidgetsbyuserid",{"_index":470,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getwidgetsbyuserid(userid",{"_index":479,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["gmail",{"_index":108,"title":{"classes/Gmail.html":{}},"body":{"classes/About.html":{},"classes/Gmail.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["gmail.getlastfivemail(req",{"_index":465,"title":{},"body":{"classes/Widget.html":{}}}],["gmail_inbox",{"_index":111,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["google",{"_index":110,"title":{},"body":{"classes/About.html":{}}}],["google_api_key",{"_index":109,"title":{},"body":{"classes/About.html":{},"classes/Gmail.html":{}}}],["google_mail",{"_index":241,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["google_token",{"_index":242,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["google_user",{"_index":602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googleuser",{"_index":606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gpa",{"_index":227,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["grades",{"_index":83,"title":{},"body":{"classes/About.html":{}}}],["handleoauthusers",{"_index":124,"title":{},"body":{"classes/Authentication.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusers(req",{"_index":126,"title":{},"body":{"classes/Authentication.html":{}}}],["handleoauthusersaction",{"_index":511,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusersaction(infos",{"_index":620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["header.name",{"_index":183,"title":{},"body":{"classes/Gmail.html":{}}}],["headers",{"_index":171,"title":{},"body":{"classes/Gmail.html":{},"classes/Office.html":{},"miscellaneous/variables.html":{}}}],["hh:mm:ss",{"_index":333,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":34,"title":{},"body":{"classes/About.html":{},"miscellaneous/variables.html":{}}}],["http://api.openweathermap.org",{"_index":42,"title":{},"body":{"classes/About.html":{}}}],["http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key",{"_index":417,"title":{},"body":{"classes/Temperature.html":{}}}],["https://${region}.api.riotgames.com/lol/league/v4/entries/by",{"_index":280,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["https://${region}.api.riotgames.com/lol/summoner/v4/summoners/by",{"_index":270,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["https://api.nasa.gov",{"_index":59,"title":{},"body":{"classes/About.html":{}}}],["https://api.nasa.gov/mars",{"_index":349,"title":{},"body":{"classes/Nasa.html":{}}}],["https://api.nasa.gov/planetary/apod?api_key=${api_key}&date=${date",{"_index":347,"title":{},"body":{"classes/Nasa.html":{}}}],["https://ddragon.leagueoflegends.com/cdn/11.23.1/img/profileicon/${response.data['profileiconid']}.png",{"_index":276,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["https://epi",{"_index":162,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["https://freecurrencyapi.net",{"_index":54,"title":{},"body":{"classes/About.html":{}}}],["https://freecurrencyapi.net/api/v2/latest?base_currency=${from}&apikey=${api_key",{"_index":138,"title":{},"body":{"classes/Currency.html":{}}}],["https://gmail.googleapis.com/gmail/v1/users/${mail}/messages?maxresults=${max_results",{"_index":175,"title":{},"body":{"classes/Gmail.html":{}}}],["https://graph.facebook.com/me/?fields=id,name,email",{"_index":609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://graph.microsoft.com/v1.0/me",{"_index":94,"title":{},"body":{"classes/About.html":{},"miscellaneous/variables.html":{}}}],["https://graph.microsoft.com/v1.0/me/calendarview?startdatetime=${start_date}&enddatetime=${end_date",{"_index":360,"title":{},"body":{"classes/Office.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/binome/?format=json",{"_index":230,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/notes?format=json",{"_index":234,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/notification/message?format=json",{"_index":232,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user?format=json",{"_index":210,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${intra_autologin",{"_index":160,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["https://intra.epitech.eu/admin/autolog",{"_index":73,"title":{},"body":{"classes/About.html":{}}}],["https://www.googleapis.com/oauth2/v1/userinfo?alt=json",{"_index":170,"title":{},"body":{"classes/Gmail.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifier",{"_index":484,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":68,"title":{},"body":{"classes/About.html":{}}}],["import",{"_index":23,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["inbox",{"_index":112,"title":{},"body":{"classes/About.html":{}}}],["incorrect",{"_index":327,"title":{},"body":{"classes/Login.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["informations",{"_index":647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos",{"_index":401,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["infos.apple_mail",{"_index":564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.apple_token",{"_index":565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.facebook_mail",{"_index":562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.facebook_token",{"_index":563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.google_mail",{"_index":560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.google_token",{"_index":561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.mail",{"_index":557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.office_mail",{"_index":566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.office_token",{"_index":567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.password",{"_index":559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insert",{"_index":554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":236,"title":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["interfaces",{"_index":237,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"index.html":{}}}],["internal",{"_index":150,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["intra",{"_index":71,"title":{},"body":{"classes/About.html":{}}}],["intra_autologin",{"_index":86,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{}}}],["intra_epitech",{"_index":70,"title":{},"body":{"classes/About.html":{}}}],["intra_epitech_grades",{"_index":82,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_notifications",{"_index":80,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_partners",{"_index":78,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_profile",{"_index":74,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intraepitech",{"_index":193,"title":{"classes/IntraEpitech.html":{}},"body":{"classes/IntraEpitech.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["intraepitech.getgrades(req",{"_index":462,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getnotifications(req",{"_index":460,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getpartners(req",{"_index":459,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getprofile(req",{"_index":458,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitechuser",{"_index":207,"title":{"interfaces/IntraEpitechUser.html":{}},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["invalid",{"_index":372,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["ip",{"_index":26,"title":{},"body":{"classes/About.html":{}}}],["ip.split(':')[3",{"_index":29,"title":{},"body":{"classes/About.html":{}}}],["json.stringify(widget",{"_index":573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jsonwebtoken",{"_index":310,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"dependencies.html":{}}}],["jwt",{"_index":309,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwt.jwtpayload",{"_index":369,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwt.sign",{"_index":320,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["jwt.verify(token",{"_index":370,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwttoken",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":215,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["league",{"_index":102,"title":{},"body":{"classes/About.html":{}}}],["league_of_legends",{"_index":101,"title":{},"body":{"classes/About.html":{}}}],["league_of_legends_summoner_profile",{"_index":104,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["leagueoflegends",{"_index":263,"title":{"classes/LeagueOfLegends.html":{}},"body":{"classes/LeagueOfLegends.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["leagueoflegends.getuserprofile(req",{"_index":464,"title":{},"body":{"classes/Widget.html":{}}}],["leagueoflegendsgamedata",{"_index":250,"title":{"interfaces/LeagueOfLegendsGameData.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["leagueoflegendsprofiledata",{"_index":258,"title":{"interfaces/LeagueOfLegendsProfileData.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["leaguepoints",{"_index":256,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["legends",{"_index":103,"title":{},"body":{"classes/About.html":{}}}],["length",{"_index":442,"title":{},"body":{"classes/Utils.html":{}}}],["limit",{"_index":579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["literal",{"_index":637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":221,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["logged",{"_index":336,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":211,"title":{"classes/Login.html":{}},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["logue.eu/api/doors_open?login=${autologin}&door_name=${door_name",{"_index":163,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["losses",{"_index":255,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["mail",{"_index":169,"title":{},"body":{"classes/Gmail.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":118,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["max_results",{"_index":113,"title":{},"body":{"classes/About.html":{},"classes/Gmail.html":{}}}],["message",{"_index":192,"title":{},"body":{"classes/Gmail.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["messageids",{"_index":177,"title":{},"body":{"classes/Gmail.html":{}}}],["messageids.push(message.id",{"_index":180,"title":{},"body":{"classes/Gmail.html":{}}}],["messages",{"_index":181,"title":{},"body":{"classes/Gmail.html":{}}}],["messages.push(msg",{"_index":189,"title":{},"body":{"classes/Gmail.html":{}}}],["method",{"_index":141,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":7,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["miscellaneous",{"_index":530,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":331,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["module.exports",{"_index":115,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["modules",{"_index":542,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moment",{"_index":25,"title":{},"body":{"classes/About.html":{},"classes/Login.html":{},"classes/Token.html":{},"dependencies.html":{}}}],["moment().format('yyyy",{"_index":330,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["moment().unix",{"_index":37,"title":{},"body":{"classes/About.html":{}}}],["moment(result[0].token_created_at",{"_index":432,"title":{},"body":{"classes/Token.html":{}}}],["moment.moment",{"_index":431,"title":{},"body":{"classes/Token.html":{}}}],["montpellier",{"_index":90,"title":{},"body":{"classes/About.html":{}}}],["mysql.createconnection",{"_index":594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":527,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":17,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["name/${summoner_name}?api_key=${api_key",{"_index":271,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["nasa",{"_index":58,"title":{"classes/Nasa.html":{}},"body":{"classes/About.html":{},"classes/Nasa.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["nasa.getnasadayimage(req",{"_index":456,"title":{},"body":{"classes/Widget.html":{}}}],["nasa.getnasaroverimage(req",{"_index":457,"title":{},"body":{"classes/Widget.html":{}}}],["new",{"_index":116,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newtoken",{"_index":319,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{}}}],["newvalues",{"_index":583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["next",{"_index":538,"title":{},"body":{"miscellaneous/functions.html":{}}}],["none",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notifications",{"_index":81,"title":{},"body":{"classes/About.html":{}}}],["now",{"_index":433,"title":{},"body":{"classes/Token.html":{}}}],["now.diff(createdat",{"_index":435,"title":{},"body":{"classes/Token.html":{}}}],["null",{"_index":428,"title":{},"body":{"classes/Token.html":{}}}],["number",{"_index":114,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"miscellaneous/variables.html":{}}}],["number(process.env.expire_time",{"_index":316,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["office",{"_index":92,"title":{"classes/Office.html":{}},"body":{"classes/About.html":{},"classes/Office.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["office.getcalendarevents(req",{"_index":463,"title":{},"body":{"classes/Widget.html":{}}}],["office_calendar_events",{"_index":95,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["office_mail",{"_index":247,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["office_token",{"_index":100,"title":{},"body":{"classes/About.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Office.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["office_user",{"_index":611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["officeuser",{"_index":613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["open",{"_index":88,"title":{},"body":{"classes/About.html":{}}}],["opendoor",{"_index":155,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["opendoor(req",{"_index":156,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["optional",{"_index":19,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["outlook_mail",{"_index":384,"title":{},"body":{"classes/Profile.html":{}}}],["overview",{"_index":539,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":518,"title":{"dependencies.html":{}},"body":{}}],["parameters",{"_index":15,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":43,"title":{},"body":{"classes/About.html":{}}}],["partners",{"_index":79,"title":{},"body":{"classes/About.html":{}}}],["password",{"_index":249,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":390,"title":{},"body":{"classes/ProfileUpdate.html":{},"classes/WidgetsDB.html":{}}}],["patch(req",{"_index":391,"title":{},"body":{"classes/ProfileUpdate.html":{},"classes/WidgetsDB.html":{}}}],["payload",{"_index":318,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["photo",{"_index":353,"title":{},"body":{"classes/Nasa.html":{}}}],["photos/api/v1/rovers/curiosity/photos?earth_date=${date}&camera=${camera}&api_key=${api_key",{"_index":350,"title":{},"body":{"classes/Nasa.html":{}}}],["picture",{"_index":62,"title":{},"body":{"classes/About.html":{}}}],["plain_user",{"_index":641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plainuser",{"_index":642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["possible",{"_index":444,"title":{},"body":{"classes/Utils.html":{}}}],["post",{"_index":121,"title":{},"body":{"classes/Authentication.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["post(req",{"_index":122,"title":{},"body":{"classes/Authentication.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["process.env.jwt_secret",{"_index":321,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["process.env.my_sql_database",{"_index":599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_host",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_password",{"_index":597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_user",{"_index":596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.nasa_api_key",{"_index":346,"title":{},"body":{"classes/Nasa.html":{}}}],["process.env.weather_api_key",{"_index":416,"title":{},"body":{"classes/Temperature.html":{}}}],["profile",{"_index":75,"title":{"classes/Profile.html":{}},"body":{"classes/About.html":{},"classes/LeagueOfLegends.html":{},"classes/Profile.html":{},"coverage.html":{}}}],["profileactions",{"_index":394,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["profileiconurl",{"_index":261,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["profilepicture",{"_index":217,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["profileupdate",{"_index":388,"title":{"classes/ProfileUpdate.html":{}},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{}}}],["promise",{"_index":627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise(async",{"_index":628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promo",{"_index":219,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["properties",{"_index":239,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["query",{"_index":553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["querystring",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queuetype",{"_index":251,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["rank",{"_index":253,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["ranked_flex_sr",{"_index":297,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["ranked_solo_5x5",{"_index":295,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["rate",{"_index":57,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{}}}],["rc.0",{"_index":529,"title":{},"body":{"dependencies.html":{}}}],["region",{"_index":107,"title":{},"body":{"classes/About.html":{},"classes/LeagueOfLegends.html":{}}}],["register",{"_index":396,"title":{"classes/Register.html":{}},"body":{"classes/Register.html":{},"coverage.html":{}}}],["registeractions",{"_index":400,"title":{},"body":{"classes/Register.html":{}}}],["registerbasicuser",{"_index":399,"title":{},"body":{"classes/Register.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registerbasicuser(infos",{"_index":402,"title":{},"body":{"classes/Register.html":{}}}],["register|login",{"_index":638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reject",{"_index":630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req",{"_index":20,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["req.body",{"_index":135,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["req.body.mail",{"_index":643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.body.password",{"_index":644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":364,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["req.ip",{"_index":28,"title":{},"body":{"classes/About.html":{}}}],["req.params.type",{"_index":450,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesthandler",{"_index":504,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["requesthandler(req",{"_index":537,"title":{},"body":{"miscellaneous/functions.html":{}}}],["require(\"http\").server(app",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":313,"title":{},"body":{"classes/Login.html":{}}}],["res",{"_index":11,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["res.status(200).json",{"_index":32,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/Gmail.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["res.status(200).json(photo",{"_index":355,"title":{},"body":{"classes/Nasa.html":{}}}],["res.status(200).json(profile",{"_index":301,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["res.status(200).json(response.data",{"_index":348,"title":{},"body":{"classes/Nasa.html":{},"classes/Office.html":{}}}],["res.status(200).json(response.data['main",{"_index":418,"title":{},"body":{"classes/Temperature.html":{}}}],["res.status(200).json(response.data['weather",{"_index":419,"title":{},"body":{"classes/Temperature.html":{}}}],["res.status(200).json(response2.data",{"_index":233,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(response2.data['binomes",{"_index":231,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(response2.data['modules",{"_index":235,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(user",{"_index":229,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(400).json",{"_index":311,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["res.status(401).json",{"_index":365,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["res.status(403).json",{"_index":407,"title":{},"body":{"classes/Register.html":{}}}],["res.status(404).json",{"_index":376,"title":{},"body":{"classes/Profile.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["res.status(500).json",{"_index":149,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["res.status(response.status).json(response.data",{"_index":164,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["res.status(response2.status).json",{"_index":302,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["resolve",{"_index":629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":139,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["response.data",{"_index":605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response.data.data[to",{"_index":142,"title":{},"body":{"classes/Currency.html":{}}}],["response.data.email",{"_index":174,"title":{},"body":{"classes/Gmail.html":{}}}],["response.data.photos",{"_index":352,"title":{},"body":{"classes/Nasa.html":{}}}],["response.data['credits",{"_index":226,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['firstname",{"_index":214,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['gpa'][0]['gpa",{"_index":228,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['groups'][0]['name",{"_index":222,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['id",{"_index":275,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response.data['lastname",{"_index":216,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['login",{"_index":212,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['name",{"_index":278,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response.data['picture",{"_index":218,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['promo",{"_index":220,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['semester_code",{"_index":224,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['summonerlevel",{"_index":277,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response.status",{"_index":273,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response2",{"_index":176,"title":{},"body":{"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{}}}],["response2.data.length",{"_index":284,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response2.data.map((data",{"_index":285,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response2.data.messages.foreach((message",{"_index":179,"title":{},"body":{"classes/Gmail.html":{}}}],["response2.status",{"_index":283,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response3.data.payload.headers.find((header",{"_index":185,"title":{},"body":{"classes/Gmail.html":{}}}],["result",{"_index":324,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["result.affectedrows",{"_index":437,"title":{},"body":{"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["result.error",{"_index":403,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["result.length",{"_index":326,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["result.message",{"_index":404,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["result.result",{"_index":408,"title":{},"body":{"classes/Register.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["result[0",{"_index":379,"title":{},"body":{"classes/Profile.html":{}}}],["result[addusers",{"_index":635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[getusers",{"_index":636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[updateuserauthtoken",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["results",{"_index":117,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":31,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":21,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["routes",{"_index":508,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rover",{"_index":67,"title":{},"body":{"classes/About.html":{}}}],["row",{"_index":577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rows",{"_index":582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rslt",{"_index":380,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['apple_mail",{"_index":386,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['facebook_mail",{"_index":383,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['google_mail",{"_index":382,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['mail",{"_index":381,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['office_mail",{"_index":387,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['outlook_mail",{"_index":385,"title":{},"body":{"classes/Profile.html":{}}}],["seconds",{"_index":436,"title":{},"body":{"classes/Token.html":{}}}],["secondurl",{"_index":279,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["select",{"_index":578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["semestercode",{"_index":223,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["server",{"_index":35,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":535,"title":{},"body":{"miscellaneous/functions.html":{}}}],["services",{"_index":38,"title":{},"body":{"classes/About.html":{}}}],["set",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":3,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["src/.../authactions.ts",{"_index":548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.ts",{"_index":547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../databaseactions.ts",{"_index":544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../profileactions.ts",{"_index":550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../registeractions.ts",{"_index":549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../request_handler.ts",{"_index":533,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../routes.ts",{"_index":532,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../tokenaction.ts",{"_index":546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/database/database.ts",{"_index":486,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/databaseactions.ts",{"_index":490,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/interfaces.ts",{"_index":238,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["src/index.ts",{"_index":500,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/request_handler.ts",{"_index":502,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/routes.ts",{"_index":506,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/routes/about/about.ts",{"_index":5,"title":{},"body":{"classes/About.html":{},"coverage.html":{}}}],["src/routes/about/about.ts:5",{"_index":14,"title":{},"body":{"classes/About.html":{}}}],["src/routes/auth/authactions.ts",{"_index":510,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/auth/login.ts",{"_index":304,"title":{},"body":{"classes/Login.html":{},"coverage.html":{}}}],["src/routes/auth/login.ts:8",{"_index":305,"title":{},"body":{"classes/Login.html":{}}}],["src/routes/auth/oauth.ts",{"_index":120,"title":{},"body":{"classes/Authentication.html":{},"coverage.html":{}}}],["src/routes/auth/oauth.ts:5",{"_index":123,"title":{},"body":{"classes/Authentication.html":{}}}],["src/routes/auth/register.ts",{"_index":397,"title":{},"body":{"classes/Register.html":{},"coverage.html":{}}}],["src/routes/auth/register.ts:6",{"_index":398,"title":{},"body":{"classes/Register.html":{}}}],["src/routes/auth/registeractions.ts",{"_index":512,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/auth/token.ts",{"_index":420,"title":{},"body":{"classes/Token.html":{},"coverage.html":{}}}],["src/routes/auth/token.ts:42",{"_index":422,"title":{},"body":{"classes/Token.html":{}}}],["src/routes/auth/token.ts:9",{"_index":421,"title":{},"body":{"classes/Token.html":{}}}],["src/routes/auth/tokenaction.ts",{"_index":514,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/profile/profile.ts",{"_index":361,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{}}}],["src/routes/profile/profile.ts:6",{"_index":362,"title":{},"body":{"classes/Profile.html":{}}}],["src/routes/profile/profileactions.ts",{"_index":515,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/profile/profileupdate.ts",{"_index":389,"title":{},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{}}}],["src/routes/profile/profileupdate.ts:6",{"_index":392,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["src/routes/widgets/currency.ts",{"_index":127,"title":{},"body":{"classes/Currency.html":{},"coverage.html":{}}}],["src/routes/widgets/currency.ts:5",{"_index":130,"title":{},"body":{"classes/Currency.html":{}}}],["src/routes/widgets/epitechdoors.ts",{"_index":154,"title":{},"body":{"classes/EpitechDoors.html":{},"coverage.html":{}}}],["src/routes/widgets/epitechdoors.ts:5",{"_index":157,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["src/routes/widgets/gmail.ts",{"_index":165,"title":{},"body":{"classes/Gmail.html":{},"coverage.html":{}}}],["src/routes/widgets/gmail.ts:5",{"_index":168,"title":{},"body":{"classes/Gmail.html":{}}}],["src/routes/widgets/intraepitech.ts",{"_index":194,"title":{},"body":{"classes/IntraEpitech.html":{},"coverage.html":{}}}],["src/routes/widgets/intraepitech.ts:105",{"_index":200,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:43",{"_index":204,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:6",{"_index":206,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:74",{"_index":202,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/leagueoflegends.ts",{"_index":264,"title":{},"body":{"classes/LeagueOfLegends.html":{},"coverage.html":{}}}],["src/routes/widgets/leagueoflegends.ts:6",{"_index":267,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["src/routes/widgets/nasa.ts",{"_index":338,"title":{},"body":{"classes/Nasa.html":{},"coverage.html":{}}}],["src/routes/widgets/nasa.ts:24",{"_index":344,"title":{},"body":{"classes/Nasa.html":{}}}],["src/routes/widgets/nasa.ts:5",{"_index":342,"title":{},"body":{"classes/Nasa.html":{}}}],["src/routes/widgets/office.ts",{"_index":356,"title":{},"body":{"classes/Office.html":{},"coverage.html":{}}}],["src/routes/widgets/office.ts:5",{"_index":359,"title":{},"body":{"classes/Office.html":{}}}],["src/routes/widgets/temperature.ts",{"_index":409,"title":{},"body":{"classes/Temperature.html":{},"coverage.html":{}}}],["src/routes/widgets/temperature.ts:24",{"_index":415,"title":{},"body":{"classes/Temperature.html":{}}}],["src/routes/widgets/temperature.ts:5",{"_index":413,"title":{},"body":{"classes/Temperature.html":{}}}],["src/routes/widgets/widget.ts",{"_index":447,"title":{},"body":{"classes/Widget.html":{},"coverage.html":{}}}],["src/routes/widgets/widget.ts:13",{"_index":448,"title":{},"body":{"classes/Widget.html":{}}}],["src/routes/widgets/widgetsdb.ts",{"_index":467,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{}}}],["src/routes/widgets/widgetsdb.ts:6",{"_index":468,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["src/routes/widgets/widgetsdb.ts:66",{"_index":469,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["src/utils/utils.ts",{"_index":438,"title":{},"body":{"classes/Utils.html":{},"coverage.html":{}}}],["src/utils/utils.ts:2",{"_index":441,"title":{},"body":{"classes/Utils.html":{}}}],["start_date",{"_index":98,"title":{},"body":{"classes/About.html":{},"classes/Office.html":{}}}],["statements",{"_index":485,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":27,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["subject').value",{"_index":184,"title":{},"body":{"classes/Gmail.html":{}}}],["success",{"_index":190,"title":{},"body":{"classes/Gmail.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["summoner",{"_index":105,"title":{},"body":{"classes/About.html":{}}}],["summoner/${summoner_id}?api_key=${api_key",{"_index":281,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["summoner_id",{"_index":268,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["summoner_name",{"_index":106,"title":{},"body":{"classes/About.html":{},"classes/LeagueOfLegends.html":{}}}],["summonerlevel",{"_index":260,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["summonername",{"_index":259,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["switch",{"_index":451,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":517,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":516,"title":{},"body":{"coverage.html":{}}}],["target_currency",{"_index":145,"title":{},"body":{"classes/Currency.html":{}}}],["temperature",{"_index":48,"title":{"classes/Temperature.html":{}},"body":{"classes/About.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["temperature.gettemperature(req",{"_index":454,"title":{},"body":{"classes/Widget.html":{}}}],["temperature.getweather(req",{"_index":455,"title":{},"body":{"classes/Widget.html":{}}}],["text",{"_index":443,"title":{},"body":{"classes/Utils.html":{}}}],["tier",{"_index":252,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["to').value",{"_index":188,"title":{},"body":{"classes/Gmail.html":{}}}],["token",{"_index":337,"title":{"classes/Token.html":{}},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token.split",{"_index":367,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["token_created_at",{"_index":335,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["token_wl",{"_index":505,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenaction",{"_index":426,"title":{},"body":{"classes/Token.html":{}}}],["true",{"_index":191,"title":{},"body":{"classes/Gmail.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":133,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":18,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":314,"title":{},"body":{"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["unknown",{"_index":22,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["unranked",{"_index":298,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["update",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updated",{"_index":648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos",{"_index":307,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateinfos(['facebook_mail",{"_index":650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['google_mail",{"_index":645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['mail",{"_index":651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['office_mail",{"_index":649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['token",{"_index":334,"title":{},"body":{"classes/Login.html":{}}}],["updates",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuserauthtoken",{"_index":495,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateuserauthtoken(infos",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuserinformations",{"_index":393,"title":{},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateuserinformations(req",{"_index":395,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["updatewidget",{"_index":473,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updatewidget(userid",{"_index":481,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["url",{"_index":137,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":76,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["user.length",{"_index":476,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["user.type",{"_index":616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.email",{"_index":617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.mail",{"_index":619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.password",{"_index":652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user[0]['id",{"_index":478,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["user_id",{"_index":572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":477,"title":{},"body":{"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["userinformations",{"_index":240,"title":{"interfaces/UserInformations.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userjson",{"_index":601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["username",{"_index":248,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils",{"_index":423,"title":{"classes/Utils.html":{}},"body":{"classes/Token.html":{},"classes/Utils.html":{},"coverage.html":{}}}],["utils/utils",{"_index":424,"title":{},"body":{"classes/Token.html":{}}}],["valid",{"_index":312,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["value",{"_index":551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["values",{"_index":558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":487,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":543,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["wasfound",{"_index":556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["weather",{"_index":39,"title":{},"body":{"classes/About.html":{}}}],["whererow",{"_index":584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wherevalue",{"_index":585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["widget",{"_index":446,"title":{"classes/Widget.html":{}},"body":{"classes/Widget.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["widgetid",{"_index":574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["widgets",{"_index":45,"title":{},"body":{"classes/About.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["widgetsdb",{"_index":466,"title":{"classes/WidgetsDB.html":{}},"body":{"classes/WidgetsDB.html":{},"coverage.html":{}}}],["winrate",{"_index":257,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["wins",{"_index":254,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/About.html":{"url":"classes/About.html","title":"class - About","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  About\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/about/about.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/about/about.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport moment from \"moment\";\n\nclass About {\n  async get(req: express.Request, res: express.Response) {\n    let ip: string = req.ip;\n    ip = ip.split(':')[3];\n    console.log('ip == ', ip);\n\n    return res.status(200).json({\n      \"client\": {\n        \"host\": ip,\n      },\n      \"server\": {\n        \"current_time\": moment().unix(),\n        \"services\": [\n          {\n            \"name\": \"weather\",\n            \"display_name\": \"Weather\",\n            \"api_url\": \"http://api.openweathermap.org\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"widgets\": [\n              {\n                \"name\": \"city_temperature\",\n                \"display_name\": \"City temperature\",\n                \"description\": \"Display temperature for a city\",\n                \"params\": [\n                  {\n                    \"name\": \"city\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },\n              {\n                \"name\": \"city_weather\",\n                \"display_name\": \"City weather\",\n                \"description\": \"Display weather for a city\",\n                \"params\": [\n                  {\n                    \"name\": \"city\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"currency\",\n            \"display_name\": \"Currency Converter\",\n            \"api_url\": \"https://freecurrencyapi.net/\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"widgets\": [\n              {\n                \"name\": \"currency_converter\",\n                \"display_name\": \"Currency Converter\",\n                \"description\": \"Display the exchange rate of a currency\",\n                \"params\": [\n                  {\n                    \"name\": \"from\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"to\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"nasa\",\n            \"display_name\": \"NASA\",\n            \"api_url\": \"https://api.nasa.gov/\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"widgets\": [\n              {\n                \"name\": \"apod\",\n                \"display_name\": \"Astronomy Picture of the Day\",\n                \"description\": \"Display the Astronomy Picture of the Day\",\n                \"params\": [\n                  {\n                    \"name\": \"date\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },\n              {\n                \"name\": \"curiosity_image\",\n                \"display_name\": \"Curiosity Rover Image\",\n                \"description\": \"Display an image from a curiosity\",\n                \"params\": [\n                  {\n                    \"name\": \"date\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"camera\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"intra_epitech\",\n            \"display_name\": \"Intra Epitech\",\n            \"params\": [],\n            \"api_url\": \"https://intra.epitech.eu/admin/autolog\",\n            \"widgets\": [\n              {\n                \"name\": \"intra_epitech_profile\",\n                \"display_name\": \"Profile\",\n                \"description\": \"Display the profile of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_partners\",\n                \"display_name\": \"Partners\",\n                \"description\": \"Display the partners of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_notifications\",\n                \"display_name\": \"Notifications\",\n                \"description\": \"Display the notifications of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_grades\",\n                \"display_name\": \"Grades\",\n                \"description\": \"Display the grades of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"epitech_doors\",\n            \"display_name\": \"Epitech Doors\",\n            \"params\": [\n              {\n                \"name\": \"intra_autologin\",\n                \"type\": \"string\",\n              }\n            ],\n            \"api_url\": \"https://intra.epitech.eu/admin/autolog\",\n            \"widgets\": [\n              {\n                \"name\": \"epitech_doors_open_door\",\n                \"display_name\": \"Open door\",\n                \"description\": \"Open the door in epitech montpellier\",\n                \"params\": [\n                  {\n                    \"name\": \"door_name\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"intra_autologin\",\n                    \"type\": \"string\",\n                  }\n                ],\n              }\n            ]\n          },{\n            \"name\": \"office\",\n            \"display_name\": \"Office 365\",\n            \"params\": [],\n            \"api_url\": \"https://graph.microsoft.com/v1.0/me/\",\n            \"widgets\": [\n              {\n                \"name\": \"office_calendar_events\",\n                \"display_name\": \"Calendar events\",\n                \"description\": \"Display the calendar events of an office user\",\n                \"params\": [\n                  {\n                    \"name\": \"start_date\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"end_date\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"office_token\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"league_of_legends\",\n            \"display_name\": \"League of Legends\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"api_url\": \"\",\n            \"widgets\": [\n              {\n                \"name\": \"league_of_legends_summoner_profile\",\n                \"display_name\": \"Summoner profile\",\n                \"description\": \"Display the summoner profile of a league of legends user\",\n                \"params\": [\n                  {\n                    \"name\": \"summoner_name\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"region\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"gmail\",\n            \"display_name\": \"Gmail\",\n            \"params\": [\n              {\n                \"name\": \"google_api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"api_url\": \"google\",\n            \"widgets\": [\n              {\n                \"name\": \"gmail_inbox\",\n                \"display_name\": \"Inbox\",\n                \"description\": \"Display the inbox of a gmail user\",\n                \"params\": [\n                  {\n                    \"name\": \"max_results\",\n                    \"type\": \"number\",\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    });\n  }\n};\n\nmodule.exports = new About();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Authentication.html":{"url":"classes/Authentication.html","title":"class - Authentication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Authentication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/OAuth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/OAuth.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport { handleOAuthUsers } from './authActions';\n\nclass Authentication {\n    async post(req: express.Request, res: express.Response) {\n        return handleOAuthUsers(req, res);\n    }\n}\n\nmodule.exports = new Authentication();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Currency.html":{"url":"classes/Currency.html","title":"class - Currency","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Currency\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/currency.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getExchangeRate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getExchangeRate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getExchangeRate(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/currency.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Currency {\n    async getExchangeRate(req: express.Request, res: express.Response) {\n        try {\n            const { from, to, api_key } = req.body;\n            console.log(from, to);\n            const url: string = `https://freecurrencyapi.net/api/v2/latest?base_currency=${from}&apikey=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            let currency: number = response.data.data[to];\n            console.log('currency == ', currency);\n            return res.status(200).json({\n                \"base_currency\": from,\n                \"target_currency\": to,\n                \"rate\": currency\n            });\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Currency();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EpitechDoors.html":{"url":"classes/EpitechDoors.html","title":"class - EpitechDoors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EpitechDoors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/epitechDoors.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                openDoor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        openDoor\n                        \n                    \n                \n            \n            \n                \n                    \n                    openDoor(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/epitechDoors.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass EpitechDoors {\n    async openDoor(req: express.Request, res: express.Response) {\n        try {\n            const { intra_autologin, door_name } = req.body;\n            let autoLogin: string = intra_autologin;\n            let url: string = \"\";\n\n            if (autoLogin.startsWith(\"https://intra.epitech.eu/\") == false) {\n                autoLogin = `https://intra.epitech.eu/${intra_autologin}`;\n            }\n            console.log('autologin == ', autoLogin);\n            url = `https://epi-logue.eu/api/doors_open?login=${autoLogin}&door_name=${door_name}`;\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(response.status).json(response.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n};\n\nexport default new EpitechDoors();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Gmail.html":{"url":"classes/Gmail.html","title":"class - Gmail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Gmail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/gmail.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getLastFiveMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getLastFiveMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLastFiveMail(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/gmail.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Gmail {\n    async getLastFiveMail(req: express.Request, res: express.Response) {\n        try {\n            const { google_api_key, max_results } = req.body;\n            let mail: string = \"\";\n\n            let response: AxiosResponse =  await axios({\n                method: 'GET',\n                url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                headers: {\n                    'Authorization': `Bearer ${google_api_key}`\n                },\n            });\n            mail = response.data.email;\n            const url = `https://gmail.googleapis.com/gmail/v1/users/${mail}/messages?maxResults=${max_results}`;\n            let response2: AxiosResponse = await axios({\n                method: 'GET',\n                url: url,\n                headers: {\n                    'Authorization': `Bearer ${google_api_key}`\n                },\n            });\n            let messageIds: Array = [];\n            response2.data.messages.forEach((message: any) => {\n                messageIds.push(message.id);\n            });\n            let messages: Array = [];\n            for (let i = 0; i  header.name === 'Subject').value,\n                    date: response3.data.payload.headers.find((header: any) => header.name === 'Date').value,\n                    from: response3.data.payload.headers.find((header: any) => header.name === 'From').value,\n                    to: response3.data.payload.headers.find((header: any) => header.name === 'To').value,\n                };\n                messages.push(msg);\n            }\n            return res.status(200).json({\n                success: true,\n                messages: messages\n            });\n\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                message: 'Internal Server Error'\n            });\n        }\n    }\n}\n\nexport default new Gmail();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IntraEpitech.html":{"url":"classes/IntraEpitech.html","title":"class - IntraEpitech","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IntraEpitech\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/intraEpitech.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getGrades\n                            \n                            \n                                    Async\n                                getNotifications\n                            \n                            \n                                    Async\n                                getPartners\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getGrades\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGrades(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNotifications(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPartners\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPartners(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\nimport { IntraEpitechUser } from '../../database/interfaces';\n\nclass IntraEpitech {\n    async getProfile(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n            url = `https://intra.epitech.eu/${autoLogin}/user?format=json`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            const user: IntraEpitechUser = {\n                login: response.data['login'],\n                firstname: response.data['firstname'],\n                lastname: response.data['lastname'],\n                profilePicture: response.data['picture'],\n                promo: response.data['promo'],\n                location: response.data['groups'][0]['name'],\n                semesterCode: response.data['semester_code'],\n                credits: response.data['credits'],\n                gpa: response.data['gpa'][0]['gpa'],\n            };\n            return res.status(200).json(user);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getPartners(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n    \n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n    \n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: `https://intra.epitech.eu/${autoLogin}/user?format=json`\n            });\n            const login: string = response.data['login'];\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/binome/?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response2.data['binomes']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getNotifications(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;            \n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: `https://intra.epitech.eu/${autoLogin}/user?format=json`\n            });\n            const login: string = response.data['login'];\n\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/notification/message?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(200).json(response2.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getGrades(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                autoLogin = autoLogin.substring(25);\n            }\n            url = `https://intra.epitech.eu/${autoLogin}/user?format=json`;\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            const login: string = response.data['login'];\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/notes?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(200).json(response2.data['modules']);            \n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new IntraEpitech();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IntraEpitechUser.html":{"url":"interfaces/IntraEpitechUser.html","title":"interface - IntraEpitechUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IntraEpitechUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            credits\n                                        \n                                \n                                \n                                        \n                                            firstname\n                                        \n                                \n                                \n                                        \n                                            gpa\n                                        \n                                \n                                \n                                        \n                                            lastname\n                                        \n                                \n                                \n                                        \n                                            location\n                                        \n                                \n                                \n                                        \n                                            login\n                                        \n                                \n                                \n                                        \n                                            profilePicture\n                                        \n                                \n                                \n                                        \n                                            promo\n                                        \n                                \n                                \n                                        \n                                            semesterCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        credits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        credits:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gpa\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gpa:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        location:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profilePicture\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profilePicture:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        promo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        promo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        semesterCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        semesterCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeagueOfLegends.html":{"url":"classes/LeagueOfLegends.html","title":"class - LeagueOfLegends","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeagueOfLegends\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/leagueoflegends.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/leagueoflegends.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import axios, { AxiosResponse } from 'axios';\nimport express from 'express';\nimport { LeagueOfLegendsProfileData, LeagueOfLegendsGameData } from '../../database/interfaces';\n\nclass LeagueOfLegends {\n    async getUserProfile(req: express.Request, res: express.Response) {\n        try {\n            const { api_key, summoner_name, region } = req.body;\n            let summoner_id: string = '';\n            let profileIconURL: string = '';\n            let summonerLevel: number = 0;\n            let summonerName: string = '';\n            let gameData: Array = [];\n            \n            const firstURL = `https://${region}.api.riotgames.com/lol/summoner/v4/summoners/by-name/${summoner_name}?api_key=${api_key}`;\n            \n            console.debug(\"firstURL: \", firstURL);\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: firstURL,\n            });\n            if (response.status === 200) {\n                summoner_id = response.data['id'];\n                profileIconURL = `https://ddragon.leagueoflegends.com/cdn/11.23.1/img/profileicon/${response.data['profileIconId']}.png`;\n                summonerLevel = response.data['summonerLevel'];\n                summonerName = response.data['name'];\n            }\n            const secondURL = `https://${region}.api.riotgames.com/lol/league/v4/entries/by-summoner/${summoner_id}?api_key=${api_key}`;\n            console.debug(\"secondURL: \", secondURL);\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: secondURL,\n            });\n            if (response2.status == 200) {\n                if (response2.data.length > 0) {\n                    gameData = response2.data.map((data: any) => {\n                        return {\n                            queueType: data.queueType,\n                            tier: data.tier,\n                            rank: data.rank,\n                            wins: data.wins,\n                            losses: data.losses,\n                            leaguePoints: data.leaguePoints,\n                            winRate: data.wins / (data.wins + data.losses),\n                        };\n                    });\n                    if (gameData.length == 1 && gameData[0].queueType == 'RANKED_SOLO_5x5') {\n                        gameData[1] = {\n                            queueType: 'RANKED_FLEX_SR',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        };\n                    }\n                    else if (gameData.length == 1 && gameData[0].queueType == 'RANKED_FLEX_SR') {\n                        gameData[1] = {\n                            queueType: 'RANKED_SOLO_5x5',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        };\n                    }\n                }\n                else {\n                    gameData = [\n                        {\n                            queueType: 'RANKED_FLEX_SR',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        },\n                        {\n                            queueType: 'RANKED_SOLO_5x5',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        },\n                    ];\n                }\n                console.debug(\"setting profile\");\n                let profile: LeagueOfLegendsProfileData = {\n                    summonerName,\n                    summonerLevel,\n                    profileIconURL,\n                    gameData,\n                };\n                console.debug(\"profile: \", profile);\n                return res.status(200).json(profile);\n            }\n            else {\n                return res.status(response2.status).json({\n                    error: 'Error getting user profile',\n                });\n            }\n        } catch (error) {\n            console.log(error);\n            res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new LeagueOfLegends();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LeagueOfLegendsGameData.html":{"url":"interfaces/LeagueOfLegendsGameData.html","title":"interface - LeagueOfLegendsGameData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LeagueOfLegendsGameData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            leaguePoints\n                                        \n                                \n                                \n                                        \n                                            losses\n                                        \n                                \n                                \n                                        \n                                            queueType\n                                        \n                                \n                                \n                                        \n                                            rank\n                                        \n                                \n                                \n                                        \n                                            tier\n                                        \n                                \n                                \n                                        \n                                            winRate\n                                        \n                                \n                                \n                                        \n                                            wins\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        leaguePoints\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leaguePoints:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        losses\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        losses:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queueType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queueType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rank\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rank:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tier\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tier:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        winRate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        winRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wins\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        wins:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LeagueOfLegendsProfileData.html":{"url":"interfaces/LeagueOfLegendsProfileData.html","title":"interface - LeagueOfLegendsProfileData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LeagueOfLegendsProfileData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            gameData\n                                        \n                                \n                                \n                                        \n                                            profileIconURL\n                                        \n                                \n                                \n                                        \n                                            summonerLevel\n                                        \n                                \n                                \n                                        \n                                            summonerName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        gameData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gameData:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileIconURL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profileIconURL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        summonerLevel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        summonerLevel:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        summonerName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        summonerName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Login.html":{"url":"classes/Login.html","title":"class - Login","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Login\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/login.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/login.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport { getUsers, updateInfos } from \"../../database/databaseActions\";\nimport { UserInformations } from \"../../database/interfaces\";\nimport jwt from 'jsonwebtoken';\nimport moment from \"moment\";\n\nclass Login {\n    async post(req: express.Request, res: express.Response) {\n        const { mail, password } = req.body;\n\n        if (!mail || !password) {\n            return res.status(400).json({\n                valid: false,\n                message: \"mail and password are required\"\n            });\n        }\n\n        const user: UserInformations = {\n            mail: mail,\n            google_mail: undefined,\n            google_token: undefined,\n            facebook_mail: undefined,\n            facebook_token: undefined,\n            apple_mail: undefined,\n            apple_token: undefined,\n            office_mail: undefined,\n            office_token: undefined,\n            username: undefined,\n            password: password\n        };\n\n        const expiresIn: number = Number(process.env.EXPIRE_TIME) || 60 * 60;\n        const payload = {\n            mail: mail\n        };\n        const newToken: string = jwt.sign(\n            payload,\n            process.env.JWT_SECRET,\n            { expiresIn: expiresIn }\n        );\n\n        await getUsers(user, async (err: any, result: any) => {\n            if (err) {\n                return res.status(500).json({\n                    valid: false,\n                    message: err\n                });\n            } else {\n                let _result = result;\n                if (result.length === 0) {\n                    return res.status(400).json({\n                        valid: false,\n                        message: \"mail or password is incorrect\"\n                    });\n                } else {\n                    _result['token'] = newToken;\n                    _result['token_created_at'] = moment().format('YYYY-MM-DD HH:mm:ss');\n                    await updateInfos(['token', 'token_created_at'], [newToken, moment().format('YYYY-MM-DD HH:mm:ss')], 'mail', mail, (err: any, result: any) => {\n                        if (err) {\n                            return res.status(500).json({\n                                valid: false,\n                                message: err\n                            });\n                        } else {\n                            return res.status(200).json({ error: false, message: \"user logged in\", token: newToken, expiresIn: expiresIn, result: _result });\n                        }\n                    });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Login();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Nasa.html":{"url":"classes/Nasa.html","title":"class - Nasa","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Nasa\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/nasa.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getNasaDayImage\n                            \n                            \n                                    Async\n                                getNasaRoverImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNasaDayImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNasaDayImage(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/nasa.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNasaRoverImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNasaRoverImage(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/nasa.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport axios, { AxiosResponse } from \"axios\";\n\nclass Nasa {\n    async getNasaDayImage(req: express.Request, res: express.Response) {\n        try {\n            const { date, api_key } = req.body;\n            // const apiKey: string = process.env.NASA_API_KEY;\n            const url = `https://api.nasa.gov/planetary/apod?api_key=${api_key}&date=${date}`;\n\n            let response: AxiosResponse = await axios({\n                method: \"get\",\n                url: url\n            });\n            return res.status(200).json(response.data);\n        } catch (error) {\n            // console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getNasaRoverImage(req: express.Request, res: express.Response) {\n        try {\n            const { date, camera, api_key } = req.body;\n            // const apiKey: string = process.env.NASA_API_KEY;\n            const url = `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=${date}&camera=${camera}&api_key=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: \"get\",\n                url: url\n            });\n            let data = response.data.photos;\n            let photo: any = data[0] ? data[0] : {};\n\n            return res.status(200).json(photo);\n        } catch (error) {\n            // console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Nasa();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Office.html":{"url":"classes/Office.html","title":"class - Office","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Office\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/office.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCalendarEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCalendarEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCalendarEvents(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/office.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Office {\n    async getCalendarEvents(req: express.Request, res: express.Response) {\n        try {\n            const { start_date, office_token, end_date } = req.body;\n            \n            const url = `https://graph.microsoft.com/v1.0/me/calendarview?startdatetime=${start_date}&enddatetime=${end_date}`;\n    \n            let response: AxiosResponse = await axios({\n                method: 'GET',\n                url,\n                headers: {\n                    'Authorization': `Bearer ${office_token}`\n                }\n            });\n            return res.status(200).json(response.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Office();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/profile/profile.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/profile/profile.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport { getRow, getUsers } from '../../database/databaseActions';\n\nclass Profile {\n    async get(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                console.log(\"heeeeeeeeeeeeeeeeeeeeere\");\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            console.log(\"heeeeeeeeeeeeeeeeeeeeere2\");\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n        await getRow('token', token, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                return res.status(500).json({ error: false, message: \"internal server error\" });\n            } else {\n                if (result.length === 0) {\n                    return res.status(404).json({ error: false, message: \"user not found\" });\n                } else {\n                    console.log(\"result == \", result);\n                    console.log(\"result[0] == \", result[0]);\n                    let rslt = result[0];\n                    let user = {\n                        mail: rslt['mail'],\n                        google_mail: rslt['google_mail'],\n                        facebook_mail: rslt['facebook_mail'],\n                        outlook_mail: rslt['outlook_mail'],\n                        apple_mail: rslt['apple_mail'],\n                        office_mail: rslt['office_mail'],\n                    };\n\n                    return res.status(200).json({ error: true, message: \"user found\", result: user });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Profile();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileUpdate.html":{"url":"classes/ProfileUpdate.html","title":"class - ProfileUpdate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileUpdate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/profile/profileUpdate.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/profile/profileUpdate.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { updateUserInformations } from \"./profileActions\";\n\nclass ProfileUpdate {\n    async patch(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                console.log(\"heeeeeeeeeeeeeeeeeeeeere\");\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            console.log(\"heeeeeeeeeeeeeeeeeeeeere2\");\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n        await updateUserInformations(req, res);\n    }\n}\n\nmodule.exports = new ProfileUpdate();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Register.html":{"url":"classes/Register.html","title":"class - Register","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Register\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/register.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/register.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\"\nimport { UserInformations } from \"../../database/interfaces\";\nimport { registerBasicUser } from \"./registerActions\";\n\nclass Register {\n    async post(req: express.Request, res: express.Response) {\n        const { mail, password } = req.body;\n\n        const infos: UserInformations = {\n            mail: mail,\n            google_mail: undefined,\n            google_token: undefined,\n            facebook_mail: undefined,\n            facebook_token: undefined,\n            apple_mail: undefined,\n            apple_token: undefined,\n            office_mail: undefined,\n            office_token: undefined,\n            username: undefined,\n            password: password,\n        };\n        let result = await registerBasicUser(infos);\n\n        if (result.error === true) {\n            return res.status(500).json({\n                error: true,\n                message: result.message,\n            });\n        }\n        if (result.error === false && result.message === \"user already exists\") {\n            return res.status(403).json({ error: true, message: result.message });\n        }\n        return res.status(200).json({ error: false, message: result.message, result: result.result });\n    }\n}\n\nmodule.exports = new Register();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Temperature.html":{"url":"classes/Temperature.html","title":"class - Temperature","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Temperature\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/temperature.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTemperature\n                            \n                            \n                                    Async\n                                getWeather\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTemperature\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTemperature(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/temperature.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getWeather\n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeather(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/temperature.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Temperature {\n    async getTemperature(req: express.Request, res: express.Response) {\n        try {\n            const { city, api_key } = req.body;\n            // const apikey: string = process.env.WEATHER_API_KEY;\n            const url: string = `http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response.data['main']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getWeather(req: express.Request, res: express.Response) {\n        try {\n            const { city, api_key } = req.body;\n            // const apikey: string = process.env.WEATHER_API_KEY;\n            const url: string = `http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response.data['weather']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n};\n\nexport default new Temperature();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Token.html":{"url":"classes/Token.html","title":"class - Token","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Token\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/token.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/token.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/token.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport moment from 'moment';\nimport { updateInfos } from '../../database/databaseActions';\nimport Utils from '../../utils/utils';\nimport { checkToken } from './tokenAction';\n\nclass Token {\n    async get(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                console.log(\"heeeeeeeeeeeeeeeeeeeeere\");\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            console.log(\"heeeeeeeeeeeeeeeeeeeeere2\");\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n        checkToken(token, (err: any, result: any) => {\n            if (err || result === [] || result === null || result === undefined || result.length === 0) {\n                console.debug(result);\n                return res.status(401).json({ valid: false, message: \"token invalid or not found\" });\n            } else {\n                let createdAt: moment.Moment = moment(result[0].token_created_at);\n                let now: moment.Moment = moment();\n                let diff: number = now.diff(createdAt, 'seconds');\n                if (diff  {\n            if (err) {\n                console.debug(err);\n                return res.status(500).json({ valid: false, message: \"internal server error\" });\n            } else {\n                if (result.affectedRows === 0) {\n                    return res.status(401).json({ valid: false, message: \"token invalid or not found\" });\n                } else {\n                    return res.status(200).json({ valid: true, message: \"token valid\", expiresIn: expiresIn, token: newToken, result: result.result });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Token();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserInformations.html":{"url":"interfaces/UserInformations.html","title":"interface - UserInformations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserInformations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apple_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            apple_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            facebook_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            facebook_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            google_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            google_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            office_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            office_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apple_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apple_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        apple_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apple_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        facebook_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        facebook_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        google_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        google_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        office_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        office_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        office_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        office_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Utils.html":{"url":"classes/Utils.html","title":"class - Utils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Utils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/utils.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRandomString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRandomString\n                        \n                    \n                \n            \n            \n                \ngetRandomString(length: number)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/utils.ts:2\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        class Utils {\n    getRandomString(length: number): string {\n        let text: string = \"\";\n        let possible: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!$&#@.\";\n        for (let i: number = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Widget.html":{"url":"classes/Widget.html","title":"class - Widget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Widget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/widget.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widget.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport Currency from './currency';\nimport Nasa from './nasa';\nimport Temperature from './temperature';\nimport IntraEpitech from './intraEpitech';\nimport Office from './office';\nimport leagueoflegends from './leagueoflegends';\nimport EpitechDoors from './epitechDoors';\nimport Gmail from './gmail';\n\nclass Widget {\n    async post(req: express.Request, res: express.Response) {\n        let valid: boolean = true;\n        const type: string = req.params.type;\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n\n        switch (type) {\n            case 'currency_converter':\n                return await Currency.getExchangeRate(req, res);\n            case 'city_temperature':\n                return await Temperature.getTemperature(req, res);\n            case 'city_weather':\n                return await Temperature.getWeather(req, res);\n            case 'apod':\n                return await Nasa.getNasaDayImage(req, res);\n            case 'curiosity_image':\n                return await Nasa.getNasaRoverImage(req, res);\n            case 'intra_epitech_profile':\n                return await IntraEpitech.getProfile(req, res);\n            case 'intra_epitech_partners':\n                return await IntraEpitech.getPartners(req, res);\n            case 'intra_epitech_notifications':\n                return await IntraEpitech.getNotifications(req, res);\n            case 'epitech_doors_open_door':\n                return await EpitechDoors.openDoor(req, res);\n            case 'intra_epitech_grades':\n                return await IntraEpitech.getGrades(req, res);\n            case 'office_calendar_events':\n                return await Office.getCalendarEvents(req, res);\n            case 'league_of_legends_summoner_profile':\n                return await leagueoflegends.getUserProfile(req, res);\n            case 'gmail_inbox':\n                return await Gmail.getLastFiveMail(req, res);\n            default:\n                return res.status(404).json({ error: true, message: \"widget not found\" });\n        }\n    }\n}\n\nmodule.exports = new Widget();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WidgetsDB.html":{"url":"classes/WidgetsDB.html","title":"class - WidgetsDB","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WidgetsDB\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/widgetsdb.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widgetsdb.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widgetsdb.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport { getWidgetsByUserId, getUserByToken, addWidget, updateWidget } from '../../database/databaseActions';\nimport jwt from 'jsonwebtoken';\n\nclass WidgetsDB {\n    async get(req: express.Request, res: express.Response) {\n        try {\n            let token: string = req.headers.authorization;\n\n            if (!token) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token not found\"\n                });\n            }\n            token = token.split(\" \")[1];\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n\n            if (!decoded) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token invalid\"\n                });\n            }\n            await getUserByToken(token, async(err: any, user: any) => {\n                if (err) {\n                    console.debug(err);\n                    return res.status(500).json({\n                        valid: false,\n                        message: \"error\"\n                    });\n                } else {\n                    if (user.length === 0) {\n                        return res.status(404).json({\n                            valid: false,\n                            message: \"user not found\"\n                        });\n                    } else {\n                        let userId = user[0]['id'];\n                        await getWidgetsByUserId(userId, (err: any, result: any) => {\n                            if (err) {\n                                console.debug(err);\n                                return res.status(500).json({\n                                    valid: false,\n                                    message: \"error\"\n                                });\n                            }\n                            return res.status(200).json({\n                                valid: true,\n                                message: \"success\",\n                                data: result\n                            });\n                        });\n                    }\n                }\n            });\n        } catch (error) {\n            console.log(error);\n            return res.status(401).json({\n                valid: false,\n                message: \"token invalid\"\n            });\n        }\n    }\n\n    async patch(req: express.Request, res: express.Response) {\n        try {\n            let token: string = req.headers.authorization;\n            const { widgets } = req.body;            \n\n            if (!token) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token not found\"\n                });\n            }\n            token = token.split(\" \")[1];\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n\n            if (!decoded) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token invalid\"\n                });\n            }\n            await getUserByToken(token, async(err: any, user: any) => {\n                if (err) {\n                    console.debug(err);\n                    return res.status(500).json({\n                        valid: false,\n                        message: \"error\"\n                    });\n                } else {\n                    if (user.length === 0) {\n                        return res.status(404).json({\n                            valid: false,\n                            message: \"user not found\"\n                        });\n                    } else {\n                        let userId = user[0]['id'];\n                        await getWidgetsByUserId(userId, async(err: any, result: any) => {\n                            if (err) {\n                                console.debug(err);\n                                return res.status(500).json({\n                                    valid: false,\n                                    message: \"error\"\n                                });\n                            }\n                            if (result.length === 0) {\n                                await addWidget(userId, widgets, (err: any, result: any) => {\n                                    if (err) {\n                                        console.debug(err);\n                                        return res.status(500).json({\n                                            valid: false,\n                                            message: \"error\"\n                                        });\n                                    }\n                                    return res.status(200).json({\n                                        valid: true,\n                                        message: \"success\",\n                                        data: result\n                                    });\n                                });\n                            }\n                            else {\n                                await updateWidget(userId, widgets, (err: any, result: any) => {\n                                    if (err) {\n                                        console.debug(err);\n                                        return res.status(500).json({\n                                            valid: false,\n                                            message: \"error\"\n                                        });\n                                    }\n                                    return res.status(200).json({\n                                        valid: true,\n                                        message: \"success\",\n                                        data: result\n                                    });\n                                });\n                            }\n                        });\n                    }\n                }\n            }\n        )}\n        catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                valid: false,\n                message: \"error\"\n            });\n        }\n    }\n};\n\nmodule.exports = new WidgetsDB();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/database/database.ts\n            \n            variable\n            db\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            addUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            addWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            deleteWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getRow\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getUserByToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getWidgetsByUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateInfos\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateUserAuthToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            IntraEpitechUser\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            LeagueOfLegendsGameData\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            LeagueOfLegendsProfileData\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            UserInformations\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            app\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            server\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/request_handler.ts\n            \n            function\n            requestHandler\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/request_handler.ts\n            \n            variable\n            TOKEN_WL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes.ts\n            \n            function\n            addRoute\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/about/about.ts\n            \n            class\n            About\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/OAuth.ts\n            \n            class\n            Authentication\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/authActions.ts\n            \n            variable\n            handleOAuthUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/authActions.ts\n            \n            variable\n            handleOAuthUsersAction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/login.ts\n            \n            class\n            Login\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/register.ts\n            \n            class\n            Register\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/registerActions.ts\n            \n            variable\n            registerBasicUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/token.ts\n            \n            class\n            Token\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/auth/tokenAction.ts\n            \n            variable\n            checkToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/profile/profile.ts\n            \n            class\n            Profile\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/profile/profileActions.ts\n            \n            variable\n            updateUserInformations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/profile/profileUpdate.ts\n            \n            class\n            ProfileUpdate\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/currency.ts\n            \n            class\n            Currency\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/epitechDoors.ts\n            \n            class\n            EpitechDoors\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/gmail.ts\n            \n            class\n            Gmail\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/intraEpitech.ts\n            \n            class\n            IntraEpitech\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/routes/widgets/leagueoflegends.ts\n            \n            class\n            LeagueOfLegends\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/nasa.ts\n            \n            class\n            Nasa\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/widgets/office.ts\n            \n            class\n            Office\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/temperature.ts\n            \n            class\n            Temperature\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/widgets/widget.ts\n            \n            class\n            Widget\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/widgetsdb.ts\n            \n            class\n            WidgetsDB\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/utils.ts\n            \n            class\n            Utils\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            cors : ^2.8.5\n        \n            dotenv : ^10.0.0\n        \n            express : ^4.17.1\n        \n            jsonwebtoken : ^8.5.1\n        \n            moment : ^2.29.1\n        \n            mysql2 : ^2.3.3-rc.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addRoute   (src/.../routes.ts)\n                        \n                        \n                            requestHandler   (src/.../request_handler.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addRoute\n                        \n                    \n                \n            \n            \n                \naddRoute(endpoint: string, service: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    service\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/request_handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        requestHandler\n                        \n                    \n                \n            \n            \n                \nrequestHandler(req, res, next)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    18 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addUsers   (src/.../databaseActions.ts)\n                        \n                        \n                            addWidget   (src/.../databaseActions.ts)\n                        \n                        \n                            app   (src/.../index.ts)\n                        \n                        \n                            checkToken   (src/.../tokenAction.ts)\n                        \n                        \n                            db   (src/.../database.ts)\n                        \n                        \n                            deleteWidget   (src/.../databaseActions.ts)\n                        \n                        \n                            getRow   (src/.../databaseActions.ts)\n                        \n                        \n                            getUserByToken   (src/.../databaseActions.ts)\n                        \n                        \n                            getUsers   (src/.../databaseActions.ts)\n                        \n                        \n                            getWidgetsByUserId   (src/.../databaseActions.ts)\n                        \n                        \n                            handleOAuthUsers   (src/.../authActions.ts)\n                        \n                        \n                            handleOAuthUsersAction   (src/.../authActions.ts)\n                        \n                        \n                            registerBasicUser   (src/.../registerActions.ts)\n                        \n                        \n                            routes   (src/.../routes.ts)\n                        \n                        \n                            server   (src/.../index.ts)\n                        \n                        \n                            TOKEN_WL   (src/.../request_handler.ts)\n                        \n                        \n                            updateInfos   (src/.../databaseActions.ts)\n                        \n                        \n                            updateUserAuthToken   (src/.../databaseActions.ts)\n                        \n                        \n                            updateUserInformations   (src/.../profileActions.ts)\n                        \n                        \n                            updateWidget   (src/.../databaseActions.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/databaseActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, callback: Function) => {\n    let query: string = \"INSERT into users (\";\n    let wasFound: boolean = false;\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"mail, password) VALUES ('\"\n                + infos.mail + \"', '\" + infos.password + \"');\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"google_mail, google_token) VALUES ('\"\n                + infos.google_mail + \"', '\" + infos.google_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"facebook_mail, facebook_token) VALUES ('\"\n                + infos.facebook_mail + \"', '\" + infos.facebook_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"apple_mail, apple_token) VALUES ('\"\n                + infos.apple_mail + \"', '\" + infos.apple_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"office_mail, office_token) VALUES ('\"\n                + infos.office_mail + \"', '\" + infos.office_token + \"');\";\n            wasFound = true;\n        }\n\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widget: string, callback: Function) => {\n    let query: string = \"INSERT INTO widgets (user_id, data) VALUES ('\" + userId + \"', '\" + JSON.stringify(widget) + \"');\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widgetId: string, callback: Function) => {\n    let query: string = \"DELETE FROM widgets WHERE user_id = '\" + userId + \"' AND id = '\" + widgetId + \"';\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRow\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (row: string, value: string, callback: Function) => {\n    let query: string = \"SELECT * FROM users WHERE \" + row + \" = '\" + value + \"' LIMIT 1;\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserByToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (token: string, callback: Function) => {\n    let query: string = \"SELECT * FROM users WHERE token = '\" + token + \"';\";\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(\"[getUserByToken] err \", err);\n                callback(err);\n            } else {\n                console.debug(\"[getUserByToken] success \", result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, callback: Function) => {\n    let wasFound: boolean = false;\n    let query: string = \"SELECT * FROM users WHERE \";\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"mail = '\" + infos.mail + \"' AND password = '\" + infos.password + \"';\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"google_mail = '\" + infos.google_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"facebook_mail = '\" + infos.facebook_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"apple_mail = '\" + infos.apple_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"office_mail = '\" + infos.office_mail + \"';\";\n            wasFound = true;\n        }\n\n        console.debug(\"query == \", query);\n\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(\"[getUser] err \", err);\n                callback(err);\n            } else {\n                console.debug(\"[getUser] success \", result);\n                callback(null, result);\n            }\n        });\n\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getWidgetsByUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, callback: Function) => {\n    let query: string = \"SELECT * FROM widgets WHERE user_id = '\" + userId + \"';\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateInfos\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n    rows: Array, newValues: Array,\n    whereRow: string, whereValue: string, callback: Function) => {\n    let query: string = 'UPDATE users SET ';\n\n    for (let i = 0; i  {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n            \n                \n                    updates a row in the users table\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserAuthToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, jwtToken: string, callback: Function) => {\n    let query: string = \"UPDATE users SET \";\n    let wasFound: boolean = false;\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE mail = '\" + infos.mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE google_mail = '\" + infos.google_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE facebook_mail = '\" + infos.facebook_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE apple_mail = '\" + infos.apple_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE office_mail = '\" + infos.office_mail + \"';\";\n            wasFound = true;\n        }\n\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err || result.affectedRows === 0) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widget: string, callback: Function) => {\n    let query: string = \"UPDATE widgets SET data = '\" + widget + \"' WHERE user_id = '\" + userId + \"';\";\n\n    try {\n        // console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n\n    src/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        app\n                        \n                    \n                \n            \n                \n                    \n                        Default value : express()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"http\").Server(app)\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/tokenAction.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        checkToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (token: string, callback: Function) => {\n    const queryString: string = \"SELECT * FROM users WHERE token = '\" + token + \"' LIMIT 1;\";\n    db.query(queryString, (err: any, result: any) => {\n        if (err) {\n            callback(err);\n        } else {\n            console.log(\"res == \", result);\n            callback(null, result);\n        }\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/database/database.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mysql.createConnection({\n    host: process.env.MY_SQL_HOST,\n    user: process.env.MY_SQL_USER,\n    password: process.env.MY_SQL_PASSWORD,\n    database: process.env.MY_SQL_DATABASE,\n})\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/authActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleOAuthUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (req: express.Request, res: express.Response) => {\n    try {\n        const type: string = req.params.type;\n        const { access_token } = req.body;\n        let user: { type: string, userJson: any } = { type: '', userJson: {} };\n        let response: AxiosResponse;\n\n        switch (type) {\n            case 'google_user':\n                console.log('bearer token == ', access_token);\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.debug(\"response == \", response.data);\n                let googleUser = response.data;\n                user = { type: 'google_user', userJson: googleUser };\n                break;\n            case 'facebook_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.facebook.com/me/?fields=id,name,email',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let facebookUser = response.data;\n                user = { type: 'facebook_user', userJson: facebookUser };\n                break;\n            case 'office_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.microsoft.com/v1.0/me',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.log(\"response == \", response.data);\n                let officeUser = response.data;\n                user = { type: 'office_user', userJson: officeUser };\n                break;\n            default:\n                return res.status(400).json({ message: 'Bad request' });\n        }\n\n        const infos: UserInformations = {\n            mail: undefined,\n            google_mail: (user.type === 'google_user') ? user.userJson.email : undefined,\n            google_token: (user.type === 'google_user') ? access_token : undefined,\n            facebook_mail: (user.type === 'facebook_user') ? user.userJson.email : undefined,\n            facebook_token: (user.type === 'facebook_user') ? access_token : undefined,\n            apple_mail: (user.type === 'apple_user') ? user.userJson.email : undefined,\n            apple_token: (user.type === 'apple_user') ? access_token : undefined,\n            office_mail: (user.type === 'office_user') ? user.userJson.mail : undefined,\n            office_token: (user.type === 'office_user') ? access_token : undefined,\n            username: undefined,\n            password: undefined,\n        };\n\n        const result = await handleOAuthUsersAction(infos);\n        if (result.error === true) {\n            return res.status(500).json({\n                error: result.error,\n                message: result.message,\n            });\n        }\n        if (result.message === \"user created\") {\n            return res.status(200).json({ error: false, message: \"user created\", result: result.result });\n        }\n        if (result.message === \"user already exists\") {\n            const expiresIn: number = Number(process.env.EXPIRE_TIME) || 60 * 60;\n            const payload = {\n                mail: (user.type === 'google_user') ? user.userJson.email : (user.type === 'facebook_user') ? user.userJson.email : (user.type === 'apple_user') ? user.userJson.email : (user.type === 'office_user') ? user.userJson.email : \"none\",\n            };\n            const token: string = jwt.sign(\n                payload,\n                process.env.JWT_SECRET,\n                { expiresIn: expiresIn }\n            );\n            await updateUserAuthToken(infos, token, (err: any, result: any) => {\n                if (err) {\n                    console.debug('[handleOAuthUsersAction] | error[updateUserAuthToken] = ', err);\n                } else {\n                    console.debug('[handleOAuthUsersAction] | result[updateUserAuthToken] = ', result);\n                }\n            });\n            return res.status(200).json({ error: false, message: \"user logged in\", expiresIn: expiresIn, token: token, result: result.result });\n        }\n    } catch (err) {\n        console.debug('[handleOAuthUsersAction] | error = ', err);\n        return res.status(500).json({ error: true, message: \"server error\" });\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleOAuthUsersAction\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations): Promise => {\n    return new Promise(async (resolve, reject) => {\n        await getUsers(infos, async (err: any, result: any) => {\n            if (err) {\n                console.debug('[handleOAuthUsersAction] | error[getUsers] = ', err);\n                await addUsers(infos, (err: any, result: any) => {\n                    if (err) {\n                        console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                        return resolve({ error: true, message: \"internal error\" });\n                    } else {\n                        console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                        return resolve({ error: false, message: \"user created\", result: result });\n                    }\n                });\n            } else {\n                console.debug('[handleOAuthUsersAction] | result[getUsers] = ', result);\n                if (result.length === 0) {\n                    await addUsers(infos, (err: any, result: any) => {\n                        if (err) {\n                            console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                            return resolve({ error: true, message: \"internal error\" });\n                        } else {\n                            console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                            return resolve({ error: false, message: \"user created\", result: result });\n                        }\n                    });\n                } else {\n                    return resolve({ error: false, message: \"user already exists\", result: result });\n                }\n            }\n        });\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/registerActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        registerBasicUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations): Promise => {\n    return new Promise(async (resolve, reject) => {\n        await getUsers(infos, async (err: any, result: any) => {\n            if (err) {\n                console.debug('[handleOAuthUsersAction] | error[getUsers] = ', err);\n                await addUsers(infos, (err: any, result: any) => {\n                    if (err) {\n                        console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                        return resolve({ error: true, message: \"internal error\" });\n                    } else {\n                        console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                        return resolve({ error: false, message: \"user created\", result: result });\n                    }\n                });\n            } else {\n                console.debug('[handleOAuthUsersAction] | result[getUsers] = ', result);\n                if (result.length === 0) {\n                    await addUsers(infos, (err: any, result: any) => {\n                        if (err) {\n                            console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                            return resolve({ error: true, message: \"internal error\" });\n                        } else {\n                            console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                            return resolve({ error: false, message: \"user created\", result: result });\n                        }\n                    });\n                } else {\n                    return resolve({ error: false, message: \"user already exists\", result: result });\n                }\n            }\n        });\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        routes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n\n\n        \n    \n\n    src/request_handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TOKEN_WL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(register|login)/\n                    \n                \n\n\n        \n    \n\n    src/routes/profile/profileActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        updateUserInformations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (req: express.Request, res: express.Response) => {\n    try {\n        const type: string = req.params.type;\n        const { access_token, existingInformation, existingInformationType } = req.body;\n        let response: AxiosResponse;\n        let user: { type: string, userJson: any } = { type: '', userJson: {} };\n\n        switch (type) {\n            case 'google_user':\n                console.log('bearer token == ', access_token);\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.debug(\"response == \", response.data);\n                let googleUser = response.data;\n                user = { type: 'google_user', userJson: googleUser };\n                break;\n            case 'facebook_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.facebook.com/me/?fields=id,name,email',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let facebookUser = response.data;\n                user = { type: 'facebook_user', userJson: facebookUser };\n                break;\n            case 'office_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.microsoft.com/v1.0/me',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.log(\"response == \", response.data);\n                let officeUser = response.data;\n                user = { type: 'office_user', userJson: officeUser };\n                break;\n            case 'plain_user':\n                let plainUser = {\n                    mail: req.body.mail,\n                    password: req.body.password,\n                };\n                user = { type: 'plain_user', userJson: plainUser };\n                break;\n            default:\n                return res.status(400).json({ message: 'Bad request' });\n        };\n\n        if (user.type === 'google_user') {\n            await updateInfos(['google_mail', 'google_token'], [user.userJson.email, access_token], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n        if (user.type === 'office_user') {\n            await updateInfos(['office_mail', 'office_token'], [user.userJson.email, access_token], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n        if (user.type === 'facebook_user') {\n            await updateInfos(['facebook_mail', 'facebook_token'], [user.userJson.email, access_token], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n        if (user.type === 'plain_user') {\n            await updateInfos(['mail', 'password'], [user.userJson.mail, user.userJson.password], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n    } catch (error) {\n        console.error(error);\n        return res.status(500).json({ message: 'server error' });\n    }\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
