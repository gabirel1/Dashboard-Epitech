var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/About.html",[0,0.259]],["body/classes/About.html",[0,0.136,1,0.264,2,0.169,3,0.169,4,0.14,5,1.632,6,0.086,7,0.459,8,0.559,9,1.904,10,0.627,11,0.554,12,0.627,13,0.299,14,1.972,15,2.505,16,3.027,17,1.529,18,3.027,19,3.685,20,3.389,21,3.027,22,3.027,23,0.264,24,0.038,25,0.835,26,0.261,27,0.231,28,0.406,29,0.459,30,0.336,31,0.516,32,0.406,33,1.904,34,0.459,35,3.685,36,0.701,37,1.972,38,1.972,39,0.299,40,0.743,41,1.972,42,1.632,43,0.509,44,1.972,45,1.972,46,3.421,47,5.923,48,5.188,49,1.972,50,5.923,51,2.321,52,1.632,53,3.896,54,1.699,55,3.994,56,5.535,57,1.632,58,2.321,59,3.027,60,1.972,61,1.632,62,1.632,63,1.632,64,1.699,65,1.972,66,1.632,67,3.027,68,2.505,69,2.505,70,1.904,71,1.632,72,2.505,73,1.632,74,2.505,75,1.632,76,1.972,77,4.46,78,4.057,79,3.027,80,1.632,81,2.087,82,1.681,83,2.951,84,1.632,85,2.505,86,1.632,87,2.505,88,1.632,89,2.505,90,1.972,91,1.972,92,2.505,93,1.632,94,3.027,95,2.505,96,1.972,97,1.632,98,2.068,99,1.972,100,0.743,101,1.632,102,1.632,103,2.505,104,2.505,105,1.632,106,1.632,107,1.972,108,3.027,109,3.027,110,1.632,111,2.505,112,1.632,113,1.632,114,2.068,115,1.632,116,1.972,117,1.632,118,2.505,119,1.632,120,0.616,121,3.685,122,1.972,123,1.972,124,3.027,125,1.972,126,1.972,127,0.743,128,0.264,129,0.018,130,0.018]],["title/classes/Authentication.html",[0,0.207,131,2.145]],["body/classes/Authentication.html",[0,0.283,1,0.55,2,0.352,3,0.352,4,0.291,6,0.178,7,0.764,8,0.827,10,0.862,11,0.781,12,0.862,13,0.623,23,0.55,24,0.037,25,0.55,26,0.178,27,0.48,28,0.675,29,0.764,30,0.7,31,0.859,32,0.675,34,0.764,39,0.623,82,1.727,127,1.546,128,0.55,129,0.03,130,0.03,131,3.889,132,3.395,133,2.826,134,2.826,135,4.103,136,1.727,137,3.167,138,5.035,139,2.929,140,4.103,141,4.103]],["title/classes/Currency.html",[0,0.207,58,1.686]],["body/classes/Currency.html",[0,0.255,1,0.496,2,0.317,3,0.317,4,0.263,6,0.161,7,0.717,8,0.789,10,0.831,11,0.734,12,0.831,13,0.562,15,3.908,23,0.496,24,0.037,25,0.496,26,0.161,27,0.434,28,0.633,29,0.717,30,0.632,31,0.805,32,0.633,34,0.717,36,0.434,39,0.717,40,1.396,43,0.956,51,2.079,58,3.341,62,3.908,63,4.303,120,1.157,128,0.496,129,0.028,130,0.028,142,3.065,143,4.723,144,4.723,145,3.704,146,4.723,147,2.385,148,1.959,149,1.78,150,0.867,151,0.899,152,1.052,153,3.704,154,1.959,155,3.704,156,1.396,157,0.783,158,1.396,159,3.704,160,3.704,161,3.704,162,3.704,163,0.867,164,0.99,165,1.535,166,0.867,167,1.157,168,1.052,169,1.27]],["title/classes/EpitechDoors.html",[0,0.207,170,1.89]],["body/classes/EpitechDoors.html",[0,0.254,1,0.493,2,0.315,3,0.315,4,0.261,6,0.16,7,0.713,8,0.786,10,0.829,11,0.732,12,0.829,13,0.558,23,0.493,24,0.037,25,0.493,26,0.16,27,0.43,28,0.63,29,0.713,30,0.627,31,0.802,32,0.63,34,0.713,36,0.55,39,0.713,43,0.949,78,3.89,83,3.699,92,3.89,95,3.89,97,3.042,128,0.493,129,0.028,130,0.028,147,2.373,148,1.952,149,1.771,150,0.86,151,0.7,152,1.044,154,2.058,156,1.385,157,0.777,158,1.385,163,0.86,164,0.987,165,1.523,166,0.86,167,1.148,168,1.044,169,1.261,170,3.26,171,3.042,172,4.7,173,4.7,174,3.676,175,4.7,176,4.7,177,3.042,178,1.385,179,3.676,180,3.676,181,3.676,182,3.676,183,3.676]],["title/classes/Gmail.html",[0,0.207,114,1.686]],["body/classes/Gmail.html",[0,0.226,1,0.439,2,0.281,3,0.281,4,0.233,6,0.142,7,0.662,8,0.744,10,0.793,11,0.7,12,0.793,13,0.498,23,0.439,24,0.038,25,0.439,26,0.142,27,0.384,28,0.585,29,0.662,30,0.559,31,0.744,32,0.585,34,0.662,36,0.384,39,0.662,40,1.235,43,0.846,70,2.744,114,2.752,115,4.057,118,3.61,119,4.057,128,0.439,129,0.026,130,0.026,148,1.969,149,1.847,150,0.767,151,0.831,152,0.932,154,1.969,156,1.235,157,0.923,158,1.644,163,1.021,164,0.933,165,1.359,166,0.767,167,1.024,168,0.932,169,1.125,184,2.713,185,4.363,186,4.363,187,3.279,188,1.808,189,4.363,190,4.363,191,2.449,192,1.644,193,2.713,194,3.115,195,3.115,196,3.115,197,3.279,198,3.279,199,2.341,200,3.279,201,1.992,202,3.279,203,3.279,204,4.903,205,1.235,206,5.226,207,3.279,208,4.325,209,4.903,210,4.903,211,3.279,212,3.279,213,3.279,214,2.713,215,1.497,216,1.235]],["title/classes/IntraEpitech.html",[0,0.207,217,1.89]],["body/classes/IntraEpitech.html",[0,0.148,1,0.287,2,0.183,3,0.183,4,0.152,6,0.093,7,0.489,8,0.845,10,0.877,11,0.774,12,0.877,13,0.654,17,1.626,23,0.578,24,0.038,25,0.578,26,0.187,27,0.505,28,0.695,29,0.787,30,0.735,31,0.661,32,0.432,34,0.787,36,0.643,39,0.787,43,1.113,68,2.665,81,2.176,82,1.329,83,4.2,85,2.665,87,2.665,89,2.665,128,0.287,129,0.019,130,0.019,136,1.479,148,2,149,1.955,150,1.009,151,0.988,152,1.225,154,2.237,156,1.624,157,1.066,158,1.9,163,1.009,164,1.06,165,1.786,166,1.009,167,1.346,168,0.608,169,0.734,177,3.567,188,2.15,191,2.913,199,2.765,217,2.437,218,1.77,219,3.22,220,3.22,221,3.22,222,3.22,223,3.22,224,2.139,225,3.22,226,2.139,227,3.22,228,2.139,229,3.22,230,3.22,231,3.22,232,2.139,233,2.174,234,2.174,235,1.471,236,1.345,237,4.311,238,4.311,239,4.311,240,1.201,241,2.139,242,1.201,243,2.139,244,1.201,245,2.139,246,1.201,247,2.139,248,1.201,249,2.139,250,1.201,251,2.139,252,2.139,253,2.139,254,2.139,255,2.139,256,2.139,257,2.139,258,2.139,259,2.139,260,2.139]],["title/interfaces/IntraEpitechUser.html",[235,1.372,261,1.132]],["body/interfaces/IntraEpitechUser.html",[2,0.304,3,0.304,4,0.252,6,0.154,24,0.037,26,0.259,36,0.746,100,1.337,120,1.891,129,0.027,130,0.027,136,1.849,168,1.531,192,1.337,201,1.62,233,3.025,234,3.025,235,2.098,240,3.025,242,3.025,244,3.025,246,3.025,248,3.025,250,3.025,261,2.031,262,1.992,263,1.992,264,2.89,265,1.337,266,1.47,267,1.62,268,1.47,269,1.62,270,1.47,271,1.62,272,1.47,273,1.62,274,1.62,275,1.62,276,1.992,277,1.992,278,1.992,279,1.992,280,1.992,281,1.992,282,1.992,283,1.62,284,1.992,285,1.992,286,1.992,287,1.992]],["title/classes/LeagueOfLegends.html",[0,0.207,288,1.89]],["body/classes/LeagueOfLegends.html",[0,0.181,1,0.352,2,0.225,3,0.225,4,0.187,6,0.114,7,0.568,8,0.662,10,0.722,11,0.637,12,0.722,13,0.399,17,1.891,23,0.352,24,0.038,25,0.585,26,0.114,27,0.308,28,0.502,29,0.568,30,0.448,31,0.744,32,0.502,34,0.568,36,0.511,39,0.662,43,0.678,51,1.475,81,2.639,82,0.901,111,3.099,112,2.174,113,2.174,120,0.821,128,0.352,129,0.022,130,0.022,148,1.792,149,1.644,150,0.615,151,0.831,152,0.747,154,1.411,156,0.99,157,0.792,158,1.411,163,0.615,164,0.957,165,1.089,166,0.615,167,0.821,168,0.747,169,0.901,188,1.552,191,2.102,199,1.876,201,1.2,205,2.269,236,1.653,275,1.2,276,2.822,277,2.822,278,3.019,279,2.822,280,2.822,281,2.822,282,2.822,283,1.71,284,2.449,285,2.449,286,2.449,287,2.67,288,2.745,289,2.174,290,3.745,291,3.745,292,2.627,293,3.745,294,3.745,295,3.745,296,3.745,297,3.745,298,4.363,299,2.627,300,2.627,301,2.627,302,2.627,303,3.745,304,2.627,305,2.627,306,2.627,307,2.627,308,4.363,309,2.627,310,2.627,311,2.627,312,2.627,313,2.627,314,2.627,315,2.627,316,2.627,317,2.627,318,4.363,319,3.745,320,2.627,321,3.745,322,1.71,323,3.745,324,4.363,325,3.745,326,4.363,327,5.499,328,2.627,329,2.627,330,2.627,331,2.627,332,2.627]],["title/interfaces/LeagueOfLegendsGameData.html",[261,1.132,275,1.372]],["body/interfaces/LeagueOfLegendsGameData.html",[2,0.312,3,0.312,4,0.259,6,0.158,24,0.037,26,0.254,36,0.743,100,1.372,120,1.933,129,0.027,130,0.027,136,1.249,168,1.546,192,1.372,201,1.663,233,2.044,234,2.044,235,1.663,240,2.044,242,2.044,244,2.044,246,2.044,248,2.044,250,2.044,261,2.051,262,2.044,263,2.044,264,2.939,265,1.372,266,1.509,267,1.663,268,1.509,269,1.663,270,1.509,271,1.663,272,1.509,273,1.663,274,1.663,275,2.133,276,3.055,277,3.055,278,3.055,279,3.055,280,3.055,281,3.055,282,3.055,283,1.663,284,2.044,285,2.044,286,2.044,287,2.044]],["title/interfaces/LeagueOfLegendsProfileData.html",[261,1.132,283,1.372]],["body/interfaces/LeagueOfLegendsProfileData.html",[2,0.325,3,0.325,4,0.269,6,0.165,24,0.036,26,0.24,36,0.743,100,1.428,120,1.884,129,0.028,130,0.028,136,1.3,168,1.569,192,1.428,201,2.4,233,2.128,234,2.128,235,1.731,240,2.128,242,2.128,244,2.128,246,2.128,248,2.128,250,2.128,261,2.081,262,2.128,263,2.128,264,3.015,265,1.428,266,1.571,267,1.731,268,1.571,269,1.731,270,1.571,271,1.731,272,1.571,273,1.731,274,1.731,275,1.731,276,2.128,277,2.128,278,2.128,279,2.128,280,2.128,281,2.128,282,2.128,283,2.188,284,3.1,285,3.1,286,3.1,287,3.1]],["title/classes/Login.html",[0,0.207,136,1.03]],["body/classes/Login.html",[0,0.208,1,0.404,2,0.258,3,0.258,4,0.214,6,0.131,7,0.626,8,0.766,10,0.766,11,0.677,12,0.766,13,0.458,23,0.404,24,0.038,25,0.404,26,0.131,27,0.353,28,0.552,29,0.626,30,0.514,31,0.902,32,0.552,33,2.593,34,0.626,36,0.353,39,0.803,40,1.136,82,1.732,100,1.136,120,0.941,127,1.136,128,0.404,129,0.024,130,0.024,133,2.314,134,2.314,136,1.814,151,1.007,152,0.857,157,0.872,164,0.574,166,0.965,178,1.992,192,2.2,205,1.136,216,1.992,236,1.896,265,1.553,266,1.249,267,1.376,268,1.249,269,1.376,270,1.249,271,1.376,272,1.249,273,1.376,274,2.493,333,2.495,334,3.014,335,3.411,336,1.896,337,1.896,338,1.896,339,1.522,340,1.376,341,3.411,342,2.55,343,3.014,344,3.631,345,3.775,346,2.495,347,3.411,348,3.411,349,4.179,350,2.495,351,1.376,352,3.014,353,3.064,354,2.55,355,4.122,356,1.692,357,3.014,358,3.014,359,3.014,360,3.411,361,3.411,362,3.411,363,3.411,364,3.014,365,2.495,366,2.495,367,1.136]],["title/classes/Nasa.html",[0,0.207,64,1.686]],["body/classes/Nasa.html",[0,0.214,1,0.416,2,0.266,3,0.266,4,0.221,6,0.135,7,0.638,8,0.836,10,0.836,11,0.768,12,0.836,13,0.638,23,0.564,24,0.037,25,0.564,26,0.183,27,0.493,28,0.685,29,0.776,30,0.717,31,0.717,32,0.787,34,0.776,39,0.776,43,1.086,51,2.361,55,3.003,64,3.162,69,4.231,70,2.646,72,3.481,73,3.481,74,4.231,75,2.57,128,0.416,129,0.025,130,0.025,148,1.926,149,1.797,150,0.984,151,0.973,152,1.195,154,2.075,156,2.075,157,0.89,158,1.585,163,0.984,164,1.049,166,0.984,167,1.314,168,0.883,169,1.065,188,2.118,368,2.57,369,4.207,370,4.207,371,4.207,372,3.106,373,4.231,374,4.231,375,4.207,376,3.106,377,3.106,378,2.57,379,3.106,380,3.106,381,2.217,382,3.106,383,3.106,384,4.207,385,3.106]],["title/classes/Office.html",[0,0.207,98,1.686]],["body/classes/Office.html",[0,0.256,1,0.498,2,0.319,3,0.319,4,0.264,6,0.161,7,0.719,8,0.791,10,0.832,11,0.735,12,0.832,13,0.564,23,0.498,24,0.037,25,0.498,26,0.161,27,0.435,28,0.634,29,0.719,30,0.634,31,0.807,32,0.634,34,0.719,39,0.719,43,0.96,70,2.978,98,3.303,100,1.784,103,3.918,104,3.918,105,3.077,106,3.077,128,0.498,129,0.028,130,0.028,148,1.963,149,1.784,150,0.87,151,0.901,152,1.056,154,1.784,156,1.401,157,0.786,158,1.401,163,0.87,164,0.992,165,1.541,166,0.87,167,1.161,168,1.056,169,1.275,188,1.962,194,2.654,195,2.654,196,2.654,373,3.918,378,3.077,386,3.077,387,4.734,388,4.734,389,3.718,390,4.734,391,4.734,392,3.718]],["title/classes/Profile.html",[0,0.207,81,1.517]],["body/classes/Profile.html",[0,0.228,1,0.442,2,0.283,3,0.283,4,0.234,6,0.143,7,0.665,8,0.747,9,2.757,10,0.795,11,0.702,12,0.795,13,0.501,17,2.213,23,0.442,24,0.038,25,0.442,26,0.143,27,0.387,28,0.587,29,0.665,30,0.563,31,0.839,32,0.587,34,0.665,36,0.513,39,0.851,40,1.244,43,0.852,81,2.484,82,1.923,127,1.244,128,0.442,129,0.026,130,0.026,150,0.773,151,0.629,157,0.698,163,0.773,164,1.038,166,0.773,167,1.031,178,2.055,188,1.816,192,1.244,205,1.244,215,1.507,216,2.112,266,1.368,268,1.368,270,1.368,272,1.368,322,1.507,336,2.077,338,2.077,339,1.667,340,1.507,342,2.484,351,1.507,353,2.46,354,2.213,356,1.853,367,2.155,393,2.732,394,3.301,395,2.357,396,1.667,397,2.761,398,2.761,399,1.667,400,2.46,401,1.853,402,1.853,403,2.46,404,3.301,405,2.357,406,2.357,407,3.301,408,3.301,409,3.301,410,3.301,411,3.301,412,3.301,413,3.301,414,3.301,415,3.301]],["title/classes/ProfileUpdate.html",[0,0.207,416,2.145]],["body/classes/ProfileUpdate.html",[0,0.252,1,0.49,2,0.313,3,0.313,4,0.26,6,0.159,7,0.711,8,0.784,10,0.827,11,0.755,12,0.827,13,0.555,17,2.365,23,0.49,24,0.037,25,0.49,26,0.159,27,0.428,28,0.628,29,0.711,30,0.623,31,0.881,32,0.628,34,0.711,36,0.548,39,0.784,82,1.606,127,1.377,128,0.49,129,0.027,130,0.027,147,2.365,150,0.855,151,0.696,157,0.773,163,0.855,164,0.696,178,1.947,216,1.947,322,1.669,339,1.846,340,1.669,342,2.845,351,1.669,367,2.236,396,1.846,397,2.901,398,2.052,399,1.846,400,2.629,401,2.052,402,2.052,403,2.629,416,3.689,417,3.025,418,3.875,419,3.875,420,3.655,421,3.343,422,2.609,423,3.655,424,3.655]],["title/classes/Register.html",[0,0.207,137,1.89]],["body/classes/Register.html",[0,0.244,1,0.474,2,0.303,3,0.303,4,0.251,6,0.154,7,0.696,8,0.772,10,0.817,11,0.721,12,0.817,13,0.537,23,0.474,24,0.037,25,0.474,26,0.154,27,0.414,28,0.614,29,0.696,30,0.603,31,0.867,32,0.614,34,0.696,39,0.772,40,1.332,82,1.745,100,1.332,127,1.332,128,0.474,129,0.027,130,0.027,133,2.573,134,2.573,137,3.508,151,0.873,152,1.005,157,0.748,164,0.968,166,0.827,178,1.727,192,1.917,215,2.323,216,1.917,236,2.224,265,1.727,266,1.465,267,1.614,268,1.465,269,1.614,270,1.465,271,1.614,272,1.465,273,1.614,274,2.323,335,3.793,344,3.748,354,2.314,425,2.926,426,3.535,427,2.524,428,3.535,429,2.926,430,3.535,431,3.793,432,4.454,433,2.926,434,2.926,435,3.535,436,2.524]],["title/classes/Temperature.html",[0,0.207,54,1.686]],["body/classes/Temperature.html",[0,0.227,1,0.44,2,0.281,3,0.281,4,0.233,6,0.143,7,0.663,8,0.85,10,0.881,11,0.778,12,0.881,13,0.663,23,0.585,24,0.037,25,0.585,26,0.19,27,0.511,28,0.701,29,0.794,30,0.745,31,0.745,32,0.585,34,0.794,36,0.511,39,0.794,43,1.127,46,3.614,51,2.452,53,4.633,54,3.056,128,0.44,129,0.026,130,0.026,148,1.971,149,1.849,150,1.022,151,0.996,152,1.241,154,2.109,156,1.646,157,0.924,158,1.646,163,1.022,164,1.066,165,1.81,166,1.022,167,1.364,168,0.933,169,1.127,188,2.167,437,2.718,438,4.367,439,4.367,440,4.367,441,3.284,442,4.367,443,3.284,444,4.367,445,3.284,446,3.284]],["title/classes/Token.html",[0,0.207,367,1.132]],["body/classes/Token.html",[0,0.204,1,0.397,2,0.254,3,0.254,4,0.21,6,0.129,7,0.618,8,0.798,9,2.563,10,0.824,11,0.728,12,0.824,13,0.618,23,0.546,24,0.038,25,0.546,26,0.177,27,0.477,28,0.624,29,0.707,30,0.695,31,0.926,32,0.546,33,2.929,34,0.618,36,0.477,39,0.844,40,1.117,43,0.765,120,0.926,127,1.117,128,0.546,129,0.024,130,0.024,133,2.287,134,1.664,147,2.351,150,0.694,151,0.564,163,0.694,164,0.776,166,0.694,167,0.926,178,2.046,205,1.535,215,1.353,216,2.096,322,1.353,337,1.865,338,1.865,339,1.497,340,1.353,342,2.967,344,1.865,345,2.909,349,2.453,351,1.353,353,2.614,354,2.654,356,1.664,367,2.284,396,1.497,397,2.95,398,2.614,399,1.497,400,2.287,401,1.664,402,1.664,403,2.814,436,2.116,447,2.453,448,2.964,449,3.372,450,2.964,451,2.453,452,2.453,453,1.865,454,2.964,455,2.116,456,2.964,457,2.964,458,2.964,459,2.964,460,4.074,461,2.964,462,2.964,463,4.074,464,2.964,465,2.964,466,2.453]],["title/interfaces/UserInformations.html",[261,1.132,265,1.132]],["body/interfaces/UserInformations.html",[2,0.285,3,0.285,4,0.236,6,0.145,24,0.037,26,0.26,27,0.731,36,0.747,100,1.981,120,1.79,129,0.026,130,0.026,136,1.142,168,1.494,192,1.981,201,1.52,233,1.869,234,1.869,235,1.52,240,1.869,242,1.869,244,1.869,246,1.869,248,1.869,250,1.869,261,1.981,262,1.869,263,1.869,264,2.772,265,1.661,266,2.179,267,2.401,268,2.179,269,2.401,270,2.179,271,2.401,272,2.179,273,2.401,274,2.401,275,1.52,276,1.869,277,1.869,278,1.869,279,1.869,280,1.869,281,1.869,282,1.869,283,1.52,284,1.869,285,1.869,286,1.869,287,1.869]],["title/classes/Utils.html",[0,0.207,453,1.89]],["body/classes/Utils.html",[0,0.281,1,0.545,2,0.349,3,0.349,4,0.289,6,0.177,7,0.76,13,0.617,23,0.545,24,0.037,25,0.545,26,0.177,27,0.476,29,0.76,34,0.617,36,0.724,55,2.904,120,1.816,129,0.029,130,0.029,147,2.529,205,1.533,451,4.145,453,3.151,467,3.367,468,5.009,469,5.009,470,4.068,471,5.664,472,6.205,473,5.009,474,5.009,475,5.009,476,4.068,477,4.068,478,4.068]],["title/classes/Widget.html",[0,0.207,479,1.89]],["body/classes/Widget.html",[0,0.209,1,0.406,2,0.26,3,0.26,4,0.215,6,0.132,7,0.628,8,0.715,10,0.768,11,0.818,12,0.768,13,0.46,20,2.601,23,0.406,24,0.037,25,0.406,26,0.204,27,0.355,28,0.554,29,0.628,30,0.516,31,0.996,32,0.554,34,0.628,36,0.551,39,0.926,52,2.506,54,2.321,57,2.506,58,2.321,61,2.506,64,2.321,66,2.506,71,2.506,80,2.506,84,2.506,86,2.506,88,2.506,93,2.506,98,2.321,102,2.506,110,2.506,114,2.321,117,2.506,127,1.141,128,0.406,129,0.024,130,0.024,133,2.321,134,2.321,150,0.709,151,0.787,157,1.266,163,0.709,164,0.787,169,1.039,170,2.601,178,1.774,215,1.888,216,1.906,217,2.601,288,2.601,322,1.383,339,1.529,340,1.383,342,2.555,351,1.383,367,2.06,396,1.529,397,2.643,398,2.321,399,1.529,400,2.321,401,1.7,402,1.7,403,2.321,406,2.162,479,3.183,480,2.506,481,3.029,482,3.422,483,4.135,484,2.506,485,2.506,486,2.506,487,4.953,488,3.029,489,3.029,490,3.029,491,3.029,492,3.029,493,3.029,494,3.029,495,3.029,496,3.029,497,3.029,498,3.029,499,3.029,500,3.029]],["title/classes/WidgetsDB.html",[0,0.207,501,2.145]],["body/classes/WidgetsDB.html",[0,0.161,1,0.313,2,0.2,3,0.2,4,0.166,6,0.101,7,0.522,8,0.762,9,2.164,10,0.808,11,0.714,12,0.808,13,0.522,20,3.265,23,0.461,24,0.038,25,0.461,26,0.149,27,0.403,28,0.603,29,0.683,30,0.587,31,0.696,32,0.461,34,0.683,36,0.527,39,0.895,40,1.538,82,1.544,127,0.88,128,0.547,129,0.02,130,0.02,150,0.805,151,0.777,152,0.664,157,1.062,163,0.805,164,1.035,165,1.425,166,1.215,178,2.177,188,1.425,191,2.528,205,1.538,214,3.378,215,1.864,216,2.221,322,1.571,338,1.47,339,1.18,340,1.067,342,2.977,351,1.571,353,3.051,354,2.621,356,1.312,367,2.112,381,2.914,396,1.737,397,2.694,398,2.528,399,1.737,400,2.528,401,1.931,402,1.931,403,2.292,405,3.584,406,2.456,418,2.847,419,2.847,421,2.456,452,2.847,501,2.914,502,1.934,503,2.337,504,3.726,505,2.337,506,3.44,507,3.44,508,3.44,509,3.44,510,1.668,511,1.668,512,1.668,513,1.668,514,3.44,515,4.082,516,3.44,517,2.847,518,3.44,519,3.44,520,2.337,521,2.337]],["title/coverage.html",[522,3.403]],["body/coverage.html",[0,0.421,4,0.207,5,2.416,24,0.037,26,0.127,43,0.754,54,1.639,58,1.639,64,1.639,81,1.474,98,1.639,114,1.639,128,0.391,129,0.024,130,0.024,131,2.084,132,2.416,136,1.001,137,1.837,139,2.084,142,2.416,170,1.837,171,2.416,184,2.416,205,2.313,217,1.837,218,2.416,235,1.333,261,1.877,263,2.796,265,1.1,275,1.333,283,1.333,288,1.837,289,2.416,333,2.416,336,1.837,337,1.837,367,1.1,368,2.416,386,2.416,393,2.416,395,2.084,416,2.084,417,2.416,422,2.084,425,2.416,427,2.084,437,2.416,447,2.416,453,1.837,455,2.084,467,2.416,479,1.837,480,2.416,501,2.084,502,2.416,510,2.084,511,2.084,512,2.084,513,2.084,522,2.416,523,2.919,524,2.919,525,2.919,526,2.416,527,6.138,528,2.416,529,6.05,530,4.801,531,2.416,532,2.416,533,5.406,534,5.406,535,2.416,536,2.919,537,2.919,538,2.919,539,2.919,540,3.337,541,2.416,542,2.879,543,3.337,544,2.416,545,2.416,546,2.879,547,2.416,548,2.416,549,5.952,550,5.952,551,3.337,552,2.416,553,2.416,554,4.982,555,4.982,556,2.416,557,2.416,558,2.919,559,2.919,560,2.919,561,2.416]],["title/dependencies.html",[562,2.503,563,2.993]],["body/dependencies.html",[24,0.036,32,0.629,33,2.955,129,0.032,130,0.032,340,2.145,563,3.887,564,4.697,565,4.697,566,4.697,567,4.697,568,4.697,569,4.697,570,4.697,571,4.697,572,4.697,573,4.697]],["title/miscellaneous/functions.html",[574,1.574,575,2.993]],["body/miscellaneous/functions.html",[6,0.198,11,0.719,23,0.719,24,0.035,25,0.719,26,0.198,27,0.629,28,0.612,36,0.629,129,0.032,130,0.032,542,3.259,544,4.443,546,3.259,547,4.443,574,2.872,575,3.778,576,3.778,577,3.778,578,4.565,579,5.369,580,4.565,581,4.565,582,5.369]],["title/index.html",[6,0.13,583,2.486]],["body/index.html",[1,0.653,24,0.033,129,0.033,130,0.033,262,2.736,583,4.033,584,4.874,585,4.874]],["title/modules.html",[586,3.403]],["body/modules.html",[24,0.033,129,0.033,130,0.033,586,4.074]],["title/miscellaneous/variables.html",[574,1.574,587,2.993]],["body/miscellaneous/variables.html",[6,0.034,8,0.679,10,0.212,11,0.187,12,0.212,17,1.336,20,1.449,24,0.038,26,0.198,28,0.187,32,0.105,36,0.617,39,0.778,40,1.106,42,0.648,43,0.879,82,1.785,100,0.868,101,1.158,120,0.245,128,0.187,129,0.008,130,0.008,136,0.269,139,0.999,147,0.396,148,1.106,149,0.527,150,0.916,151,0.716,152,0.397,154,1.106,156,1.282,157,0.98,158,1.106,163,0.947,164,0.997,166,0.746,167,1.063,169,1.677,178,1.863,191,0.44,192,1.106,193,1.158,194,2.096,195,2.096,196,2.096,201,0.639,205,0.868,208,4.046,215,2.207,216,1.899,265,1.106,266,0.954,267,1.052,268,0.954,269,1.052,270,0.954,271,0.639,272,0.954,273,0.358,274,1.341,322,0.865,336,0.88,337,0.88,341,1.158,344,3.199,345,1.889,346,0.648,347,1.158,348,1.158,350,0.648,351,0.358,353,3.277,354,2.897,356,0.785,360,2.189,361,2.189,362,2.189,363,2.189,365,2.189,366,1.158,367,1.961,374,1.158,381,0.999,395,0.999,396,0.396,399,0.396,405,1.353,421,1.644,422,0.999,427,0.999,429,2.43,431,1.158,432,1.568,433,1.906,434,1.906,436,0.999,449,0.648,455,0.999,466,0.648,479,1.192,482,0.648,484,1.568,485,1.158,486,1.158,487,2.636,504,1.568,510,0.999,511,0.999,512,0.999,513,0.999,517,2.816,526,0.648,528,1.158,530,0.648,531,1.158,532,1.158,535,1.158,540,0.648,541,1.158,542,0.559,543,3.238,545,1.158,546,0.559,548,1.158,551,0.648,552,1.158,553,0.648,556,0.648,557,0.648,561,0.648,574,0.493,576,0.648,577,0.648,587,0.648,588,3.763,589,1.399,590,0.783,591,0.783,592,1.399,593,0.783,594,0.783,595,3.913,596,5.041,597,1.399,598,3.403,599,5.238,600,2.936,601,2.936,602,1.399,603,2.936,604,0.783,605,2.936,606,0.783,607,2.936,608,0.783,609,2.936,610,0.783,611,3.594,612,4.832,613,3.913,614,2.303,615,0.783,616,1.895,617,1.399,618,0.783,619,0.783,620,1.895,621,2.645,622,1.399,623,0.783,624,0.783,625,0.783,626,0.783,627,1.895,628,0.783,629,2.936,630,0.783,631,0.783,632,0.783,633,0.783,634,0.783,635,0.783,636,0.783,637,0.783,638,0.783,639,4.771,640,3.913,641,3.403,642,1.399,643,0.783,644,3.403,645,2.303,646,3.186,647,3.403,648,1.399,649,2.303,650,3.403,651,0.783,652,2.303,653,1.399,654,4.471,655,3.763,656,1.895,657,1.399,658,0.783,659,2.936,660,0.783,661,0.783,662,4.38,663,0.783,664,0.783,665,0.783,666,0.783,667,0.783,668,0.783,669,0.783,670,1.399,671,1.399,672,4.048,673,1.399,674,1.399,675,1.399,676,2.303,677,2.303,678,2.303,679,1.399,680,1.399,681,0.783,682,0.783,683,0.783,684,1.895,685,1.399,686,0.783,687,0.783,688,0.783,689,0.783,690,0.783,691,2.303,692,0.783,693,0.783,694,0.783,695,0.783]]],"invertedIndex":[["",{"_index":24,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":205,"title":{},"body":{"classes/Gmail.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0/1",{"_index":529,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":536,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":539,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":538,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":537,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":322,"title":{},"body":{"classes/LeagueOfLegends.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["1/1",{"_index":534,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":550,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":533,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":584,"title":{},"body":{"index.html":{}}}],["2.29.1",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":303,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["365",{"_index":99,"title":{},"body":{"classes/About.html":{}}}],["4",{"_index":585,"title":{},"body":{"index.html":{}}}],["4.17.1",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":549,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":347,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["66",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["8.5.1",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["_result",{"_index":355,"title":{},"body":{"classes/Login.html":{}}}],["_result['token",{"_index":358,"title":{},"body":{"classes/Login.html":{}}}],["_result['token_created_at",{"_index":359,"title":{},"body":{"classes/Login.html":{}}}],["abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789",{"_index":478,"title":{},"body":{"classes/Utils.html":{}}}],["access_token",{"_index":639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["account",{"_index":669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addroute",{"_index":547,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["addroute(endpoint",{"_index":578,"title":{},"body":{"miscellaneous/functions.html":{}}}],["addusers",{"_index":531,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["addusers(infos",{"_index":676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addwidget",{"_index":512,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["addwidget(userid",{"_index":520,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["already",{"_index":433,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["api",{"_index":373,"title":{},"body":{"classes/Nasa.html":{},"classes/Office.html":{}}}],["api_key",{"_index":51,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{}}}],["api_url",{"_index":48,"title":{},"body":{"classes/About.html":{}}}],["apod",{"_index":66,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["app",{"_index":541,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apple_mail",{"_index":270,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["apple_token",{"_index":271,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["apple_user",{"_index":656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argument",{"_index":474,"title":{},"body":{"classes/Utils.html":{}}}],["array",{"_index":201,"title":{},"body":{"classes/Gmail.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["astronomy",{"_index":67,"title":{},"body":{"classes/About.html":{}}}],["async",{"_index":8,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["async(err",{"_index":515,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["authactions",{"_index":140,"title":{},"body":{"classes/Authentication.html":{}}}],["authentication",{"_index":131,"title":{"classes/Authentication.html":{}},"body":{"classes/Authentication.html":{},"coverage.html":{}}}],["authorization",{"_index":195,"title":{},"body":{"classes/Gmail.html":{},"classes/Office.html":{},"miscellaneous/variables.html":{}}}],["autologin",{"_index":83,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{}}}],["autologin.startswith(\"https://intra.epitech.eu",{"_index":177,"title":{},"body":{"classes/EpitechDoors.html":{},"classes/IntraEpitech.html":{}}}],["autologin.substring(25",{"_index":237,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["awailable",{"_index":21,"title":{},"body":{"classes/About.html":{}}}],["await",{"_index":157,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["axios",{"_index":148,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["axiosresponse",{"_index":149,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["bad",{"_index":653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base_currency",{"_index":161,"title":{},"body":{"classes/Currency.html":{}}}],["basic",{"_index":335,"title":{},"body":{"classes/Login.html":{},"classes/Register.html":{}}}],["bearer",{"_index":196,"title":{},"body":{"classes/Gmail.html":{},"classes/Office.html":{},"miscellaneous/variables.html":{}}}],["before",{"_index":507,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["boolean",{"_index":484,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["break",{"_index":646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calendar",{"_index":103,"title":{},"body":{"classes/About.html":{},"classes/Office.html":{}}}],["callback",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(err",{"_index":612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["camera",{"_index":75,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["campus",{"_index":176,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["case",{"_index":487,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":163,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["check",{"_index":449,"title":{},"body":{"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["checktoken",{"_index":455,"title":{},"body":{"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checktoken(token",{"_index":457,"title":{},"body":{"classes/Token.html":{}}}],["city",{"_index":53,"title":{},"body":{"classes/About.html":{},"classes/Temperature.html":{}}}],["city_temperature",{"_index":52,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["city_weather",{"_index":57,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["class",{"_index":0,"title":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{}}}],["classes",{"_index":1,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"index.html":{}}}],["client",{"_index":41,"title":{},"body":{"classes/About.html":{}}}],["console.debug(\"firsturl",{"_index":301,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug(\"profile",{"_index":329,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug(\"response",{"_index":643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"secondurl",{"_index":311,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug(\"setting",{"_index":328,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["console.debug('[handleoauthusersaction",{"_index":662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(err",{"_index":405,"title":{},"body":{"classes/Profile.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["console.debug(result",{"_index":616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error(\"test",{"_index":212,"title":{},"body":{"classes/Gmail.html":{}}}],["console.log(\"heeeeerererere",{"_index":688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"heeeeerererere2",{"_index":690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"response",{"_index":651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('autologin",{"_index":180,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["console.log('bearer",{"_index":642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('currency",{"_index":160,"title":{},"body":{"classes/Currency.html":{}}}],["console.log(error",{"_index":165,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"classes/WidgetsDB.html":{}}}],["console.log(from",{"_index":153,"title":{},"body":{"classes/Currency.html":{}}}],["const",{"_index":151,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["converter",{"_index":59,"title":{},"body":{"classes/About.html":{}}}],["correspond",{"_index":633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cors",{"_index":564,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":522,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":509,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["created",{"_index":659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdat",{"_index":459,"title":{},"body":{"classes/Token.html":{}}}],["credits",{"_index":234,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["curiosity",{"_index":72,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["curiosity_image",{"_index":71,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["currency",{"_index":58,"title":{"classes/Currency.html":{}},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["currency.getexchangerate(req",{"_index":488,"title":{},"body":{"classes/Widget.html":{}}}],["currency_converter",{"_index":61,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["current",{"_index":146,"title":{},"body":{"classes/Currency.html":{}}}],["current_time",{"_index":44,"title":{},"body":{"classes/About.html":{}}}],["dashboard",{"_index":22,"title":{},"body":{"classes/About.html":{}}}],["data",{"_index":381,"title":{},"body":{"classes/Nasa.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["data.leaguepoints",{"_index":320,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.losses",{"_index":319,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.queuetype",{"_index":315,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.rank",{"_index":317,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.tier",{"_index":316,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data.wins",{"_index":318,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["data[0",{"_index":384,"title":{},"body":{"classes/Nasa.html":{}}}],["database",{"_index":504,"title":{},"body":{"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["database/databaseactions",{"_index":338,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{}}}],["database/interfaces",{"_index":236,"title":{},"body":{"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Register.html":{}}}],["date",{"_index":70,"title":{},"body":{"classes/About.html":{},"classes/Gmail.html":{},"classes/Nasa.html":{},"classes/Office.html":{}}}],["day",{"_index":69,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["db",{"_index":528,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["db.query(query",{"_index":611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db.query(querystring",{"_index":632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dd",{"_index":362,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["decoded",{"_index":400,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["default",{"_index":169,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["delete",{"_index":618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletewidget",{"_index":532,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":563,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":55,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{},"classes/Utils.html":{}}}],["diff",{"_index":463,"title":{},"body":{"classes/Token.html":{}}}],["display",{"_index":56,"title":{},"body":{"classes/About.html":{}}}],["display_name",{"_index":47,"title":{},"body":{"classes/About.html":{}}}],["documentation",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["door",{"_index":95,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{}}}],["door_name",{"_index":97,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{}}}],["doors",{"_index":91,"title":{},"body":{"classes/About.html":{}}}],["dotenv",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["emails",{"_index":190,"title":{},"body":{"classes/Gmail.html":{}}}],["end",{"_index":391,"title":{},"body":{"classes/Office.html":{}}}],["end_date",{"_index":106,"title":{},"body":{"classes/About.html":{},"classes/Office.html":{}}}],["endpoint",{"_index":580,"title":{},"body":{"miscellaneous/functions.html":{}}}],["epitech",{"_index":78,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{}}}],["epitech_doors",{"_index":90,"title":{},"body":{"classes/About.html":{}}}],["epitech_doors_open_door",{"_index":93,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["epitechdoors",{"_index":170,"title":{"classes/EpitechDoors.html":{}},"body":{"classes/EpitechDoors.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["epitechdoors.opendoor(req",{"_index":496,"title":{},"body":{"classes/Widget.html":{}}}],["equal",{"_index":473,"title":{},"body":{"classes/Utils.html":{}}}],["err",{"_index":353,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":164,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["error.response.data",{"_index":213,"title":{},"body":{"classes/Gmail.html":{}}}],["error[addusers",{"_index":677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error[getusers",{"_index":675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error[updateuserauthtoken",{"_index":663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["events",{"_index":104,"title":{},"body":{"classes/About.html":{},"classes/Office.html":{}}}],["exchange",{"_index":62,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{}}}],["existed",{"_index":506,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["exists",{"_index":434,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":345,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":168,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"interfaces/UserInformations.html":{}}}],["express",{"_index":32,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["express.request",{"_index":10,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["express.response",{"_index":12,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["facebook_mail",{"_index":268,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["facebook_token",{"_index":269,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["facebook_user",{"_index":647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["facebookuser",{"_index":649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":178,"title":{},"body":{"classes/EpitechDoors.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{}}}],["firstname",{"_index":240,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["firsturl",{"_index":298,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["found",{"_index":398,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["function",{"_index":543,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":575,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["game's",{"_index":296,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["gamedata",{"_index":287,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["gamedata.length",{"_index":321,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["gamedata[0].queuetype",{"_index":323,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["gamedata[1",{"_index":325,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["general",{"_index":16,"title":{},"body":{"classes/About.html":{}}}],["generate",{"_index":451,"title":{},"body":{"classes/Token.html":{},"classes/Utils.html":{}}}],["generated",{"_index":475,"title":{},"body":{"classes/Utils.html":{}}}],["get(req",{"_index":9,"title":{},"body":{"classes/About.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{}}}],["getcalendarevents",{"_index":387,"title":{},"body":{"classes/Office.html":{}}}],["getcalendarevents(req",{"_index":388,"title":{},"body":{"classes/Office.html":{}}}],["getexchangerate",{"_index":143,"title":{},"body":{"classes/Currency.html":{}}}],["getexchangerate(req",{"_index":144,"title":{},"body":{"classes/Currency.html":{}}}],["getgrades",{"_index":219,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getgrades(req",{"_index":223,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getlastfivemail",{"_index":185,"title":{},"body":{"classes/Gmail.html":{}}}],["getlastfivemail(req",{"_index":186,"title":{},"body":{"classes/Gmail.html":{}}}],["getnasadayimage",{"_index":369,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasadayimage(req",{"_index":371,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasaroverimage",{"_index":370,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasaroverimage(req",{"_index":375,"title":{},"body":{"classes/Nasa.html":{}}}],["getnotifications",{"_index":220,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getnotifications(req",{"_index":225,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getpartners",{"_index":221,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getpartners(req",{"_index":227,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getprofile",{"_index":222,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getprofile(req",{"_index":231,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getrandomstring",{"_index":468,"title":{},"body":{"classes/Utils.html":{}}}],["getrandomstring(length",{"_index":469,"title":{},"body":{"classes/Utils.html":{}}}],["getrow",{"_index":395,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrow('token",{"_index":404,"title":{},"body":{"classes/Profile.html":{}}}],["gettemperature",{"_index":438,"title":{},"body":{"classes/Temperature.html":{}}}],["gettemperature(req",{"_index":440,"title":{},"body":{"classes/Temperature.html":{}}}],["getting",{"_index":332,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["getuserbytoken",{"_index":511,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuserbytoken(token",{"_index":514,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["getuserprofile",{"_index":290,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["getuserprofile(req",{"_index":291,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["getusers",{"_index":336,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getusers(infos",{"_index":674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getusers(user",{"_index":352,"title":{},"body":{"classes/Login.html":{}}}],["getweather",{"_index":439,"title":{},"body":{"classes/Temperature.html":{}}}],["getweather(req",{"_index":442,"title":{},"body":{"classes/Temperature.html":{}}}],["getwidgetsbyuserid",{"_index":510,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getwidgetsbyuserid(userid",{"_index":519,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["given",{"_index":147,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Utils.html":{},"miscellaneous/variables.html":{}}}],["gmail",{"_index":114,"title":{"classes/Gmail.html":{}},"body":{"classes/About.html":{},"classes/Gmail.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["gmail.getlastfivemail(req",{"_index":500,"title":{},"body":{"classes/Widget.html":{}}}],["gmail_inbox",{"_index":117,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["google",{"_index":116,"title":{},"body":{"classes/About.html":{}}}],["google/facebook/office",{"_index":668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["google_api_key",{"_index":115,"title":{},"body":{"classes/About.html":{},"classes/Gmail.html":{}}}],["google_mail",{"_index":266,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["google_token",{"_index":267,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["google_user",{"_index":641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googleuser",{"_index":645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gpa",{"_index":233,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["grades",{"_index":89,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{}}}],["handle",{"_index":482,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusers",{"_index":139,"title":{},"body":{"classes/Authentication.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusers(req",{"_index":141,"title":{},"body":{"classes/Authentication.html":{}}}],["handleoauthusersaction",{"_index":552,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusersaction(infos",{"_index":658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["header",{"_index":210,"title":{},"body":{"classes/Gmail.html":{}}}],["header.name",{"_index":206,"title":{},"body":{"classes/Gmail.html":{}}}],["headers",{"_index":194,"title":{},"body":{"classes/Gmail.html":{},"classes/Office.html":{},"miscellaneous/variables.html":{}}}],["hh:mm:ss",{"_index":363,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":42,"title":{},"body":{"classes/About.html":{},"miscellaneous/variables.html":{}}}],["http://api.openweathermap.org",{"_index":49,"title":{},"body":{"classes/About.html":{}}}],["http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key",{"_index":444,"title":{},"body":{"classes/Temperature.html":{}}}],["https://${region}.api.riotgames.com/lol/league/v4/entries/by",{"_index":309,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["https://${region}.api.riotgames.com/lol/summoner/v4/summoners/by",{"_index":299,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["https://api.nasa.gov",{"_index":65,"title":{},"body":{"classes/About.html":{}}}],["https://api.nasa.gov/mars",{"_index":379,"title":{},"body":{"classes/Nasa.html":{}}}],["https://api.nasa.gov/planetary/apod?api_key=${api_key}&date=${date",{"_index":377,"title":{},"body":{"classes/Nasa.html":{}}}],["https://ddragon.leagueoflegends.com/cdn/11.23.1/img/profileicon/${response.data['profileiconid']}.png",{"_index":305,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["https://epi",{"_index":181,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["https://freecurrencyapi.net",{"_index":60,"title":{},"body":{"classes/About.html":{}}}],["https://freecurrencyapi.net/api/v2/latest?base_currency=${from}&apikey=${api_key",{"_index":155,"title":{},"body":{"classes/Currency.html":{}}}],["https://gmail.googleapis.com/gmail/v1/users/${mail}/messages?maxresults=${max_results",{"_index":198,"title":{},"body":{"classes/Gmail.html":{}}}],["https://graph.facebook.com/me/?fields=id,name,email",{"_index":648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://graph.microsoft.com/v1.0/me",{"_index":101,"title":{},"body":{"classes/About.html":{},"miscellaneous/variables.html":{}}}],["https://graph.microsoft.com/v1.0/me/calendarview?startdatetime=${start_date}&enddatetime=${end_date",{"_index":392,"title":{},"body":{"classes/Office.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/binome/?format=json",{"_index":255,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/notes?format=json",{"_index":259,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/notification/message?format=json",{"_index":257,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user?format=json",{"_index":238,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${intra_autologin",{"_index":179,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["https://intra.epitech.eu/admin/autolog",{"_index":79,"title":{},"body":{"classes/About.html":{}}}],["https://www.googleapis.com/oauth2/v1/userinfo?alt=json",{"_index":193,"title":{},"body":{"classes/Gmail.html":{},"miscellaneous/variables.html":{}}}],["icon",{"_index":293,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["id",{"_index":619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifier",{"_index":524,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":74,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["import",{"_index":31,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["inbox",{"_index":118,"title":{},"body":{"classes/About.html":{},"classes/Gmail.html":{}}}],["incorrect",{"_index":357,"title":{},"body":{"classes/Login.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["informations",{"_index":17,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"miscellaneous/variables.html":{}}}],["infos",{"_index":429,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["infos.apple_mail",{"_index":607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.apple_token",{"_index":608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.facebook_mail",{"_index":605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.facebook_token",{"_index":606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.google_mail",{"_index":603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.google_token",{"_index":604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.mail",{"_index":600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.office_mail",{"_index":609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.office_token",{"_index":610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.password",{"_index":602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insert",{"_index":597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":261,"title":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["interfaces",{"_index":262,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"index.html":{}}}],["internal",{"_index":167,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["intra",{"_index":77,"title":{},"body":{"classes/About.html":{}}}],["intra_autologin",{"_index":92,"title":{},"body":{"classes/About.html":{},"classes/EpitechDoors.html":{}}}],["intra_epitech",{"_index":76,"title":{},"body":{"classes/About.html":{}}}],["intra_epitech_grades",{"_index":88,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_notifications",{"_index":86,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_partners",{"_index":84,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_profile",{"_index":80,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intraepitech",{"_index":217,"title":{"classes/IntraEpitech.html":{}},"body":{"classes/IntraEpitech.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["intraepitech.getgrades(req",{"_index":497,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getnotifications(req",{"_index":495,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getpartners(req",{"_index":494,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getprofile(req",{"_index":493,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitechuser",{"_index":235,"title":{"interfaces/IntraEpitechUser.html":{}},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["invalid",{"_index":403,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["ip",{"_index":35,"title":{},"body":{"classes/About.html":{}}}],["ip.split(\":\")[3",{"_index":38,"title":{},"body":{"classes/About.html":{}}}],["json.stringify(widget",{"_index":615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jsonwebtoken",{"_index":340,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"dependencies.html":{}}}],["jwt",{"_index":339,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwt.jwtpayload",{"_index":401,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwt.sign",{"_index":350,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["jwt.verify(token",{"_index":402,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwttoken",{"_index":629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":189,"title":{},"body":{"classes/Gmail.html":{}}}],["lastname",{"_index":242,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["league",{"_index":108,"title":{},"body":{"classes/About.html":{}}}],["league_of_legends",{"_index":107,"title":{},"body":{"classes/About.html":{}}}],["league_of_legends_summoner_profile",{"_index":110,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["leagueoflegends",{"_index":288,"title":{"classes/LeagueOfLegends.html":{}},"body":{"classes/LeagueOfLegends.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["leagueoflegends.getuserprofile(req",{"_index":499,"title":{},"body":{"classes/Widget.html":{}}}],["leagueoflegendsgamedata",{"_index":275,"title":{"interfaces/LeagueOfLegendsGameData.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["leagueoflegendsprofiledata",{"_index":283,"title":{"interfaces/LeagueOfLegendsProfileData.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["leaguepoints",{"_index":281,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["legends",{"_index":109,"title":{},"body":{"classes/About.html":{}}}],["length",{"_index":472,"title":{},"body":{"classes/Utils.html":{}}}],["level",{"_index":294,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["limit",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["list",{"_index":18,"title":{},"body":{"classes/About.html":{}}}],["literal",{"_index":682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":248,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["logged",{"_index":366,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":136,"title":{"classes/Login.html":{}},"body":{"classes/Authentication.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"interfaces/UserInformations.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logue.eu/api/doors_open?login=${autologin}&door_name=${door_name",{"_index":182,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["losses",{"_index":280,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["mail",{"_index":192,"title":{},"body":{"classes/Gmail.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":130,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["max_results",{"_index":119,"title":{},"body":{"classes/About.html":{},"classes/Gmail.html":{}}}],["message",{"_index":216,"title":{},"body":{"classes/Gmail.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["messageids",{"_index":200,"title":{},"body":{"classes/Gmail.html":{}}}],["messageids.push(message.id",{"_index":203,"title":{},"body":{"classes/Gmail.html":{}}}],["messages",{"_index":204,"title":{},"body":{"classes/Gmail.html":{}}}],["messages.push(msg",{"_index":211,"title":{},"body":{"classes/Gmail.html":{}}}],["method",{"_index":158,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":7,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["miscellaneous",{"_index":574,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":361,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["module.exports",{"_index":127,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["modules",{"_index":586,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moment",{"_index":33,"title":{},"body":{"classes/About.html":{},"classes/Login.html":{},"classes/Token.html":{},"dependencies.html":{}}}],["moment().format('yyyy",{"_index":360,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["moment().unix",{"_index":45,"title":{},"body":{"classes/About.html":{}}}],["moment(result[0].token_created_at",{"_index":461,"title":{},"body":{"classes/Token.html":{}}}],["moment.moment",{"_index":460,"title":{},"body":{"classes/Token.html":{}}}],["montpellier",{"_index":96,"title":{},"body":{"classes/About.html":{}}}],["mysql.createconnection",{"_index":634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":25,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["name/${summoner_name}?api_key=${api_key",{"_index":300,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["nasa",{"_index":64,"title":{"classes/Nasa.html":{}},"body":{"classes/About.html":{},"classes/Nasa.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["nasa.getnasadayimage(req",{"_index":491,"title":{},"body":{"classes/Widget.html":{}}}],["nasa.getnasaroverimage(req",{"_index":492,"title":{},"body":{"classes/Widget.html":{}}}],["new",{"_index":128,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newtoken",{"_index":349,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{}}}],["newvalues",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["next",{"_index":582,"title":{},"body":{"miscellaneous/functions.html":{}}}],["none",{"_index":660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notifications",{"_index":87,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{}}}],["now",{"_index":462,"title":{},"body":{"classes/Token.html":{}}}],["now.diff(createdat",{"_index":464,"title":{},"body":{"classes/Token.html":{}}}],["null",{"_index":458,"title":{},"body":{"classes/Token.html":{}}}],["number",{"_index":120,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"miscellaneous/variables.html":{}}}],["number(process.env.expire_time",{"_index":346,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["oauth",{"_index":138,"title":{},"body":{"classes/Authentication.html":{}}}],["oauth's",{"_index":666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["office",{"_index":98,"title":{"classes/Office.html":{}},"body":{"classes/About.html":{},"classes/Office.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["office.getcalendarevents(req",{"_index":498,"title":{},"body":{"classes/Widget.html":{}}}],["office_calendar_events",{"_index":102,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["office_mail",{"_index":272,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["office_token",{"_index":100,"title":{},"body":{"classes/About.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Office.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["office_user",{"_index":650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["officeuser",{"_index":652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["one",{"_index":452,"title":{},"body":{"classes/Token.html":{},"classes/WidgetsDB.html":{}}}],["open",{"_index":94,"title":{},"body":{"classes/About.html":{}}}],["opendoor",{"_index":172,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["opendoor(req",{"_index":173,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["opens",{"_index":175,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["optional",{"_index":27,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["otherwise",{"_index":508,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["outlook_mail",{"_index":412,"title":{},"body":{"classes/Profile.html":{}}}],["overview",{"_index":583,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":562,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":34,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["parameters",{"_index":23,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":50,"title":{},"body":{"classes/About.html":{}}}],["partners",{"_index":85,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{}}}],["password",{"_index":274,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":418,"title":{},"body":{"classes/ProfileUpdate.html":{},"classes/WidgetsDB.html":{}}}],["patch(req",{"_index":419,"title":{},"body":{"classes/ProfileUpdate.html":{},"classes/WidgetsDB.html":{}}}],["payload",{"_index":348,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["people",{"_index":229,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["photo",{"_index":383,"title":{},"body":{"classes/Nasa.html":{}}}],["photos/api/v1/rovers/curiosity/photos?earth_date=${date}&camera=${camera}&api_key=${api_key",{"_index":380,"title":{},"body":{"classes/Nasa.html":{}}}],["picture",{"_index":68,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{}}}],["plain_user",{"_index":684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plainuser",{"_index":685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["playlist",{"_index":125,"title":{},"body":{"classes/About.html":{}}}],["playlist_id",{"_index":126,"title":{},"body":{"classes/About.html":{}}}],["possible",{"_index":477,"title":{},"body":{"classes/Utils.html":{}}}],["post",{"_index":133,"title":{},"body":{"classes/Authentication.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["post(req",{"_index":134,"title":{},"body":{"classes/Authentication.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["process.env.jwt_secret",{"_index":351,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["process.env.my_sql_database",{"_index":638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_host",{"_index":635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_password",{"_index":637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_user",{"_index":636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["profile",{"_index":81,"title":{"classes/Profile.html":{}},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Profile.html":{},"coverage.html":{}}}],["profileactions",{"_index":423,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["profileiconurl",{"_index":286,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["profilepicture",{"_index":244,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["profileupdate",{"_index":416,"title":{"classes/ProfileUpdate.html":{}},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{}}}],["project",{"_index":230,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["promise",{"_index":670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise(async",{"_index":671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promo",{"_index":246,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["properties",{"_index":264,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["query",{"_index":596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["querystring",{"_index":631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queuetype",{"_index":276,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["random",{"_index":471,"title":{},"body":{"classes/Utils.html":{}}}],["rank",{"_index":278,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["ranked",{"_index":295,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["ranked_flex_sr",{"_index":326,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["ranked_solo_5x5",{"_index":324,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["rate",{"_index":63,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{}}}],["rc.0",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["region",{"_index":113,"title":{},"body":{"classes/About.html":{},"classes/LeagueOfLegends.html":{}}}],["register",{"_index":137,"title":{"classes/Register.html":{}},"body":{"classes/Authentication.html":{},"classes/Register.html":{},"coverage.html":{}}}],["registeractions",{"_index":428,"title":{},"body":{"classes/Register.html":{}}}],["registerbasicuser",{"_index":427,"title":{},"body":{"classes/Register.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registerbasicuser(infos",{"_index":430,"title":{},"body":{"classes/Register.html":{}}}],["register|login",{"_index":683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registration",{"_index":665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reject",{"_index":673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req",{"_index":28,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["req.body",{"_index":152,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["req.body.mail",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.body.password",{"_index":687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":396,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["req.ip",{"_index":37,"title":{},"body":{"classes/About.html":{}}}],["req.params.type",{"_index":485,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":374,"title":{},"body":{"classes/Nasa.html":{},"miscellaneous/variables.html":{}}}],["requesthandler",{"_index":544,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["requesthandler(req",{"_index":581,"title":{},"body":{"miscellaneous/functions.html":{}}}],["requests",{"_index":483,"title":{},"body":{"classes/Widget.html":{}}}],["require(\"http\").server(app",{"_index":630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":343,"title":{},"body":{"classes/Login.html":{}}}],["res",{"_index":11,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["res.status(200).json",{"_index":40,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/Gmail.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["res.status(200).json(photo",{"_index":385,"title":{},"body":{"classes/Nasa.html":{}}}],["res.status(200).json(profile",{"_index":330,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["res.status(200).json(response.data",{"_index":378,"title":{},"body":{"classes/Nasa.html":{},"classes/Office.html":{}}}],["res.status(200).json(response.data['main",{"_index":445,"title":{},"body":{"classes/Temperature.html":{}}}],["res.status(200).json(response.data['weather",{"_index":446,"title":{},"body":{"classes/Temperature.html":{}}}],["res.status(200).json(response2.data",{"_index":258,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(response2.data['binomes",{"_index":256,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(response2.data['modules",{"_index":260,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(user",{"_index":254,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(400).json",{"_index":341,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["res.status(401).json",{"_index":397,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["res.status(403).json",{"_index":435,"title":{},"body":{"classes/Register.html":{}}}],["res.status(404).json",{"_index":406,"title":{},"body":{"classes/Profile.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["res.status(500).json",{"_index":166,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["res.status(response.status).json(response.data",{"_index":183,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["res.status(response2.status).json",{"_index":331,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["resolve",{"_index":672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":156,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["response.data",{"_index":644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response.data.data[to",{"_index":159,"title":{},"body":{"classes/Currency.html":{}}}],["response.data.email",{"_index":197,"title":{},"body":{"classes/Gmail.html":{}}}],["response.data.photos",{"_index":382,"title":{},"body":{"classes/Nasa.html":{}}}],["response.data['credits",{"_index":252,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['firstname",{"_index":241,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['gpa'][0]['gpa",{"_index":253,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['groups'][0]['name",{"_index":249,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['id",{"_index":304,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response.data['lastname",{"_index":243,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['login",{"_index":239,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['name",{"_index":307,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response.data['picture",{"_index":245,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['promo",{"_index":247,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['semester_code",{"_index":251,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['summonerlevel",{"_index":306,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response.status",{"_index":302,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response2",{"_index":199,"title":{},"body":{"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{}}}],["response2.data.length",{"_index":313,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response2.data.map((data",{"_index":314,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response2.data.messages.foreach((message",{"_index":202,"title":{},"body":{"classes/Gmail.html":{}}}],["response2.status",{"_index":312,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["response3.data.payload.headers.find",{"_index":209,"title":{},"body":{"classes/Gmail.html":{}}}],["result",{"_index":354,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["result.affectedrows",{"_index":466,"title":{},"body":{"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["result.error",{"_index":431,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["result.length",{"_index":356,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["result.message",{"_index":432,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["result.result",{"_index":436,"title":{},"body":{"classes/Register.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["result[0",{"_index":408,"title":{},"body":{"classes/Profile.html":{}}}],["result[addusers",{"_index":678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[getusers",{"_index":679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[updateuserauthtoken",{"_index":664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["results",{"_index":129,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":15,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{}}}],["retrieves",{"_index":188,"title":{},"body":{"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/WidgetsDB.html":{}}}],["return",{"_index":39,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":29,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["routes",{"_index":548,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rover",{"_index":73,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["row",{"_index":620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rows",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rslt",{"_index":407,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['apple_mail",{"_index":414,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['facebook_mail",{"_index":411,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['google_mail",{"_index":410,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['mail",{"_index":409,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['office_mail",{"_index":415,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['outlook_mail",{"_index":413,"title":{},"body":{"classes/Profile.html":{}}}],["save",{"_index":680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seconds",{"_index":465,"title":{},"body":{"classes/Token.html":{}}}],["secondurl",{"_index":308,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["select",{"_index":621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["semestercode",{"_index":250,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["server",{"_index":43,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":579,"title":{},"body":{"miscellaneous/functions.html":{}}}],["services",{"_index":19,"title":{},"body":{"classes/About.html":{}}}],["set",{"_index":627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signed",{"_index":667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":3,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["spoitfy.com",{"_index":122,"title":{},"body":{"classes/About.html":{}}}],["spotify",{"_index":121,"title":{},"body":{"classes/About.html":{}}}],["spotify_tracklist",{"_index":123,"title":{},"body":{"classes/About.html":{}}}],["src/.../authactions.ts",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.ts",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../databaseactions.ts",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../profileactions.ts",{"_index":594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../registeractions.ts",{"_index":593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../request_handler.ts",{"_index":577,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../routes.ts",{"_index":576,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../tokenaction.ts",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/database/database.ts",{"_index":526,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/databaseactions.ts",{"_index":530,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/interfaces.ts",{"_index":263,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["src/index.ts",{"_index":540,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/request_handler.ts",{"_index":542,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/routes.ts",{"_index":546,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/routes/about/about.ts",{"_index":5,"title":{},"body":{"classes/About.html":{},"coverage.html":{}}}],["src/routes/about/about.ts:11",{"_index":14,"title":{},"body":{"classes/About.html":{}}}],["src/routes/auth/authactions.ts",{"_index":551,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/auth/login.ts",{"_index":333,"title":{},"body":{"classes/Login.html":{},"coverage.html":{}}}],["src/routes/auth/login.ts:14",{"_index":334,"title":{},"body":{"classes/Login.html":{}}}],["src/routes/auth/oauth.ts",{"_index":132,"title":{},"body":{"classes/Authentication.html":{},"coverage.html":{}}}],["src/routes/auth/oauth.ts:12",{"_index":135,"title":{},"body":{"classes/Authentication.html":{}}}],["src/routes/auth/register.ts",{"_index":425,"title":{},"body":{"classes/Register.html":{},"coverage.html":{}}}],["src/routes/auth/register.ts:13",{"_index":426,"title":{},"body":{"classes/Register.html":{}}}],["src/routes/auth/registeractions.ts",{"_index":553,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/auth/token.ts",{"_index":447,"title":{},"body":{"classes/Token.html":{},"coverage.html":{}}}],["src/routes/auth/token.ts:16",{"_index":448,"title":{},"body":{"classes/Token.html":{}}}],["src/routes/auth/token.ts:52",{"_index":450,"title":{},"body":{"classes/Token.html":{}}}],["src/routes/auth/tokenaction.ts",{"_index":556,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/profile/profile.ts",{"_index":393,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{}}}],["src/routes/profile/profile.ts:13",{"_index":394,"title":{},"body":{"classes/Profile.html":{}}}],["src/routes/profile/profileactions.ts",{"_index":557,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/profile/profileupdate.ts",{"_index":417,"title":{},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{}}}],["src/routes/profile/profileupdate.ts:13",{"_index":420,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["src/routes/widgets/currency.ts",{"_index":142,"title":{},"body":{"classes/Currency.html":{},"coverage.html":{}}}],["src/routes/widgets/currency.ts:12",{"_index":145,"title":{},"body":{"classes/Currency.html":{}}}],["src/routes/widgets/epitechdoors.ts",{"_index":171,"title":{},"body":{"classes/EpitechDoors.html":{},"coverage.html":{}}}],["src/routes/widgets/epitechdoors.ts:12",{"_index":174,"title":{},"body":{"classes/EpitechDoors.html":{}}}],["src/routes/widgets/gmail.ts",{"_index":184,"title":{},"body":{"classes/Gmail.html":{},"coverage.html":{}}}],["src/routes/widgets/gmail.ts:11",{"_index":187,"title":{},"body":{"classes/Gmail.html":{}}}],["src/routes/widgets/intraepitech.ts",{"_index":218,"title":{},"body":{"classes/IntraEpitech.html":{},"coverage.html":{}}}],["src/routes/widgets/intraepitech.ts:13",{"_index":232,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:131",{"_index":224,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:56",{"_index":228,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:94",{"_index":226,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/leagueoflegends.ts",{"_index":289,"title":{},"body":{"classes/LeagueOfLegends.html":{},"coverage.html":{}}}],["src/routes/widgets/leagueoflegends.ts:13",{"_index":292,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["src/routes/widgets/nasa.ts",{"_index":368,"title":{},"body":{"classes/Nasa.html":{},"coverage.html":{}}}],["src/routes/widgets/nasa.ts:11",{"_index":372,"title":{},"body":{"classes/Nasa.html":{}}}],["src/routes/widgets/nasa.ts:34",{"_index":376,"title":{},"body":{"classes/Nasa.html":{}}}],["src/routes/widgets/office.ts",{"_index":386,"title":{},"body":{"classes/Office.html":{},"coverage.html":{}}}],["src/routes/widgets/office.ts:12",{"_index":389,"title":{},"body":{"classes/Office.html":{}}}],["src/routes/widgets/temperature.ts",{"_index":437,"title":{},"body":{"classes/Temperature.html":{},"coverage.html":{}}}],["src/routes/widgets/temperature.ts:12",{"_index":441,"title":{},"body":{"classes/Temperature.html":{}}}],["src/routes/widgets/temperature.ts:36",{"_index":443,"title":{},"body":{"classes/Temperature.html":{}}}],["src/routes/widgets/widget.ts",{"_index":480,"title":{},"body":{"classes/Widget.html":{},"coverage.html":{}}}],["src/routes/widgets/widget.ts:20",{"_index":481,"title":{},"body":{"classes/Widget.html":{}}}],["src/routes/widgets/widgetsdb.ts",{"_index":502,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{}}}],["src/routes/widgets/widgetsdb.ts:13",{"_index":503,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["src/routes/widgets/widgetsdb.ts:79",{"_index":505,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["src/utils/utils.ts",{"_index":467,"title":{},"body":{"classes/Utils.html":{},"coverage.html":{}}}],["src/utils/utils.ts:7",{"_index":470,"title":{},"body":{"classes/Utils.html":{}}}],["start",{"_index":390,"title":{},"body":{"classes/Office.html":{}}}],["start_date",{"_index":105,"title":{},"body":{"classes/About.html":{},"classes/Office.html":{}}}],["statements",{"_index":525,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":36,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":207,"title":{},"body":{"classes/Gmail.html":{}}}],["success",{"_index":214,"title":{},"body":{"classes/Gmail.html":{},"classes/WidgetsDB.html":{}}}],["summoner",{"_index":111,"title":{},"body":{"classes/About.html":{},"classes/LeagueOfLegends.html":{}}}],["summoner/${summoner_id}?api_key=${api_key",{"_index":310,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["summoner_id",{"_index":297,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["summoner_name",{"_index":112,"title":{},"body":{"classes/About.html":{},"classes/LeagueOfLegends.html":{}}}],["summonerlevel",{"_index":285,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["summonername",{"_index":284,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["switch",{"_index":486,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":561,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["target_currency",{"_index":162,"title":{},"body":{"classes/Currency.html":{}}}],["temperature",{"_index":54,"title":{"classes/Temperature.html":{}},"body":{"classes/About.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["temperature.gettemperature(req",{"_index":489,"title":{},"body":{"classes/Widget.html":{}}}],["temperature.getweather(req",{"_index":490,"title":{},"body":{"classes/Widget.html":{}}}],["text",{"_index":476,"title":{},"body":{"classes/Utils.html":{}}}],["tier",{"_index":277,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["token",{"_index":367,"title":{"classes/Token.html":{}},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token.split",{"_index":399,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["token_created_at",{"_index":365,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["token_wl",{"_index":545,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenaction",{"_index":456,"title":{},"body":{"classes/Token.html":{}}}],["tracklist",{"_index":124,"title":{},"body":{"classes/About.html":{}}}],["true",{"_index":215,"title":{},"body":{"classes/Gmail.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":150,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":26,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":344,"title":{},"body":{"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["unknown",{"_index":30,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["unranked",{"_index":327,"title":{},"body":{"classes/LeagueOfLegends.html":{}}}],["update",{"_index":421,"title":{},"body":{"classes/ProfileUpdate.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["updated",{"_index":691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos",{"_index":337,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateinfos(['facebook_mail",{"_index":693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['google_mail",{"_index":689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['mail",{"_index":694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['office_mail",{"_index":692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['token",{"_index":364,"title":{},"body":{"classes/Login.html":{}}}],["updates",{"_index":628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuserauthtoken",{"_index":535,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateuserauthtoken(infos",{"_index":661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuserinformations",{"_index":422,"title":{},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateuserinformations(req",{"_index":424,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["updatewidget",{"_index":513,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updatewidget(userid",{"_index":521,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["url",{"_index":154,"title":{},"body":{"classes/Currency.html":{},"classes/EpitechDoors.html":{},"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Nasa.html":{},"classes/Office.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":82,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":191,"title":{},"body":{"classes/Gmail.html":{},"classes/IntraEpitech.html":{},"classes/LeagueOfLegends.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["user.length",{"_index":516,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["user.type",{"_index":654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.email",{"_index":655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.mail",{"_index":657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.password",{"_index":695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user[0]['id",{"_index":518,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["user_id",{"_index":614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":517,"title":{},"body":{"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["userinformations",{"_index":265,"title":{"interfaces/UserInformations.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userjson",{"_index":640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["username",{"_index":273,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils",{"_index":453,"title":{"classes/Utils.html":{}},"body":{"classes/Token.html":{},"classes/Utils.html":{},"coverage.html":{}}}],["utils/utils",{"_index":454,"title":{},"body":{"classes/Token.html":{}}}],["valid",{"_index":342,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["value",{"_index":208,"title":{},"body":{"classes/Gmail.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":527,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":587,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["wasfound",{"_index":599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["weather",{"_index":46,"title":{},"body":{"classes/About.html":{},"classes/Temperature.html":{}}}],["whererow",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wherevalue",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["widget",{"_index":479,"title":{"classes/Widget.html":{}},"body":{"classes/Widget.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["widgetid",{"_index":617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["widgets",{"_index":20,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["widgetsdb",{"_index":501,"title":{"classes/WidgetsDB.html":{}},"body":{"classes/WidgetsDB.html":{},"coverage.html":{}}}],["winrate",{"_index":282,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}],["wins",{"_index":279,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/LeagueOfLegends.html":{},"interfaces/LeagueOfLegendsGameData.html":{},"interfaces/LeagueOfLegendsProfileData.html":{},"interfaces/UserInformations.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/About.html":{"url":"classes/About.html","title":"class - About","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  About\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/about/about.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/about/about.ts:11\n                \n            \n\n\n            \n                \n                    retrieve general informations and a list of services and their widgets awailable in the dashboard\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport moment from \"moment\";\n\nclass About {\n  /**\n   * retrieve general informations and a list of services and their widgets awailable in the dashboard\n   * @param {express.Request} req\n   * @param {express.Response} res\n   * @returns\n   */\n  async get(req: express.Request, res: express.Response) {\n    let ip: string = req.ip;\n    ip = ip.split(\":\")[3];\n\n    return res.status(200).json({\n      client: {\n        host: ip,\n      },\n      server: {\n        current_time: moment().unix(),\n        services: [\n          {\n            name: \"weather\",\n            display_name: \"Weather\",\n            api_url: \"http://api.openweathermap.org\",\n            params: [\n              {\n                name: \"api_key\",\n                type: \"string\",\n              },\n            ],\n            widgets: [\n              {\n                name: \"city_temperature\",\n                display_name: \"City temperature\",\n                description: \"Display temperature for a city\",\n                params: [\n                  {\n                    name: \"city\",\n                    type: \"string\",\n                  },\n                ],\n              },\n              {\n                name: \"city_weather\",\n                display_name: \"City weather\",\n                description: \"Display weather for a city\",\n                params: [\n                  {\n                    name: \"city\",\n                    type: \"string\",\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: \"currency\",\n            display_name: \"Currency Converter\",\n            api_url: \"https://freecurrencyapi.net/\",\n            params: [\n              {\n                name: \"api_key\",\n                type: \"string\",\n              },\n            ],\n            widgets: [\n              {\n                name: \"currency_converter\",\n                display_name: \"Currency Converter\",\n                description: \"Display the exchange rate of a currency\",\n                params: [\n                  {\n                    name: \"from\",\n                    type: \"string\",\n                  },\n                  {\n                    name: \"to\",\n                    type: \"string\",\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: \"nasa\",\n            display_name: \"NASA\",\n            api_url: \"https://api.nasa.gov/\",\n            params: [\n              {\n                name: \"api_key\",\n                type: \"string\",\n              },\n            ],\n            widgets: [\n              {\n                name: \"apod\",\n                display_name: \"Astronomy Picture of the Day\",\n                description: \"Display the Astronomy Picture of the Day\",\n                params: [\n                  {\n                    name: \"date\",\n                    type: \"string\",\n                  },\n                ],\n              },\n              {\n                name: \"curiosity_image\",\n                display_name: \"Curiosity Rover Image\",\n                description: \"Display an image from a curiosity\",\n                params: [\n                  {\n                    name: \"date\",\n                    type: \"string\",\n                  },\n                  {\n                    name: \"camera\",\n                    type: \"string\",\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: \"intra_epitech\",\n            display_name: \"Intra Epitech\",\n            params: [],\n            api_url: \"https://intra.epitech.eu/admin/autolog\",\n            widgets: [\n              {\n                name: \"intra_epitech_profile\",\n                display_name: \"Profile\",\n                description: \"Display the profile of an intra epitech user\",\n                params: [\n                  {\n                    name: \"autologin\",\n                    type: \"string\",\n                  },\n                ],\n              },\n              {\n                name: \"intra_epitech_partners\",\n                display_name: \"Partners\",\n                description: \"Display the partners of an intra epitech user\",\n                params: [\n                  {\n                    name: \"autologin\",\n                    type: \"string\",\n                  },\n                ],\n              },\n              {\n                name: \"intra_epitech_notifications\",\n                display_name: \"Notifications\",\n                description:\n                  \"Display the notifications of an intra epitech user\",\n                params: [\n                  {\n                    name: \"autologin\",\n                    type: \"string\",\n                  },\n                ],\n              },\n              {\n                name: \"intra_epitech_grades\",\n                display_name: \"Grades\",\n                description: \"Display the grades of an intra epitech user\",\n                params: [\n                  {\n                    name: \"autologin\",\n                    type: \"string\",\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: \"epitech_doors\",\n            display_name: \"Epitech Doors\",\n            params: [\n              {\n                name: \"intra_autologin\",\n                type: \"string\",\n              },\n            ],\n            api_url: \"https://intra.epitech.eu/admin/autolog\",\n            widgets: [\n              {\n                name: \"epitech_doors_open_door\",\n                display_name: \"Open door\",\n                description: \"Open the door in epitech montpellier\",\n                params: [\n                  {\n                    name: \"door_name\",\n                    type: \"string\",\n                  },\n                  {\n                    name: \"intra_autologin\",\n                    type: \"string\",\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: \"office\",\n            display_name: \"Office 365\",\n            params: [\n              {\n                name: \"office_token\",\n                type: \"string\",\n              },\n            ],\n            api_url: \"https://graph.microsoft.com/v1.0/me/\",\n            widgets: [\n              {\n                name: \"office_calendar_events\",\n                display_name: \"Calendar events\",\n                description: \"Display the calendar events of an office user\",\n                params: [\n                  {\n                    name: \"start_date\",\n                    type: \"string\",\n                  },\n                  {\n                    name: \"end_date\",\n                    type: \"string\",\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: \"league_of_legends\",\n            display_name: \"League of Legends\",\n            params: [\n              {\n                name: \"api_key\",\n                type: \"string\",\n              },\n            ],\n            api_url: \"\",\n            widgets: [\n              {\n                name: \"league_of_legends_summoner_profile\",\n                display_name: \"Summoner profile\",\n                description:\n                  \"Display the summoner profile of a league of legends user\",\n                params: [\n                  {\n                    name: \"summoner_name\",\n                    type: \"string\",\n                  },\n                  {\n                    name: \"region\",\n                    type: \"string\",\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: \"gmail\",\n            display_name: \"Gmail\",\n            params: [\n              {\n                name: \"google_api_key\",\n                type: \"string\",\n              },\n            ],\n            api_url: \"google\",\n            widgets: [\n              {\n                name: \"gmail_inbox\",\n                display_name: \"Inbox\",\n                description: \"Display the inbox of a gmail user\",\n                params: [\n                  {\n                    name: \"max_results\",\n                    type: \"number\",\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: \"spotify\",\n            display_name: \"Spotify\",\n            params: [],\n            api_url: \"spoitfy.com\",\n            widgets: [\n              {\n                name: \"spotify_tracklist\",\n                display_name: \"Tracklist\",\n                description: \"Display the tracklist of a spotify playlist\",\n                params: [\n                  {\n                    name: \"playlist_id\",\n                    type: \"string\",\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      },\n    });\n  }\n}\n\nmodule.exports = new About();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Authentication.html":{"url":"classes/Authentication.html","title":"class - Authentication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Authentication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/OAuth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/OAuth.ts:12\n                \n            \n\n\n            \n                \n                    login / register a OAuth user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport { handleOAuthUsers } from './authActions';\n\nclass Authentication {\n    \n    /**\n     * login / register a OAuth user\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async post(req: express.Request, res: express.Response) {\n        return handleOAuthUsers(req, res);\n    }\n}\n\nmodule.exports = new Authentication();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Currency.html":{"url":"classes/Currency.html","title":"class - Currency","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Currency\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/currency.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getExchangeRate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getExchangeRate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getExchangeRate(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/currency.ts:12\n                \n            \n\n\n            \n                \n                    retrieve the current exchange rate for a given currency\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Currency {\n\n    /**\n     * retrieve the current exchange rate for a given currency\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getExchangeRate(req: express.Request, res: express.Response) {\n        try {\n            const { from, to, api_key } = req.body;\n            console.log(from, to);\n            const url: string = `https://freecurrencyapi.net/api/v2/latest?base_currency=${from}&apikey=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            let currency: number = response.data.data[to];\n            console.log('currency == ', currency);\n            return res.status(200).json({\n                \"base_currency\": from,\n                \"target_currency\": to,\n                \"rate\": currency\n            });\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Currency();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EpitechDoors.html":{"url":"classes/EpitechDoors.html","title":"class - EpitechDoors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EpitechDoors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/epitechDoors.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                openDoor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        openDoor\n                        \n                    \n                \n            \n            \n                \n                    \n                    openDoor(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/epitechDoors.ts:12\n                \n            \n\n\n            \n                \n                    opens the given door of the Epitech campus\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass EpitechDoors {\n\n    /**\n     * opens the given door of the Epitech campus\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async openDoor(req: express.Request, res: express.Response) {\n        try {\n            const { intra_autologin, door_name } = req.body;\n            let autoLogin: string = intra_autologin;\n            let url: string = \"\";\n\n            if (autoLogin.startsWith(\"https://intra.epitech.eu/\") == false) {\n                autoLogin = `https://intra.epitech.eu/${intra_autologin}`;\n            }\n            console.log('autologin == ', autoLogin);\n            url = `https://epi-logue.eu/api/doors_open?login=${autoLogin}&door_name=${door_name}`;\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(response.status).json(response.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n};\n\nexport default new EpitechDoors();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Gmail.html":{"url":"classes/Gmail.html","title":"class - Gmail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Gmail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/gmail.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getLastFiveMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getLastFiveMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLastFiveMail(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/gmail.ts:11\n                \n            \n\n\n            \n                \n                    retrieves the last max_results emails from the user's inbox\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport axios, { AxiosResponse } from \"axios\";\n\nclass Gmail {\n  /**\n   * retrieves the last max_results emails from the user's inbox\n   * @param {express.Request} req\n   * @param {express.Response} res\n   * @returns\n   */\n  async getLastFiveMail(req: express.Request, res: express.Response) {\n    try {\n      const { google_api_key, max_results } = req.body;\n      let mail: string = \"\";\n\n      let response: AxiosResponse = await axios({\n        method: \"GET\",\n        url: \"https://www.googleapis.com/oauth2/v1/userinfo?alt=json\",\n        headers: {\n          Authorization: `Bearer ${google_api_key}`,\n        },\n      });\n      mail = response.data.email;\n      const url = `https://gmail.googleapis.com/gmail/v1/users/${mail}/messages?maxResults=${max_results}`;\n      let response2: AxiosResponse = await axios({\n        method: \"GET\",\n        url: url,\n        headers: {\n          Authorization: `Bearer ${google_api_key}`,\n        },\n      });\n      let messageIds: Array = [];\n      response2.data.messages.forEach((message: any) => {\n        messageIds.push(message.id);\n      });\n      let messages: Array = [];\n      for (let i = 0; i  header.name === \"Subject\"\n            ).value,\n            date: response3.data.payload.headers.find(\n              (header: any) => header.name === \"Date\"\n            ).value,\n            from: response3.data.payload.headers.find(\n              (header: any) => header.name === \"From\"\n            ).value,\n            to: response3.data.payload.headers.find(\n              (header: any) => header.name === \"To\"\n            ).value,\n          };\n          messages.push(msg);\n        } catch (error) {\n          console.error(\"Test\", error.response.data);\n        }\n      }\n      return res.status(200).json({\n        success: true,\n        messages: messages,\n      });\n    } catch (error) {\n      console.log(error);\n      return res.status(500).json({\n        message: \"Internal Server Error\",\n      });\n    }\n  }\n}\n\nexport default new Gmail();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IntraEpitech.html":{"url":"classes/IntraEpitech.html","title":"class - IntraEpitech","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IntraEpitech\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/intraEpitech.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getGrades\n                            \n                            \n                                    Async\n                                getNotifications\n                            \n                            \n                                    Async\n                                getPartners\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getGrades\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGrades(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:131\n                \n            \n\n\n            \n                \n                    retrieves the user's grades\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNotifications(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:94\n                \n            \n\n\n            \n                \n                    retrieves user's notifications\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPartners\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPartners(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:56\n                \n            \n\n\n            \n                \n                    retrieves the user's partners (the people with whom the user did a project with)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:13\n                \n            \n\n\n            \n                \n                    retrieves the user's profile informations (gpa, credits, profile picture ...)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\nimport { IntraEpitechUser } from '../../database/interfaces';\n\nclass IntraEpitech {\n\n    /**\n     * retrieves the user's profile informations (gpa, credits, profile picture ...)\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getProfile(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n            url = `https://intra.epitech.eu/${autoLogin}/user?format=json`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            const user: IntraEpitechUser = {\n                login: response.data['login'],\n                firstname: response.data['firstname'],\n                lastname: response.data['lastname'],\n                profilePicture: response.data['picture'],\n                promo: response.data['promo'],\n                location: response.data['groups'][0]['name'],\n                semesterCode: response.data['semester_code'],\n                credits: response.data['credits'],\n                gpa: response.data['gpa'][0]['gpa'],\n            };\n            return res.status(200).json(user);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    /**\n     * retrieves the user's partners (the people with whom the user did a project with)\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getPartners(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n    \n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n    \n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: `https://intra.epitech.eu/${autoLogin}/user?format=json`\n            });\n            const login: string = response.data['login'];\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/binome/?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response2.data['binomes']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n\n    /**\n     * retrieves user's notifications\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getNotifications(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;            \n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: `https://intra.epitech.eu/${autoLogin}/user?format=json`\n            });\n            const login: string = response.data['login'];\n\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/notification/message?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(200).json(response2.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    /**\n     * retrieves the user's grades\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getGrades(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                autoLogin = autoLogin.substring(25);\n            }\n            url = `https://intra.epitech.eu/${autoLogin}/user?format=json`;\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            const login: string = response.data['login'];\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/notes?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(200).json(response2.data['modules']);            \n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new IntraEpitech();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IntraEpitechUser.html":{"url":"interfaces/IntraEpitechUser.html","title":"interface - IntraEpitechUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IntraEpitechUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            credits\n                                        \n                                \n                                \n                                        \n                                            firstname\n                                        \n                                \n                                \n                                        \n                                            gpa\n                                        \n                                \n                                \n                                        \n                                            lastname\n                                        \n                                \n                                \n                                        \n                                            location\n                                        \n                                \n                                \n                                        \n                                            login\n                                        \n                                \n                                \n                                        \n                                            profilePicture\n                                        \n                                \n                                \n                                        \n                                            promo\n                                        \n                                \n                                \n                                        \n                                            semesterCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        credits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        credits:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gpa\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gpa:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        location:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profilePicture\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profilePicture:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        promo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        promo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        semesterCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        semesterCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeagueOfLegends.html":{"url":"classes/LeagueOfLegends.html","title":"class - LeagueOfLegends","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeagueOfLegends\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/leagueoflegends.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/leagueoflegends.ts:13\n                \n            \n\n\n            \n                \n                    retrieves the summoner profile informations (user's icon, level, name, ranked game's rank ...)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import axios, { AxiosResponse } from 'axios';\nimport express from 'express';\nimport { LeagueOfLegendsProfileData, LeagueOfLegendsGameData } from '../../database/interfaces';\n\nclass LeagueOfLegends {\n\n    /**\n     * retrieves the summoner profile informations (user's icon, level, name, ranked game's rank ...)\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getUserProfile(req: express.Request, res: express.Response) {\n        try {\n            const { api_key, summoner_name, region } = req.body;\n            let summoner_id: string = '';\n            let profileIconURL: string = '';\n            let summonerLevel: number = 0;\n            let summonerName: string = '';\n            let gameData: Array = [];\n            \n            const firstURL = `https://${region}.api.riotgames.com/lol/summoner/v4/summoners/by-name/${summoner_name}?api_key=${api_key}`;\n            \n            console.debug(\"firstURL: \", firstURL);\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: firstURL,\n            });\n            if (response.status === 200) {\n                summoner_id = response.data['id'];\n                profileIconURL = `https://ddragon.leagueoflegends.com/cdn/11.23.1/img/profileicon/${response.data['profileIconId']}.png`;\n                summonerLevel = response.data['summonerLevel'];\n                summonerName = response.data['name'];\n            }\n            const secondURL = `https://${region}.api.riotgames.com/lol/league/v4/entries/by-summoner/${summoner_id}?api_key=${api_key}`;\n            console.debug(\"secondURL: \", secondURL);\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: secondURL,\n            });\n            if (response2.status == 200) {\n                if (response2.data.length > 0) {\n                    gameData = response2.data.map((data: any) => {\n                        return {\n                            queueType: data.queueType,\n                            tier: data.tier,\n                            rank: data.rank,\n                            wins: data.wins,\n                            losses: data.losses,\n                            leaguePoints: data.leaguePoints,\n                            winRate: data.wins / (data.wins + data.losses),\n                        };\n                    });\n                    if (gameData.length == 1 && gameData[0].queueType == 'RANKED_SOLO_5x5') {\n                        gameData[1] = {\n                            queueType: 'RANKED_FLEX_SR',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        };\n                    }\n                    else if (gameData.length == 1 && gameData[0].queueType == 'RANKED_FLEX_SR') {\n                        gameData[1] = {\n                            queueType: 'RANKED_SOLO_5x5',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        };\n                    }\n                }\n                else {\n                    gameData = [\n                        {\n                            queueType: 'RANKED_FLEX_SR',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        },\n                        {\n                            queueType: 'RANKED_SOLO_5x5',\n                            tier: 'UNRANKED',\n                            rank: 'UNRANKED',\n                            wins: 0,\n                            losses: 0,\n                            leaguePoints: 0,\n                            winRate: 0,\n                        },\n                    ];\n                }\n                console.debug(\"setting profile\");\n                let profile: LeagueOfLegendsProfileData = {\n                    summonerName,\n                    summonerLevel,\n                    profileIconURL,\n                    gameData,\n                };\n                console.debug(\"profile: \", profile);\n                return res.status(200).json(profile);\n            }\n            else {\n                return res.status(response2.status).json({\n                    error: 'Error getting user profile',\n                });\n            }\n        } catch (error) {\n            console.log(error);\n            res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new LeagueOfLegends();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LeagueOfLegendsGameData.html":{"url":"interfaces/LeagueOfLegendsGameData.html","title":"interface - LeagueOfLegendsGameData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LeagueOfLegendsGameData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            leaguePoints\n                                        \n                                \n                                \n                                        \n                                            losses\n                                        \n                                \n                                \n                                        \n                                            queueType\n                                        \n                                \n                                \n                                        \n                                            rank\n                                        \n                                \n                                \n                                        \n                                            tier\n                                        \n                                \n                                \n                                        \n                                            winRate\n                                        \n                                \n                                \n                                        \n                                            wins\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        leaguePoints\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leaguePoints:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        losses\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        losses:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queueType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queueType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rank\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rank:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tier\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tier:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        winRate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        winRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wins\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        wins:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LeagueOfLegendsProfileData.html":{"url":"interfaces/LeagueOfLegendsProfileData.html","title":"interface - LeagueOfLegendsProfileData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LeagueOfLegendsProfileData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            gameData\n                                        \n                                \n                                \n                                        \n                                            profileIconURL\n                                        \n                                \n                                \n                                        \n                                            summonerLevel\n                                        \n                                \n                                \n                                        \n                                            summonerName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        gameData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gameData:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileIconURL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profileIconURL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        summonerLevel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        summonerLevel:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        summonerName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        summonerName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Login.html":{"url":"classes/Login.html","title":"class - Login","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Login\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/login.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/login.ts:14\n                \n            \n\n\n            \n                \n                    login a basic user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport { getUsers, updateInfos } from \"../../database/databaseActions\";\nimport { UserInformations } from \"../../database/interfaces\";\nimport jwt from 'jsonwebtoken';\nimport moment from \"moment\";\n\nclass Login {\n    /**\n     * login a basic user\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async post(req: express.Request, res: express.Response) {\n        const { mail, password } = req.body;\n\n        if (!mail || !password) {\n            return res.status(400).json({\n                valid: false,\n                message: \"mail and password are required\"\n            });\n        }\n\n        const user: UserInformations = {\n            mail: mail,\n            google_mail: undefined,\n            google_token: undefined,\n            facebook_mail: undefined,\n            facebook_token: undefined,\n            apple_mail: undefined,\n            apple_token: undefined,\n            office_mail: undefined,\n            office_token: undefined,\n            username: undefined,\n            password: password\n        };\n\n        const expiresIn: number = Number(process.env.EXPIRE_TIME) || 60 * 60;\n        const payload = {\n            mail: mail\n        };\n        const newToken: string = jwt.sign(\n            payload,\n            process.env.JWT_SECRET,\n            { expiresIn: expiresIn }\n        );\n\n        await getUsers(user, async (err: any, result: any) => {\n            if (err) {\n                return res.status(500).json({\n                    valid: false,\n                    message: err\n                });\n            } else {\n                let _result = result;\n                if (result.length === 0) {\n                    return res.status(400).json({\n                        valid: false,\n                        message: \"mail or password is incorrect\"\n                    });\n                } else {\n                    _result['token'] = newToken;\n                    _result['token_created_at'] = moment().format('YYYY-MM-DD HH:mm:ss');\n                    await updateInfos(['token', 'token_created_at'], [newToken, moment().format('YYYY-MM-DD HH:mm:ss')], 'mail', mail, (err: any, result: any) => {\n                        if (err) {\n                            return res.status(500).json({\n                                valid: false,\n                                message: err\n                            });\n                        } else {\n                            return res.status(200).json({ error: false, message: \"user logged in\", token: newToken, expiresIn: expiresIn, result: _result });\n                        }\n                    });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Login();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Nasa.html":{"url":"classes/Nasa.html","title":"class - Nasa","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Nasa\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/nasa.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getNasaDayImage\n                            \n                            \n                                    Async\n                                getNasaRoverImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNasaDayImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNasaDayImage(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/nasa.ts:11\n                \n            \n\n\n            \n                \n                    retrieves the image of the day from the nasa API\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        express request\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        express response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNasaRoverImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNasaRoverImage(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/nasa.ts:34\n                \n            \n\n\n            \n                \n                    retrieves the curiosity rover image of the day from the nasa API\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        express request\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        express response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport axios, { AxiosResponse } from \"axios\";\n\nclass Nasa {\n    /**\n     * retrieves the image of the day from the nasa API\n     * @param req express request\n     * @param res express response\n     * @returns\n     */\n    async getNasaDayImage(req: express.Request, res: express.Response) {\n        try {\n            const { date, api_key } = req.body;\n            const url = `https://api.nasa.gov/planetary/apod?api_key=${api_key}&date=${date}`;\n\n            let response: AxiosResponse = await axios({\n                method: \"get\",\n                url: url\n            });\n            return res.status(200).json(response.data);\n        } catch (error) {\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    /**\n     * retrieves the curiosity rover image of the day from the nasa API\n     * @param req express request\n     * @param res express response\n     * @returns \n     */\n    async getNasaRoverImage(req: express.Request, res: express.Response) {\n        try {\n            const { date, camera, api_key } = req.body;\n            const url = `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=${date}&camera=${camera}&api_key=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: \"get\",\n                url: url\n            });\n            let data = response.data.photos;\n            let photo: any = data[0] ? data[0] : {};\n\n            return res.status(200).json(photo);\n        } catch (error) {\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Nasa();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Office.html":{"url":"classes/Office.html","title":"class - Office","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Office\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/office.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCalendarEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCalendarEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCalendarEvents(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/office.ts:12\n                \n            \n\n\n            \n                \n                    retrieves the office calendar events from start to end date from the office api\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Office {\n\n    /**\n     * retrieves the office calendar events from start to end date from the office api\n     * @param {express.Request} req\n     * @param {express.Response} res \n     * @returns \n     */\n    async getCalendarEvents(req: express.Request, res: express.Response) {\n        try {\n            const { start_date, office_token, end_date } = req.body;\n            \n            const url = `https://graph.microsoft.com/v1.0/me/calendarview?startdatetime=${start_date}&enddatetime=${end_date}`;\n    \n            let response: AxiosResponse = await axios({\n                method: 'GET',\n                url,\n                headers: {\n                    'Authorization': `Bearer ${office_token}`\n                }\n            });\n            return res.status(200).json(response.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Office();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/profile/profile.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/profile/profile.ts:13\n                \n            \n\n\n            \n                \n                    retrieves the user informations\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport { getRow, getUsers } from '../../database/databaseActions';\n\nclass Profile {\n\n    /**\n     * retrieves the user informations\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async get(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n        await getRow('token', token, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                return res.status(500).json({ error: false, message: \"internal server error\" });\n            } else {\n                if (result.length === 0) {\n                    return res.status(404).json({ error: false, message: \"user not found\" });\n                } else {\n                    let rslt = result[0];\n                    let user = {\n                        mail: rslt['mail'],\n                        google_mail: rslt['google_mail'],\n                        facebook_mail: rslt['facebook_mail'],\n                        outlook_mail: rslt['outlook_mail'],\n                        apple_mail: rslt['apple_mail'],\n                        office_mail: rslt['office_mail'],\n                    };\n\n                    return res.status(200).json({ error: true, message: \"user found\", result: user });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Profile();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileUpdate.html":{"url":"classes/ProfileUpdate.html","title":"class - ProfileUpdate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileUpdate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/profile/profileUpdate.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/profile/profileUpdate.ts:13\n                \n            \n\n\n            \n                \n                    update a user informations if the given token is valid\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { updateUserInformations } from \"./profileActions\";\n\nclass ProfileUpdate {\n\n    /**\n     * update a user informations if the given token is valid\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async patch(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n        await updateUserInformations(req, res);\n    }\n}\n\nmodule.exports = new ProfileUpdate();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Register.html":{"url":"classes/Register.html","title":"class - Register","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Register\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/register.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/register.ts:13\n                \n            \n\n\n            \n                \n                    register a basic user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\"\nimport { UserInformations } from \"../../database/interfaces\";\nimport { registerBasicUser } from \"./registerActions\";\n\nclass Register {\n\n    /**\n     * register a basic user\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async post(req: express.Request, res: express.Response) {\n        const { mail, password } = req.body;\n\n        const infos: UserInformations = {\n            mail: mail,\n            google_mail: undefined,\n            google_token: undefined,\n            facebook_mail: undefined,\n            facebook_token: undefined,\n            apple_mail: undefined,\n            apple_token: undefined,\n            office_mail: undefined,\n            office_token: undefined,\n            username: undefined,\n            password: password,\n        };\n        let result = await registerBasicUser(infos);\n\n        if (result.error === true) {\n            return res.status(500).json({\n                error: true,\n                message: result.message,\n            });\n        }\n        if (result.error === false && result.message === \"user already exists\") {\n            return res.status(403).json({ error: true, message: result.message });\n        }\n        return res.status(200).json({ error: false, message: result.message, result: result.result });\n    }\n}\n\nmodule.exports = new Register();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Temperature.html":{"url":"classes/Temperature.html","title":"class - Temperature","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Temperature\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/temperature.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTemperature\n                            \n                            \n                                    Async\n                                getWeather\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTemperature\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTemperature(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/temperature.ts:12\n                \n            \n\n\n            \n                \n                    retrieves the temperature of a city\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getWeather\n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeather(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/temperature.ts:36\n                \n            \n\n\n            \n                \n                    retrieves the weather of a city\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Temperature {\n\n    /**\n     * retrieves the temperature of a city\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getTemperature(req: express.Request, res: express.Response) {\n        try {\n            const { city, api_key } = req.body;\n            const url: string = `http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response.data['main']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    /**\n     * retrieves the weather of a city\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async getWeather(req: express.Request, res: express.Response) {\n        try {\n            const { city, api_key } = req.body;\n            const url: string = `http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response.data['weather']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n};\n\nexport default new Temperature();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Token.html":{"url":"classes/Token.html","title":"class - Token","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Token\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/token.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/token.ts:16\n                \n            \n\n\n            \n                \n                    check if the given token is valid\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/token.ts:52\n                \n            \n\n\n            \n                \n                    generate a new token if the given one is valid\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport moment from 'moment';\nimport { updateInfos } from '../../database/databaseActions';\nimport Utils from '../../utils/utils';\nimport { checkToken } from './tokenAction';\n\nclass Token {\n\n    /**\n     * check if the given token is valid\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async get(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n        checkToken(token, (err: any, result: any) => {\n            if (err || result === [] || result === null || result === undefined || result.length === 0) {\n                return res.status(401).json({ valid: false, message: \"token invalid or not found\" });\n            } else {\n                let createdAt: moment.Moment = moment(result[0].token_created_at);\n                let now: moment.Moment = moment();\n                let diff: number = now.diff(createdAt, 'seconds');\n                if (diff  {\n            if (err) {\n                return res.status(500).json({ valid: false, message: \"internal server error\" });\n            } else {\n                if (result.affectedRows === 0) {\n                    return res.status(401).json({ valid: false, message: \"token invalid or not found\" });\n                } else {\n                    return res.status(200).json({ valid: true, message: \"token valid\", expiresIn: expiresIn, token: newToken, result: result.result });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Token();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserInformations.html":{"url":"interfaces/UserInformations.html","title":"interface - UserInformations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserInformations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apple_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            apple_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            facebook_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            facebook_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            google_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            google_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            office_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            office_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apple_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apple_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        apple_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apple_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        facebook_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        facebook_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        google_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        google_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        office_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        office_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        office_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        office_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n\nexport interface LeagueOfLegendsGameData {\n    queueType: string,\n    tier: string,\n    rank: string,\n    wins: number,\n    losses: number,\n    leaguePoints: number,\n    winRate: number,\n};\n\nexport interface LeagueOfLegendsProfileData {\n    summonerName: string,\n    summonerLevel: number,\n    profileIconURL: string,\n    gameData: Array;    \n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Utils.html":{"url":"classes/Utils.html","title":"class - Utils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Utils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/utils.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRandomString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRandomString\n                        \n                    \n                \n            \n            \n                \ngetRandomString(length: number)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/utils.ts:7\n                \n            \n\n\n            \n                \n                    generate a random string with a length equal to the given length argument\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the length of the generated string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        a random string of length {length}\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        class Utils {\n    /**\n     * generate a random string with a length equal to the given length argument\n     * @param {number} length the length of the generated string \n     * @returns {string} a random string of length {length}\n     */\n    getRandomString(length: number): string {\n        let text: string = \"\";\n        let possible: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!$&#@.\";\n        for (let i: number = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Widget.html":{"url":"classes/Widget.html","title":"class - Widget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Widget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/widget.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widget.ts:20\n                \n            \n\n\n            \n                \n                    handle widgets requests\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport Currency from './currency';\nimport Nasa from './nasa';\nimport Temperature from './temperature';\nimport IntraEpitech from './intraEpitech';\nimport Office from './office';\nimport leagueoflegends from './leagueoflegends';\nimport EpitechDoors from './epitechDoors';\nimport Gmail from './gmail';\n\nclass Widget {\n\n    /**\n     * handle widgets requests\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async post(req: express.Request, res: express.Response) {\n        let valid: boolean = true;\n        const type: string = req.params.type;\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n\n        switch (type) {\n            case 'currency_converter':\n                return await Currency.getExchangeRate(req, res);\n            case 'city_temperature':\n                return await Temperature.getTemperature(req, res);\n            case 'city_weather':\n                return await Temperature.getWeather(req, res);\n            case 'apod':\n                return await Nasa.getNasaDayImage(req, res);\n            case 'curiosity_image':\n                return await Nasa.getNasaRoverImage(req, res);\n            case 'intra_epitech_profile':\n                return await IntraEpitech.getProfile(req, res);\n            case 'intra_epitech_partners':\n                return await IntraEpitech.getPartners(req, res);\n            case 'intra_epitech_notifications':\n                return await IntraEpitech.getNotifications(req, res);\n            case 'epitech_doors_open_door':\n                return await EpitechDoors.openDoor(req, res);\n            case 'intra_epitech_grades':\n                return await IntraEpitech.getGrades(req, res);\n            case 'office_calendar_events':\n                return await Office.getCalendarEvents(req, res);\n            case 'league_of_legends_summoner_profile':\n                return await leagueoflegends.getUserProfile(req, res);\n            case 'gmail_inbox':\n                return await Gmail.getLastFiveMail(req, res);\n            default:\n                return res.status(404).json({ error: true, message: \"widget not found\" });\n        }\n    }\n}\n\nmodule.exports = new Widget();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WidgetsDB.html":{"url":"classes/WidgetsDB.html","title":"class - WidgetsDB","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WidgetsDB\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/widgetsdb.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widgetsdb.ts:13\n                \n            \n\n\n            \n                \n                    retrieves the user's widgets from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widgetsdb.ts:79\n                \n            \n\n\n            \n                \n                    Update the user's widgets in database if it existed before, otherwise create a new one\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport { getWidgetsByUserId, getUserByToken, addWidget, updateWidget } from '../../database/databaseActions';\nimport jwt from 'jsonwebtoken';\n\nclass WidgetsDB {\n\n    /**\n     * retrieves the user's widgets from the database\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async get(req: express.Request, res: express.Response) {\n        try {\n            let token: string = req.headers.authorization;\n\n            if (!token) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token not found\"\n                });\n            }\n            token = token.split(\" \")[1];\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n\n            if (!decoded) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token invalid\"\n                });\n            }\n            await getUserByToken(token, async(err: any, user: any) => {\n                if (err) {\n                    console.debug(err);\n                    return res.status(500).json({\n                        valid: false,\n                        message: \"error\"\n                    });\n                } else {\n                    if (user.length === 0) {\n                        return res.status(404).json({\n                            valid: false,\n                            message: \"user not found\"\n                        });\n                    } else {\n                        let userId = user[0]['id'];\n                        await getWidgetsByUserId(userId, (err: any, result: any) => {\n                            if (err) {\n                                console.debug(err);\n                                return res.status(500).json({\n                                    valid: false,\n                                    message: \"error\"\n                                });\n                            }\n                            return res.status(200).json({\n                                valid: true,\n                                message: \"success\",\n                                data: result\n                            });\n                        });\n                    }\n                }\n            });\n        } catch (error) {\n            console.log(error);\n            return res.status(401).json({\n                valid: false,\n                message: \"token invalid\"\n            });\n        }\n    }\n\n    /**\n     * Update the user's widgets in database if it existed before, otherwise create a new one\n     * @param {express.Request} req \n     * @param {express.Response} res \n     * @returns \n     */\n    async patch(req: express.Request, res: express.Response) {\n        try {\n            let token: string = req.headers.authorization;\n            const { widgets } = req.body;            \n\n            if (!token) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token not found\"\n                });\n            }\n            token = token.split(\" \")[1];\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n\n            if (!decoded) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token invalid\"\n                });\n            }\n            await getUserByToken(token, async(err: any, user: any) => {\n                if (err) {\n                    console.debug(err);\n                    return res.status(500).json({\n                        valid: false,\n                        message: \"error\"\n                    });\n                } else {\n                    if (user.length === 0) {\n                        return res.status(404).json({\n                            valid: false,\n                            message: \"user not found\"\n                        });\n                    } else {\n                        let userId = user[0]['id'];\n                        await getWidgetsByUserId(userId, async(err: any, result: any) => {\n                            if (err) {\n                                console.debug(err);\n                                return res.status(500).json({\n                                    valid: false,\n                                    message: \"error\"\n                                });\n                            }\n                            if (result.length === 0) {\n                                await addWidget(userId, widgets, (err: any, result: any) => {\n                                    if (err) {\n                                        console.debug(err);\n                                        return res.status(500).json({\n                                            valid: false,\n                                            message: \"error\"\n                                        });\n                                    }\n                                    return res.status(200).json({\n                                        valid: true,\n                                        message: \"success\",\n                                        data: result\n                                    });\n                                });\n                            }\n                            else {\n                                await updateWidget(userId, widgets, (err: any, result: any) => {\n                                    if (err) {\n                                        console.debug(err);\n                                        return res.status(500).json({\n                                            valid: false,\n                                            message: \"error\"\n                                        });\n                                    }\n                                    return res.status(200).json({\n                                        valid: true,\n                                        message: \"success\",\n                                        data: result\n                                    });\n                                });\n                            }\n                        });\n                    }\n                }\n            }\n        )}\n        catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                valid: false,\n                message: \"error\"\n            });\n        }\n    }\n};\n\nmodule.exports = new WidgetsDB();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/database/database.ts\n            \n            variable\n            db\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            addUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            addWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            deleteWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getRow\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getUserByToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getWidgetsByUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateInfos\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateUserAuthToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            IntraEpitechUser\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            LeagueOfLegendsGameData\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            LeagueOfLegendsProfileData\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            UserInformations\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            app\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            server\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/request_handler.ts\n            \n            function\n            requestHandler\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/request_handler.ts\n            \n            variable\n            TOKEN_WL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes.ts\n            \n            function\n            addRoute\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/about/about.ts\n            \n            class\n            About\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/auth/OAuth.ts\n            \n            class\n            Authentication\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/auth/authActions.ts\n            \n            variable\n            handleOAuthUsers\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/routes/auth/authActions.ts\n            \n            variable\n            handleOAuthUsersAction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/routes/auth/login.ts\n            \n            class\n            Login\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/auth/register.ts\n            \n            class\n            Register\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/auth/registerActions.ts\n            \n            variable\n            registerBasicUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/routes/auth/token.ts\n            \n            class\n            Token\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/routes/auth/tokenAction.ts\n            \n            variable\n            checkToken\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/routes/profile/profile.ts\n            \n            class\n            Profile\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/profile/profileActions.ts\n            \n            variable\n            updateUserInformations\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/routes/profile/profileUpdate.ts\n            \n            class\n            ProfileUpdate\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/currency.ts\n            \n            class\n            Currency\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/epitechDoors.ts\n            \n            class\n            EpitechDoors\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/gmail.ts\n            \n            class\n            Gmail\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/intraEpitech.ts\n            \n            class\n            IntraEpitech\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/routes/widgets/leagueoflegends.ts\n            \n            class\n            LeagueOfLegends\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/nasa.ts\n            \n            class\n            Nasa\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/routes/widgets/office.ts\n            \n            class\n            Office\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/temperature.ts\n            \n            class\n            Temperature\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/routes/widgets/widget.ts\n            \n            class\n            Widget\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/widgetsdb.ts\n            \n            class\n            WidgetsDB\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/utils/utils.ts\n            \n            class\n            Utils\n            \n                50 %\n                (1/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            cors : ^2.8.5\n        \n            dotenv : ^10.0.0\n        \n            express : ^4.17.1\n        \n            jsonwebtoken : ^8.5.1\n        \n            moment : ^2.29.1\n        \n            mysql2 : ^2.3.3-rc.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addRoute   (src/.../routes.ts)\n                        \n                        \n                            requestHandler   (src/.../request_handler.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addRoute\n                        \n                    \n                \n            \n            \n                \naddRoute(endpoint: string, service: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    service\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/request_handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        requestHandler\n                        \n                    \n                \n            \n            \n                \nrequestHandler(req, res, next)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    18 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addUsers   (src/.../databaseActions.ts)\n                        \n                        \n                            addWidget   (src/.../databaseActions.ts)\n                        \n                        \n                            app   (src/.../index.ts)\n                        \n                        \n                            checkToken   (src/.../tokenAction.ts)\n                        \n                        \n                            db   (src/.../database.ts)\n                        \n                        \n                            deleteWidget   (src/.../databaseActions.ts)\n                        \n                        \n                            getRow   (src/.../databaseActions.ts)\n                        \n                        \n                            getUserByToken   (src/.../databaseActions.ts)\n                        \n                        \n                            getUsers   (src/.../databaseActions.ts)\n                        \n                        \n                            getWidgetsByUserId   (src/.../databaseActions.ts)\n                        \n                        \n                            handleOAuthUsers   (src/.../authActions.ts)\n                        \n                        \n                            handleOAuthUsersAction   (src/.../authActions.ts)\n                        \n                        \n                            registerBasicUser   (src/.../registerActions.ts)\n                        \n                        \n                            routes   (src/.../routes.ts)\n                        \n                        \n                            server   (src/.../index.ts)\n                        \n                        \n                            TOKEN_WL   (src/.../request_handler.ts)\n                        \n                        \n                            updateInfos   (src/.../databaseActions.ts)\n                        \n                        \n                            updateUserAuthToken   (src/.../databaseActions.ts)\n                        \n                        \n                            updateUserInformations   (src/.../profileActions.ts)\n                        \n                        \n                            updateWidget   (src/.../databaseActions.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/databaseActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, callback: Function) => {\n    let query: string = \"INSERT into users (\";\n    let wasFound: boolean = false;\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"mail, password) VALUES ('\"\n                + infos.mail + \"', '\" + infos.password + \"');\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"google_mail, google_token) VALUES ('\"\n                + infos.google_mail + \"', '\" + infos.google_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"facebook_mail, facebook_token) VALUES ('\"\n                + infos.facebook_mail + \"', '\" + infos.facebook_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"apple_mail, apple_token) VALUES ('\"\n                + infos.apple_mail + \"', '\" + infos.apple_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"office_mail, office_token) VALUES ('\"\n                + infos.office_mail + \"', '\" + infos.office_token + \"');\";\n            wasFound = true;\n        }\n\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widget: string, callback: Function) => {\n    let query: string = \"INSERT INTO widgets (user_id, data) VALUES ('\" + userId + \"', '\" + JSON.stringify(widget) + \"');\";\n\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widgetId: string, callback: Function) => {\n    let query: string = \"DELETE FROM widgets WHERE user_id = '\" + userId + \"' AND id = '\" + widgetId + \"';\";\n\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRow\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (row: string, value: string, callback: Function) => {\n    let query: string = \"SELECT * FROM users WHERE \" + row + \" = '\" + value + \"' LIMIT 1;\";\n\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserByToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (token: string, callback: Function) => {\n    let query: string = \"SELECT * FROM users WHERE token = '\" + token + \"';\";\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, callback: Function) => {\n    let wasFound: boolean = false;\n    let query: string = \"SELECT * FROM users WHERE \";\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"mail = '\" + infos.mail + \"' AND password = '\" + infos.password + \"';\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"google_mail = '\" + infos.google_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"facebook_mail = '\" + infos.facebook_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"apple_mail = '\" + infos.apple_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"office_mail = '\" + infos.office_mail + \"';\";\n            wasFound = true;\n        }\n\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getWidgetsByUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, callback: Function) => {\n    let query: string = \"SELECT * FROM widgets WHERE user_id = '\" + userId + \"';\";\n\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateInfos\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n    rows: Array, newValues: Array,\n    whereRow: string, whereValue: string, callback: Function) => {\n    let query: string = 'UPDATE users SET ';\n\n    for (let i = 0; i  {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n            \n                \n                    updates a row in the users table\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserAuthToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, jwtToken: string, callback: Function) => {\n    let query: string = \"UPDATE users SET \";\n    let wasFound: boolean = false;\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE mail = '\" + infos.mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE google_mail = '\" + infos.google_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE facebook_mail = '\" + infos.facebook_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE apple_mail = '\" + infos.apple_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE office_mail = '\" + infos.office_mail + \"';\";\n            wasFound = true;\n        }\n\n        db.query(query, (err: any, result: any) => {\n            if (err || result.affectedRows === 0) {\n                callback(err);\n            } else {\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widget: string, callback: Function) => {\n    let query: string = \"UPDATE widgets SET data = '\" + widget + \"' WHERE user_id = '\" + userId + \"';\";\n\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n\n    src/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        app\n                        \n                    \n                \n            \n                \n                    \n                        Default value : express()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"http\").Server(app)\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/tokenAction.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        checkToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (token: string, callback: Function) => {\n    const queryString: string = \"SELECT * FROM users WHERE token = '\" + token + \"' LIMIT 1;\";\n    db.query(queryString, (err: any, result: any) => {\n        if (err) {\n            callback(err);\n        } else {\n            callback(null, result);\n        }\n    });\n}\n                    \n                \n\n            \n                \n                    check if the given token correspond to a user's token\n\n                \n            \n\n        \n    \n\n    src/database/database.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mysql.createConnection({\n    host: process.env.MY_SQL_HOST,\n    user: process.env.MY_SQL_USER,\n    password: process.env.MY_SQL_PASSWORD,\n    database: process.env.MY_SQL_DATABASE,\n})\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/authActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleOAuthUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (req: express.Request, res: express.Response) => {\n    try {\n        const type: string = req.params.type;\n        const { access_token } = req.body;\n        let user: { type: string, userJson: any } = { type: '', userJson: {} };\n        let response: AxiosResponse;\n\n        switch (type) {\n            case 'google_user':\n                console.log('bearer token == ', access_token);\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.debug(\"response == \", response.data);\n                let googleUser = response.data;\n                user = { type: 'google_user', userJson: googleUser };\n                break;\n            case 'facebook_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.facebook.com/me/?fields=id,name,email',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let facebookUser = response.data;\n                user = { type: 'facebook_user', userJson: facebookUser };\n                break;\n            case 'office_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.microsoft.com/v1.0/me',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.log(\"response == \", response.data);\n                let officeUser = response.data;\n                user = { type: 'office_user', userJson: officeUser };\n                break;\n            default:\n                return res.status(400).json({ message: 'Bad request' });\n        }\n\n        const infos: UserInformations = {\n            mail: undefined,\n            google_mail: (user.type === 'google_user') ? user.userJson.email : undefined,\n            google_token: (user.type === 'google_user') ? access_token : undefined,\n            facebook_mail: (user.type === 'facebook_user') ? user.userJson.email : undefined,\n            facebook_token: (user.type === 'facebook_user') ? access_token : undefined,\n            apple_mail: (user.type === 'apple_user') ? user.userJson.email : undefined,\n            apple_token: (user.type === 'apple_user') ? access_token : undefined,\n            office_mail: (user.type === 'office_user') ? user.userJson.mail : undefined,\n            office_token: (user.type === 'office_user') ? access_token : undefined,\n            username: undefined,\n            password: undefined,\n        };\n\n        const result = await handleOAuthUsersAction(infos);\n        if (result.error === true) {\n            return res.status(500).json({\n                error: result.error,\n                message: result.message,\n            });\n        }\n        if (result.message === \"user created\") {\n            return res.status(200).json({ error: false, message: \"user created\", result: result.result });\n        }\n        if (result.message === \"user already exists\") {\n            const expiresIn: number = Number(process.env.EXPIRE_TIME) || 60 * 60;\n            const payload = {\n                mail: (user.type === 'google_user') ? user.userJson.email : (user.type === 'facebook_user') ? user.userJson.email : (user.type === 'apple_user') ? user.userJson.email : (user.type === 'office_user') ? user.userJson.email : \"none\",\n            };\n            const token: string = jwt.sign(\n                payload,\n                process.env.JWT_SECRET,\n                { expiresIn: expiresIn }\n            );\n            await updateUserAuthToken(infos, token, (err: any, result: any) => {\n                if (err) {\n                    console.debug('[handleOAuthUsersAction] | error[updateUserAuthToken] = ', err);\n                } else {\n                    console.debug('[handleOAuthUsersAction] | result[updateUserAuthToken] = ', result);\n                }\n            });\n            return res.status(200).json({ error: false, message: \"user logged in\", expiresIn: expiresIn, token: token, result: result.result });\n        }\n    } catch (err) {\n        console.debug('[handleOAuthUsersAction] | error = ', err);\n        return res.status(500).json({ error: true, message: \"server error\" });\n    }\n}\n                    \n                \n\n            \n                \n                    handle the login or the registration of a OAuth's user (a user logged on signed in with a google/facebook/office account)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleOAuthUsersAction\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations): Promise => {\n    return new Promise(async (resolve, reject) => {\n        await getUsers(infos, async (err: any, result: any) => {\n            if (err) {\n                console.debug('[handleOAuthUsersAction] | error[getUsers] = ', err);\n                await addUsers(infos, (err: any, result: any) => {\n                    if (err) {\n                        console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                        return resolve({ error: true, message: \"internal error\" });\n                    } else {\n                        console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                        return resolve({ error: false, message: \"user created\", result: result });\n                    }\n                });\n            } else {\n                console.debug('[handleOAuthUsersAction] | result[getUsers] = ', result);\n                if (result.length === 0) {\n                    await addUsers(infos, (err: any, result: any) => {\n                        if (err) {\n                            console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                            return resolve({ error: true, message: \"internal error\" });\n                        } else {\n                            console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                            return resolve({ error: false, message: \"user created\", result: result });\n                        }\n                    });\n                } else {\n                    return resolve({ error: false, message: \"user already exists\", result: result });\n                }\n            }\n        });\n    });\n}\n                    \n                \n\n            \n                \n                    save or get user from / in database\n\n                \n            \n\n        \n    \n\n    src/routes/auth/registerActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        registerBasicUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations): Promise => {\n    return new Promise(async (resolve, reject) => {\n        await getUsers(infos, async (err: any, result: any) => {\n            if (err) {\n                console.debug('[handleOAuthUsersAction] | error[getUsers] = ', err);\n                await addUsers(infos, (err: any, result: any) => {\n                    if (err) {\n                        console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                        return resolve({ error: true, message: \"internal error\" });\n                    } else {\n                        console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                        return resolve({ error: false, message: \"user created\", result: result });\n                    }\n                });\n            } else {\n                console.debug('[handleOAuthUsersAction] | result[getUsers] = ', result);\n                if (result.length === 0) {\n                    await addUsers(infos, (err: any, result: any) => {\n                        if (err) {\n                            console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                            return resolve({ error: true, message: \"internal error\" });\n                        } else {\n                            console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                            return resolve({ error: false, message: \"user created\", result: result });\n                        }\n                    });\n                } else {\n                    return resolve({ error: false, message: \"user already exists\", result: result });\n                }\n            }\n        });\n    });\n}\n                    \n                \n\n            \n                \n                    save a user in the database if it doesn't already exists\n\n                \n            \n\n        \n    \n\n    src/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        routes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n\n\n        \n    \n\n    src/request_handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TOKEN_WL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(register|login)/\n                    \n                \n\n\n        \n    \n\n    src/routes/profile/profileActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        updateUserInformations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (req: express.Request, res: express.Response) => {\n    try {\n        const type: string = req.params.type;\n        const { access_token } = req.body;\n        let token: string = req.headers.authorization;\n        token = token.split(\" \")[1];\n        let response: AxiosResponse;\n        let user: { type: string, userJson: any } = { type: '', userJson: {} };\n\n        switch (type) {\n            case 'google_user':\n                console.log('bearer token == ', access_token);\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let googleUser = response.data;\n                user = { type: 'google_user', userJson: googleUser };\n                break;\n            case 'facebook_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.facebook.com/me/?fields=id,name,email',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let facebookUser = response.data;\n                user = { type: 'facebook_user', userJson: facebookUser };\n                break;\n            case 'office_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.microsoft.com/v1.0/me',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let officeUser = response.data;\n                user = { type: 'office_user', userJson: officeUser };\n                break;\n            case 'plain_user':\n                let plainUser = {\n                    mail: req.body.mail,\n                    password: req.body.password,\n                };\n                user = { type: 'plain_user', userJson: plainUser };\n                break;\n            default:\n                return res.status(400).json({ message: 'Bad request' });\n        };\n\n        if (user.type === 'google_user') {\n            console.log(\"heeeeerererere\");\n            await updateInfos(['google_mail', 'google_token'], [user.userJson.email, access_token], \"token\", token, (err: Error, result: any) => {\n                if (err) {\n                    console.log(\"heeeeerererere2 \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated', google_token: access_token });\n            });\n        }\n        if (user.type === 'office_user') {\n            await updateInfos(['office_mail', 'office_token'], [user.userJson.email, access_token], \"token\", token, (err: Error, result: any) => {\n                if (err) {\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated', office_token: access_token });\n            });\n        }\n        if (user.type === 'facebook_user') {\n            await updateInfos(['facebook_mail', 'facebook_token'], [user.userJson.email, access_token], \"token\", token, (err: Error, result: any) => {\n                if (err) {\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated', facebook_token: access_token });\n            });\n        }\n        if (user.type === 'plain_user') {\n            await updateInfos(['mail', 'password'], [user.userJson.mail, user.userJson.password], \"token\", token, (err: Error, result: any) => {\n                if (err) {\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n    } catch (error) {\n        return res.status(500).json({ message: 'server error' });\n    }\n}\n                    \n                \n\n            \n                \n                    update a user informations\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
