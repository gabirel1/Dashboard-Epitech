var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/About.html",[0,0.253]],["body/classes/About.html",[0,0.17,1,0.338,2,0.284,3,0.284,4,0.234,5,1.898,6,0.141,7,0.568,8,0.666,9,2.009,10,0.666,11,0.57,12,0.666,13,0.395,14,2.335,15,0.338,16,0.048,17,0.826,18,0.332,19,0.284,20,0.338,21,0.395,22,0.456,23,0.656,24,0.486,25,2.009,26,4.311,27,0.669,28,2.335,29,2.335,30,2.335,31,0.395,32,0.851,33,2.335,34,1.898,35,0.756,36,2.335,37,2.335,38,2.335,39,4.311,40,5.4,41,4.311,42,2.335,43,5.4,44,2.355,45,2.973,46,1.898,47,3.868,48,1.762,49,5.19,50,5.113,51,1.898,52,2.259,53,3.363,54,2.335,55,1.898,56,2.335,57,1.898,58,1.762,59,2.335,60,1.898,61,3.363,62,3.363,63,3.363,64,2.733,65,1.898,66,3.363,67,2.335,68,3.363,69,1.898,70,2.335,71,4.569,72,4.759,73,2.335,74,1.898,75,2.009,76,1.77,77,3.714,78,1.898,79,3.363,80,1.898,81,3.363,82,1.898,83,3.363,84,1.898,85,3.363,86,2.335,87,2.335,88,2.335,89,1.898,90,0.756,91,0.338,92,0.027,93,0.027]],["title/classes/Authentication.html",[0,0.203,94,1.917]],["body/classes/Authentication.html",[0,0.289,1,0.572,2,0.482,3,0.482,4,0.396,6,0.239,7,0.807,8,0.866,10,0.866,11,0.769,12,0.866,13,0.669,15,0.572,16,0.046,17,0.572,18,0.239,19,0.482,20,0.572,21,0.669,22,0.773,23,0.932,24,0.69,31,0.669,90,1.283,91,0.572,92,0.038,93,0.038,94,3.533,95,3.219,96,2.501,97,2.501,98,3.96,99,2.731,100,3.96,101,3.96]],["title/classes/Currency.html",[0,0.203,52,1.457]],["body/classes/Currency.html",[0,0.26,1,0.515,2,0.434,3,0.434,4,0.357,6,0.216,7,0.756,8,0.826,10,0.826,11,0.707,12,0.826,13,0.602,15,0.515,16,0.047,17,0.515,18,0.216,19,0.434,20,0.515,21,0.602,22,0.696,23,0.873,24,0.647,27,0.434,31,0.756,32,1.3,35,1.154,44,2.13,52,2.825,57,2.897,91,0.515,92,0.036,93,0.036,102,2.897,103,4.474,104,4.474,105,3.564,106,2.562,107,2.344,108,1.024,109,0.999,110,1.3,111,3.564,112,2.562,113,3.564,114,1.868,115,0.905,116,1.868,117,1.463,118,3.564,119,3.564,120,3.564,121,3.564,122,1.024,123,1.092,124,1.868,125,1.024,126,1.463,127,1.65,128,1.65]],["title/classes/IntraEpitech.html",[0,0.203,129,1.661]],["body/classes/IntraEpitech.html",[0,0.143,1,0.283,2,0.238,3,0.238,4,0.196,6,0.119,7,0.499,8,0.892,10,0.892,11,0.763,12,0.892,13,0.718,15,0.615,16,0.048,17,0.615,18,0.257,19,0.517,20,0.615,21,0.718,22,0.83,23,0.694,24,0.427,27,0.631,31,0.841,35,1.377,76,0.805,77,4.496,89,1.593,91,0.283,92,0.024,93,0.024,106,2.609,107,2.56,108,1.221,109,1.091,110,1.55,112,2.908,114,2.228,115,1.212,116,2.502,122,1.221,123,1.179,124,2.228,125,1.221,126,1.745,127,0.907,128,0.907,129,2.126,130,1.593,131,2.956,132,2.956,133,2.956,134,2.956,135,2.956,136,2.956,137,1.96,138,2.956,139,1.96,140,2.956,141,1.96,142,2.956,143,1.96,144,2.956,145,1.96,146,1.549,147,1.352,148,4.251,149,3.962,150,3.962,151,1.834,152,3.962,153,1.352,154,1.96,155,1.352,156,1.96,157,1.352,158,1.96,159,1.352,160,1.96,161,1.352,162,1.96,163,1.352,164,1.96,165,1.352,166,1.96,167,1.352,168,1.96,169,1.96,170,1.96,171,3.558,172,1.96,173,1.96,174,1.96,175,1.96,176,1.96,177,0.635,178,1.96,179,1.96,180,1.96,181,1.96,182,1.96]],["title/interfaces/IntraEpitechUser.html",[146,1.457,183,1.457]],["body/interfaces/IntraEpitechUser.html",[2,0.42,3,0.42,4,0.346,6,0.209,16,0.046,18,0.336,27,0.714,92,0.035,93,0.035,117,2.195,127,2.029,146,2.297,151,2.346,153,3.495,155,3.495,157,3.495,159,3.495,161,3.495,163,3.495,165,3.495,167,3.495,183,2.297,184,2.38,185,2.38,186,3.563,187,1.417,188,1.598,189,1.598,190,1.809,191,1.598,192,1.809,193,1.598,194,1.809,195,1.598,196,1.809,197,1.809,198,1.809]],["title/classes/Login.html",[0,0.203,151,1.287]],["body/classes/Login.html",[0,0.207,1,0.41,2,0.345,3,0.345,4,0.284,6,0.171,7,0.651,8,0.793,10,0.739,11,0.632,12,0.739,13,0.479,15,0.41,16,0.047,17,0.41,18,0.171,19,0.345,20,0.41,21,0.479,22,0.553,23,0.958,24,0.557,25,2.302,27,0.345,31,0.829,32,1.034,76,1.581,90,0.918,91,0.41,92,0.031,93,0.031,96,2.019,97,2.019,109,1.096,110,1.034,115,0.978,117,1.164,123,0.633,125,1.106,147,1.955,151,2.025,177,1.59,187,1.581,188,2.5,189,1.312,190,1.486,191,1.312,192,1.486,193,1.312,194,1.486,195,1.312,196,1.486,197,1.486,198,2.653,199,2.305,200,2.835,201,1.694,202,1.694,203,1.694,204,1.312,205,1.164,206,3.131,207,2.173,208,1.79,209,2.835,210,3.192,211,3.385,212,2.305,213,3.131,214,3.131,215,3.815,216,2.305,217,1.164,218,2.835,219,2.653,220,2.173,221,3.852,222,1.486,223,1.164,224,2.835,225,2.835,226,2.835,227,3.131,228,3.131,229,3.131,230,3.131,231,2.835,232,2.305,233,2.305,234,0.918]],["title/classes/Nasa.html",[0,0.203,58,1.457]],["body/classes/Nasa.html",[0,0.225,1,0.446,2,0.375,3,0.375,4,0.309,6,0.187,7,0.689,8,0.877,10,0.877,11,0.75,12,0.877,13,0.689,15,0.589,16,0.047,17,0.589,18,0.247,19,0.496,20,0.589,21,0.689,22,0.796,23,0.796,24,0.589,27,0.496,31,0.821,35,1.32,44,2.436,58,2.393,64,3.314,69,2.508,91,0.446,92,0.033,93,0.033,106,2.545,107,2.393,108,1.171,109,1.159,110,1.486,112,2.719,114,2.137,115,1.035,116,2.137,122,1.171,123,1.159,124,2.137,125,1.171,126,1.673,127,1.428,128,1.428,235,2.508,236,4.077,237,4.077,238,4.077,239,3.086,240,4.077,241,3.086,242,3.314,243,4.077,244,3.086,245,3.086,246,3.086,247,3.086,248,2.128,249,3.086,250,3.086,251,4.077,252,3.086]],["title/classes/Profile.html",[0,0.203,75,1.661]],["body/classes/Profile.html",[0,0.223,1,0.443,2,0.373,3,0.373,4,0.307,6,0.185,7,0.686,8,0.769,9,2.425,10,0.769,11,0.658,12,0.769,13,0.518,15,0.443,16,0.047,17,0.443,18,0.185,19,0.373,20,0.443,21,0.518,22,0.598,23,0.888,24,0.587,27,0.494,31,0.875,32,1.117,35,0.992,75,2.719,76,1.988,90,0.992,91,0.443,92,0.033,93,0.033,108,0.88,109,0.684,115,0.778,122,0.88,123,1.125,125,0.88,126,1.258,177,1.632,188,1.418,189,1.418,191,1.418,193,1.418,195,1.418,201,1.831,203,1.831,204,1.418,205,1.258,207,2.106,208,1.888,217,1.258,219,2.127,220,2.106,222,1.606,223,1.258,234,1.711,253,2.491,254,3.064,255,2.113,256,1.606,257,2.384,258,2.384,259,1.606,260,1.418,261,2.127,262,1.606,263,1.606,264,2.113,265,2.127,266,2.113,267,3.064,268,1.831,269,2.113,270,3.064,271,3.064,272,4.058,273,3.064,274,3.064,275,3.064,276,3.064,277,3.064,278,3.064,279,3.064,280,3.064,281,1.418]],["title/classes/ProfileUpdate.html",[0,0.203,282,1.917]],["body/classes/ProfileUpdate.html",[0,0.255,1,0.506,2,0.426,3,0.426,4,0.35,6,0.212,7,0.747,8,0.819,10,0.819,11,0.736,12,0.819,13,0.591,15,0.506,16,0.047,17,0.506,18,0.212,19,0.426,20,0.506,21,0.591,22,0.683,23,0.946,24,0.639,27,0.538,31,0.819,90,1.134,91,0.506,92,0.036,93,0.036,108,1.005,109,0.782,115,0.889,122,1.005,123,0.782,177,1.57,204,1.62,205,1.437,207,2.244,208,1.768,217,1.437,234,1.738,256,1.834,257,2.541,258,1.834,259,1.834,260,1.62,261,2.318,262,1.834,263,1.834,264,2.414,265,2.318,266,2.414,282,3.344,283,2.845,284,3.595,285,3.595,286,3.5,287,2.414,288,3.5,289,3.5]],["title/classes/Register.html",[0,0.203,290,1.917]],["body/classes/Register.html",[0,0.245,1,0.485,2,0.408,3,0.408,4,0.336,6,0.203,7,0.727,8,0.803,10,0.803,11,0.687,12,0.803,13,0.566,15,0.485,16,0.047,17,0.485,18,0.203,19,0.408,20,0.485,21,0.566,22,0.654,23,0.927,24,0.622,31,0.803,32,1.222,76,1.376,90,1.086,91,0.485,92,0.035,93,0.035,96,2.255,97,2.255,109,0.961,110,1.222,115,0.851,123,1.061,125,0.963,147,2.312,177,1.394,187,1.766,188,2.2,189,1.552,190,1.757,191,1.552,192,1.757,193,1.552,194,1.757,195,1.552,196,1.757,197,1.757,198,2.49,208,1.733,210,3.299,220,1.992,281,2.2,290,3.277,291,2.725,292,3.352,293,2.312,294,3.352,295,2.725,296,3.352,297,3.498,298,4.076,299,2.725,300,2.725,301,3.352,302,2.312]],["title/classes/Temperature.html",[0,0.203,48,1.457]],["body/classes/Temperature.html",[0,0.229,1,0.454,2,0.382,3,0.382,4,0.314,6,0.19,7,0.697,8,0.881,10,0.881,11,0.754,12,0.881,13,0.697,15,0.596,16,0.047,17,0.596,18,0.249,19,0.502,20,0.596,21,0.697,22,0.805,23,0.805,24,0.596,27,0.595,31,0.827,35,1.336,44,2.465,47,3.353,48,2.414,91,0.454,92,0.033,93,0.033,106,2.563,107,2.414,108,1.185,109,1.164,110,1.504,112,2.732,114,2.162,115,1.047,116,2.162,122,1.185,123,1.164,124,2.162,125,1.185,126,1.693,127,1.454,128,1.454,242,3.353,303,2.553,304,4.125,305,4.125,306,4.125,307,3.141,308,4.125,309,3.141,310,4.125,311,4.125,312,3.141,313,3.141]],["title/classes/Token.html",[0,0.203,234,0.9]],["body/classes/Token.html",[0,0.204,1,0.405,2,0.341,3,0.341,4,0.281,6,0.17,7,0.646,8,0.826,9,2.284,10,0.826,11,0.707,12,0.826,13,0.646,15,0.553,16,0.047,17,0.553,18,0.231,19,0.465,20,0.553,21,0.646,22,0.746,23,0.985,24,0.553,25,2.599,27,0.465,31,0.873,32,1.022,35,0.908,90,0.908,91,0.405,92,0.031,93,0.031,96,2.003,97,1.469,108,0.805,109,0.626,117,1.151,122,0.805,123,0.854,125,0.805,126,1.151,177,1.634,202,1.675,203,1.675,204,1.298,205,1.151,207,2.433,208,1.883,210,1.675,211,2.636,215,2.279,217,1.151,219,2.28,220,2.263,222,1.469,223,1.569,234,1.788,256,1.469,257,2.562,258,2.28,259,1.469,260,1.298,261,2.003,262,1.469,263,1.469,264,1.933,265,2.448,266,1.933,268,1.675,281,1.298,302,1.933,314,2.279,315,2.803,316,2.803,317,1.675,318,2.803,319,1.933,320,2.803,321,2.803,322,2.803,323,2.279,324,2.803,325,3.822,326,2.803,327,2.803,328,3.822,329,2.803,330,2.803,331,2.279]],["title/interfaces/UserInformations.html",[183,1.457,187,1.141]],["body/interfaces/UserInformations.html",[2,0.392,3,0.392,4,0.323,6,0.195,16,0.046,18,0.337,19,0.703,27,0.715,92,0.034,93,0.034,117,1.722,127,1.941,146,1.689,151,1.492,153,2.222,155,2.222,157,2.222,159,2.222,161,2.222,163,2.222,165,2.222,167,2.222,183,2.198,184,2.222,185,2.222,186,3.409,187,1.722,188,2.286,189,2.286,190,2.589,191,2.286,192,2.589,193,2.286,194,2.589,195,2.286,196,2.589,197,2.589,198,2.589]],["title/classes/Utils.html",[0,0.203,317,1.661]],["body/classes/Utils.html",[0,0.298,1,0.591,2,0.498,3,0.498,4,0.409,6,0.247,7,0.822,13,0.691,15,0.591,16,0.046,17,0.591,18,0.247,19,0.498,21,0.691,27,0.654,92,0.039,93,0.039,117,2.207,223,1.679,317,2.908,332,3.325,333,4.866,334,4.866,335,4.09,336,4.09,337,4.09,338,4.09,339,4.09]],["title/classes/Widget.html",[0,0.203,340,1.661]],["body/classes/Widget.html",[0,0.219,1,0.433,2,0.364,3,0.364,4,0.3,6,0.181,7,0.676,8,0.76,10,0.76,11,0.806,12,0.76,13,0.506,15,0.433,16,0.047,17,0.433,18,0.272,19,0.364,20,0.433,21,0.506,22,0.585,23,1.004,24,0.578,27,0.547,31,0.947,46,2.435,48,2.095,51,2.435,52,2.095,55,2.435,58,2.095,60,2.435,65,2.435,74,2.435,78,2.435,80,2.435,82,2.435,84,2.435,90,0.97,91,0.433,92,0.032,93,0.032,96,2.095,97,2.095,108,0.86,109,0.893,115,1.386,122,0.86,123,0.893,128,1.387,129,2.389,177,1.457,204,1.387,205,1.23,207,2.222,208,1.75,217,1.23,234,1.666,256,1.57,257,2.358,258,2.095,259,1.57,260,1.387,261,2.095,262,1.57,263,1.57,265,2.095,269,2.066,281,1.85,340,2.868,341,2.435,342,2.996,343,2.435,344,2.435,345,2.435,346,4.436,347,2.996,348,2.996,349,2.996,350,2.996,351,2.996,352,2.996,353,2.996,354,2.996,355,2.996,356,2.996]],["title/classes/WidgetsDB.html",[0,0.203,357,1.917]],["body/classes/WidgetsDB.html",[0,0.166,1,0.329,2,0.277,3,0.277,4,0.228,6,0.138,7,0.558,8,0.797,9,1.971,10,0.797,11,0.682,12,0.797,13,0.558,15,0.477,16,0.048,17,0.477,18,0.199,19,0.401,20,0.477,21,0.558,22,0.644,23,0.758,24,0.477,27,0.518,31,0.926,32,1.416,45,2.677,76,1.748,90,0.737,91,0.329,92,0.027,93,0.027,108,0.948,109,0.867,110,0.829,115,1.197,122,0.948,123,1.135,124,1.729,125,1.397,177,1.741,203,1.359,204,1.053,205,0.933,207,2.535,208,1.997,217,1.354,219,2.662,220,2.252,222,1.192,223,1.594,234,1.693,248,2.677,256,1.729,257,2.37,258,2.232,259,1.729,260,1.527,261,2.232,262,1.729,263,1.729,265,2.035,268,2.818,269,2.275,281,1.797,284,2.682,285,2.682,357,2.677,358,1.849,359,2.274,360,2.274,361,1.568,362,1.568,363,1.568,364,1.568,365,3.299,366,3.882,367,3.299,368,2.682,369,3.299,370,3.299,371,3.156,372,2.274,373,2.274]],["title/coverage.html",[374,3.089]],["body/coverage.html",[0,0.405,4,0.282,5,2.29,16,0.047,18,0.17,35,0.912,48,1.476,52,1.476,58,1.476,75,1.683,91,0.407,92,0.031,93,0.031,94,1.943,95,2.29,99,1.943,102,2.29,129,1.683,130,2.29,146,1.476,151,1.304,183,2.01,185,2.645,187,1.156,199,2.29,201,1.683,202,1.683,223,2.392,234,0.912,235,2.29,253,2.29,255,1.943,282,1.943,283,2.29,287,1.943,290,1.943,291,2.29,293,1.943,303,2.29,314,2.29,317,1.683,319,1.943,332,2.29,340,1.683,341,2.29,357,1.943,358,2.29,361,1.943,362,1.943,363,1.943,364,1.943,374,2.29,375,2.817,376,2.817,377,2.817,378,2.29,379,5.684,380,2.29,381,5.699,382,4.386,383,2.29,384,2.29,385,2.817,386,2.817,387,2.29,388,2.817,389,2.817,390,3.117,391,2.29,392,2.645,393,3.117,394,2.29,395,2.29,396,2.645,397,2.29,398,2.29,399,5.335,400,3.117,401,2.29,402,2.29,403,4.681,404,2.29,405,2.29,406,2.817,407,2.817,408,2.29]],["title/dependencies.html",[409,2.318,410,2.719]],["body/dependencies.html",[16,0.046,24,0.625,25,2.583,92,0.04,93,0.04,205,1.774,410,3.514,411,4.323,412,4.323,413,4.323,414,4.323,415,4.323,416,4.323,417,4.323,418,4.323,419,4.323,420,4.323]],["title/miscellaneous/functions.html",[421,1.385,422,2.719]],["body/miscellaneous/functions.html",[6,0.254,11,0.714,15,0.714,16,0.044,17,0.714,18,0.254,19,0.601,20,0.607,27,0.601,92,0.04,93,0.04,392,2.895,394,4.017,396,2.895,397,4.017,421,2.509,422,3.413,423,3.413,424,3.413,425,4.198,426,4.942,427,4.198,428,4.198,429,4.942]],["title/index.html",[6,0.168,430,2.259]],["body/index.html",[1,0.649,16,0.041,92,0.041,93,0.041,184,3.096,430,3.649,431,4.489,432,4.489]],["title/modules.html",[433,3.089]],["body/modules.html",[16,0.042,92,0.042,93,0.042,433,3.687]],["title/miscellaneous/variables.html",[421,1.385,434,2.719]],["body/miscellaneous/variables.html",[6,0.042,8,0.687,10,0.211,11,0.18,12,0.211,16,0.048,18,0.251,20,0.18,24,0.1,27,0.582,31,0.791,32,0.963,34,0.565,35,0.995,45,1.423,76,1.87,91,0.18,92,0.01,93,0.01,99,0.859,106,1.384,107,0.653,108,1.018,109,0.76,110,0.454,112,1.384,114,1.61,115,1.07,116,1.384,117,0.285,122,1.054,123,1.069,125,0.825,126,1.261,128,2.063,177,1.46,187,1.084,188,1.223,189,0.955,190,0.887,191,0.955,192,0.887,193,0.955,194,0.653,195,0.955,196,0.887,197,0.364,198,1.384,201,0.745,202,0.745,206,1.013,208,1.677,210,2.774,211,1.638,212,0.565,213,1.013,214,1.013,216,0.565,217,0.285,219,2.838,220,2.451,222,0.653,223,0.847,227,1.931,228,1.931,229,1.931,230,1.931,232,1.931,233,0.565,234,1.342,248,0.859,255,0.859,260,0.577,268,1.836,281,2.038,287,0.859,293,0.859,295,2.147,297,1.013,298,1.376,299,1.376,300,1.376,302,0.859,319,0.859,323,2.497,331,0.565,340,1.012,343,1.376,344,1.013,345,1.013,346,2.334,361,0.859,362,0.859,363,0.859,364,0.859,368,2.497,371,1.013,378,0.565,380,1.013,382,0.565,383,1.013,384,1.013,387,1.013,390,0.565,391,1.013,392,0.479,393,2.881,395,1.013,396,0.479,398,1.013,400,0.565,401,1.013,402,0.565,404,0.565,405,0.565,408,0.565,421,0.415,423,0.565,424,0.565,434,0.565,435,3.404,436,1.246,437,0.695,438,0.695,439,1.246,440,0.695,441,0.695,442,4.458,443,3.544,444,4.877,445,1.246,446,3.072,447,4.787,448,2.642,449,2.642,450,1.246,451,2.642,452,0.695,453,2.642,454,0.695,455,2.642,456,0.695,457,2.642,458,0.695,459,3.072,460,3.248,461,4.404,462,3.544,463,2.064,464,0.695,465,1.246,466,0.695,467,0.695,468,1.693,469,2.376,470,1.246,471,1.246,472,1.246,473,0.695,474,1.246,475,0.695,476,0.695,477,0.695,478,1.693,479,1.693,480,0.695,481,2.642,482,0.695,483,0.695,484,0.695,485,0.695,486,0.695,487,0.695,488,0.695,489,0.695,490,0.695,491,0.695,492,4.144,493,3.544,494,3.072,495,1.246,496,1.246,497,2.642,498,2.642,499,2.642,500,1.246,501,3.404,502,2.064,503,2.871,504,3.072,505,1.246,506,2.064,507,3.072,508,1.246,509,1.246,510,2.064,511,1.246,512,1.246,513,4.065,514,3.404,515,1.693,516,1.246,517,0.695,518,2.642,519,0.695,520,0.695,521,3.979,522,0.695,523,0.695,524,1.246,525,1.246,526,3.669,527,1.246,528,1.246,529,1.246,530,2.064,531,2.064,532,2.064,533,1.246,534,0.695,535,0.695,536,2.376,537,2.376,538,1.693,539,1.246,540,0.695,541,0.695,542,0.695,543,2.064,544,2.064,545,2.064,546,0.695,547,0.695,548,0.695,549,0.695,550,0.695]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":223,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0/1",{"_index":381,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":388,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":389,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":399,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":403,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":260,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["1/1",{"_index":386,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":414,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":385,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":431,"title":{},"body":{"index.html":{}}}],["2",{"_index":432,"title":{},"body":{"index.html":{}}}],["2.29.1",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":412,"title":{},"body":{"dependencies.html":{}}}],["4.17.1",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":213,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["8.5.1",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["_result",{"_index":221,"title":{},"body":{"classes/Login.html":{}}}],["_result['token",{"_index":225,"title":{},"body":{"classes/Login.html":{}}}],["_result['token_created_at",{"_index":226,"title":{},"body":{"classes/Login.html":{}}}],["abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789",{"_index":339,"title":{},"body":{"classes/Utils.html":{}}}],["access_token",{"_index":492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addroute",{"_index":397,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["addroute(endpoint",{"_index":425,"title":{},"body":{"miscellaneous/functions.html":{}}}],["addusers",{"_index":383,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["addusers(infos",{"_index":530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addwidget",{"_index":363,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["addwidget(userid",{"_index":372,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["already",{"_index":299,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["api_key",{"_index":44,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{}}}],["api_url",{"_index":41,"title":{},"body":{"classes/About.html":{}}}],["apikey",{"_index":242,"title":{},"body":{"classes/Nasa.html":{},"classes/Temperature.html":{}}}],["apod",{"_index":60,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["app",{"_index":391,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apple_mail",{"_index":193,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["apple_token",{"_index":194,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["apple_user",{"_index":515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["astronomy",{"_index":61,"title":{},"body":{"classes/About.html":{}}}],["async",{"_index":8,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["async(err",{"_index":366,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["authactions",{"_index":100,"title":{},"body":{"classes/Authentication.html":{}}}],["authentication",{"_index":94,"title":{"classes/Authentication.html":{}},"body":{"classes/Authentication.html":{},"coverage.html":{}}}],["authorization",{"_index":498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["autologin",{"_index":77,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{}}}],["autologin.startswith(\"https://intra.epitech.eu",{"_index":148,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["autologin.substring(25",{"_index":149,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["await",{"_index":115,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["axios",{"_index":106,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["axiosresponse",{"_index":107,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["bad",{"_index":511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base_currency",{"_index":120,"title":{},"body":{"classes/Currency.html":{}}}],["bearer",{"_index":499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":343,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["break",{"_index":503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback",{"_index":443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(err",{"_index":461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["camera",{"_index":69,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["case",{"_index":346,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":122,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["checktoken",{"_index":319,"title":{},"body":{"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checktoken(token",{"_index":321,"title":{},"body":{"classes/Token.html":{}}}],["city",{"_index":47,"title":{},"body":{"classes/About.html":{},"classes/Temperature.html":{}}}],["city_temperature",{"_index":46,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["city_weather",{"_index":51,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["class",{"_index":0,"title":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{}}}],["classes",{"_index":1,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"index.html":{}}}],["client",{"_index":33,"title":{},"body":{"classes/About.html":{}}}],["console.debug(\"[getuser",{"_index":472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"[getuserbytoken",{"_index":471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"query",{"_index":459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(\"response",{"_index":500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug('[handleoauthusersaction",{"_index":521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.debug(err",{"_index":268,"title":{},"body":{"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["console.debug(result",{"_index":323,"title":{},"body":{"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["console.error(\"error",{"_index":543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error(error",{"_index":550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"heeeeeeeeeeeeeeeeeeeeere",{"_index":264,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{}}}],["console.log(\"heeeeeeeeeeeeeeeeeeeeere2",{"_index":266,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{}}}],["console.log(\"res",{"_index":485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"response",{"_index":509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"result",{"_index":270,"title":{},"body":{"classes/Profile.html":{}}}],["console.log(\"result[0",{"_index":271,"title":{},"body":{"classes/Profile.html":{}}}],["console.log('autologin",{"_index":179,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["console.log('bearer",{"_index":495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('currency",{"_index":119,"title":{},"body":{"classes/Currency.html":{}}}],["console.log('ip",{"_index":30,"title":{},"body":{"classes/About.html":{}}}],["console.log(error",{"_index":124,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{},"classes/WidgetsDB.html":{}}}],["console.log(from",{"_index":111,"title":{},"body":{"classes/Currency.html":{}}}],["const",{"_index":109,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["converter",{"_index":53,"title":{},"body":{"classes/About.html":{}}}],["cors",{"_index":411,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":374,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdat",{"_index":324,"title":{},"body":{"classes/Token.html":{}}}],["credits",{"_index":165,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}}}],["curiosity",{"_index":66,"title":{},"body":{"classes/About.html":{}}}],["curiosity_image",{"_index":65,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["currency",{"_index":52,"title":{"classes/Currency.html":{}},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["currency.getexchangerate(req",{"_index":347,"title":{},"body":{"classes/Widget.html":{}}}],["currency_converter",{"_index":55,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["current_time",{"_index":36,"title":{},"body":{"classes/About.html":{}}}],["data",{"_index":248,"title":{},"body":{"classes/Nasa.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["data[0",{"_index":251,"title":{},"body":{"classes/Nasa.html":{}}}],["database",{"_index":490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database/databaseactions",{"_index":203,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{}}}],["database/interfaces",{"_index":147,"title":{},"body":{"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Register.html":{}}}],["date",{"_index":64,"title":{},"body":{"classes/About.html":{},"classes/Nasa.html":{}}}],["day",{"_index":63,"title":{},"body":{"classes/About.html":{}}}],["db",{"_index":380,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["db.query(query",{"_index":460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db.query(querystring",{"_index":484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dd",{"_index":229,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["decoded",{"_index":261,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["default",{"_index":128,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["delete",{"_index":466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletewidget",{"_index":384,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":410,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":49,"title":{},"body":{"classes/About.html":{}}}],["diff",{"_index":328,"title":{},"body":{"classes/Token.html":{}}}],["display",{"_index":50,"title":{},"body":{"classes/About.html":{}}}],["display_name",{"_index":40,"title":{},"body":{"classes/About.html":{}}}],["documentation",{"_index":375,"title":{},"body":{"coverage.html":{}}}],["door",{"_index":87,"title":{},"body":{"classes/About.html":{}}}],["door_name",{"_index":89,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{}}}],["doors",{"_index":86,"title":{},"body":{"classes/About.html":{}}}],["dotenv",{"_index":413,"title":{},"body":{"dependencies.html":{}}}],["endpoint",{"_index":427,"title":{},"body":{"miscellaneous/functions.html":{}}}],["epitech",{"_index":72,"title":{},"body":{"classes/About.html":{}}}],["err",{"_index":219,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":123,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["error[addusers",{"_index":531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error[getusers",{"_index":529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error[updateuserauthtoken",{"_index":522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exchange",{"_index":56,"title":{},"body":{"classes/About.html":{}}}],["existinginformation",{"_index":536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existinginformationtype",{"_index":537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exists",{"_index":300,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":211,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":127,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{},"interfaces/UserInformations.html":{}}}],["express",{"_index":24,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["express.request",{"_index":10,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["express.response",{"_index":12,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["facebook_mail",{"_index":191,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["facebook_token",{"_index":192,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["facebook_user",{"_index":504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["facebookuser",{"_index":506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":177,"title":{},"body":{"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{}}}],["firstname",{"_index":153,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}}}],["found",{"_index":258,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["function",{"_index":393,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":422,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(req",{"_index":9,"title":{},"body":{"classes/About.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{}}}],["getexchangerate",{"_index":103,"title":{},"body":{"classes/Currency.html":{}}}],["getexchangerate(req",{"_index":104,"title":{},"body":{"classes/Currency.html":{}}}],["getgrades",{"_index":131,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getgrades(req",{"_index":136,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getnasadayimage",{"_index":236,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasadayimage(req",{"_index":238,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasaroverimage",{"_index":237,"title":{},"body":{"classes/Nasa.html":{}}}],["getnasaroverimage(req",{"_index":240,"title":{},"body":{"classes/Nasa.html":{}}}],["getnotifications",{"_index":132,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getnotifications(req",{"_index":138,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getpartners",{"_index":133,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getpartners(req",{"_index":140,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getprofile",{"_index":134,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getprofile(req",{"_index":142,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["getrandomstring",{"_index":333,"title":{},"body":{"classes/Utils.html":{}}}],["getrandomstring(length",{"_index":334,"title":{},"body":{"classes/Utils.html":{}}}],["getrow",{"_index":255,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrow('token",{"_index":267,"title":{},"body":{"classes/Profile.html":{}}}],["gettemperature",{"_index":304,"title":{},"body":{"classes/Temperature.html":{}}}],["gettemperature(req",{"_index":306,"title":{},"body":{"classes/Temperature.html":{}}}],["getuserbytoken",{"_index":362,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuserbytoken(token",{"_index":365,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["getusers",{"_index":201,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getusers(infos",{"_index":528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getusers(user",{"_index":218,"title":{},"body":{"classes/Login.html":{}}}],["getweather",{"_index":305,"title":{},"body":{"classes/Temperature.html":{}}}],["getweather(req",{"_index":308,"title":{},"body":{"classes/Temperature.html":{}}}],["getwidgetsbyuserid",{"_index":361,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getwidgetsbyuserid(userid",{"_index":370,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["google_mail",{"_index":189,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["google_token",{"_index":190,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["google_user",{"_index":494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googleuser",{"_index":502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gpa",{"_index":167,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}}}],["grades",{"_index":83,"title":{},"body":{"classes/About.html":{}}}],["handleoauthusers",{"_index":99,"title":{},"body":{"classes/Authentication.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusers(req",{"_index":101,"title":{},"body":{"classes/Authentication.html":{}}}],["handleoauthusersaction",{"_index":401,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["handleoauthusersaction(infos",{"_index":517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hh:mm:ss",{"_index":230,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":34,"title":{},"body":{"classes/About.html":{},"miscellaneous/variables.html":{}}}],["http://api.openweathermap.org",{"_index":42,"title":{},"body":{"classes/About.html":{}}}],["http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key",{"_index":311,"title":{},"body":{"classes/Temperature.html":{}}}],["https://api.nasa.gov",{"_index":59,"title":{},"body":{"classes/About.html":{}}}],["https://api.nasa.gov/mars",{"_index":246,"title":{},"body":{"classes/Nasa.html":{}}}],["https://api.nasa.gov/planetary/apod?api_key=${api_key}&date=${date",{"_index":244,"title":{},"body":{"classes/Nasa.html":{}}}],["https://epi",{"_index":180,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://freecurrencyapi.net",{"_index":54,"title":{},"body":{"classes/About.html":{}}}],["https://freecurrencyapi.net/api/v2/latest?base_currency=${from}&apikey=${api_key",{"_index":113,"title":{},"body":{"classes/Currency.html":{}}}],["https://graph.facebook.com/me/?fields=id,name,email",{"_index":505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://graph.microsoft.com/v1.0/me",{"_index":508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://intra.epitech.eu",{"_index":73,"title":{},"body":{"classes/About.html":{}}}],["https://intra.epitech.eu/${autologin",{"_index":178,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/binome/?format=json",{"_index":170,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/notes?format=json",{"_index":175,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user/${login}/notification/message?format=json",{"_index":173,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://intra.epitech.eu/${autologin}/user?format=json",{"_index":150,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["https://www.googleapis.com/oauth2/v1/userinfo?alt=json",{"_index":496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifier",{"_index":376,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":68,"title":{},"body":{"classes/About.html":{}}}],["import",{"_index":23,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["incorrect",{"_index":224,"title":{},"body":{"classes/Login.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["informations",{"_index":544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos",{"_index":295,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["infos.apple_mail",{"_index":455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.apple_token",{"_index":456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.facebook_mail",{"_index":453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.facebook_token",{"_index":454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.google_mail",{"_index":451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.google_token",{"_index":452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.mail",{"_index":448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.office_mail",{"_index":457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.office_token",{"_index":458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["infos.password",{"_index":450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insert",{"_index":445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":183,"title":{"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["interfaces",{"_index":184,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{},"index.html":{}}}],["internal",{"_index":126,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["intra",{"_index":71,"title":{},"body":{"classes/About.html":{}}}],["intra_epitech",{"_index":70,"title":{},"body":{"classes/About.html":{}}}],["intra_epitech_doors",{"_index":84,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_grades",{"_index":82,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_notifications",{"_index":80,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_partners",{"_index":78,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intra_epitech_profile",{"_index":74,"title":{},"body":{"classes/About.html":{},"classes/Widget.html":{}}}],["intraepitech",{"_index":129,"title":{"classes/IntraEpitech.html":{}},"body":{"classes/IntraEpitech.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["intraepitech.getgrades(req",{"_index":356,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getnotifications(req",{"_index":354,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getpartners(req",{"_index":353,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.getprofile(req",{"_index":352,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitech.opendoor(req",{"_index":355,"title":{},"body":{"classes/Widget.html":{}}}],["intraepitechuser",{"_index":146,"title":{"interfaces/IntraEpitechUser.html":{}},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["invalid",{"_index":265,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["ip",{"_index":26,"title":{},"body":{"classes/About.html":{}}}],["ip.split(':')[3",{"_index":29,"title":{},"body":{"classes/About.html":{}}}],["json.stringify(widget",{"_index":464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jsonwebtoken",{"_index":205,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"dependencies.html":{}}}],["jwt",{"_index":204,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwt.jwtpayload",{"_index":262,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwt.sign",{"_index":216,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["jwt.verify(token",{"_index":263,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["jwttoken",{"_index":481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":155,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}}}],["length",{"_index":336,"title":{},"body":{"classes/Utils.html":{}}}],["limit",{"_index":470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["literal",{"_index":534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":161,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}}}],["logged",{"_index":233,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":151,"title":{"classes/Login.html":{}},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["logue.eu/api/doors_open?login=${autologin}&door_name=${door_name",{"_index":181,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["mail",{"_index":188,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":93,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":208,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":116,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":7,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["miscellaneous",{"_index":421,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":228,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["module.exports",{"_index":90,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["modules",{"_index":433,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moment",{"_index":25,"title":{},"body":{"classes/About.html":{},"classes/Login.html":{},"classes/Token.html":{},"dependencies.html":{}}}],["moment().format('yyyy",{"_index":227,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["moment().unix",{"_index":37,"title":{},"body":{"classes/About.html":{}}}],["moment(result[0].token_created_at",{"_index":326,"title":{},"body":{"classes/Token.html":{}}}],["moment.moment",{"_index":325,"title":{},"body":{"classes/Token.html":{}}}],["montpellier",{"_index":88,"title":{},"body":{"classes/About.html":{}}}],["mysql.createconnection",{"_index":486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":418,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":17,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["nasa",{"_index":58,"title":{"classes/Nasa.html":{}},"body":{"classes/About.html":{},"classes/Nasa.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["nasa.getnasadayimage(req",{"_index":350,"title":{},"body":{"classes/Widget.html":{}}}],["nasa.getnasaroverimage(req",{"_index":351,"title":{},"body":{"classes/Widget.html":{}}}],["new",{"_index":91,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newtoken",{"_index":215,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{}}}],["newvalues",{"_index":475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["next",{"_index":429,"title":{},"body":{"miscellaneous/functions.html":{}}}],["none",{"_index":519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notifications",{"_index":81,"title":{},"body":{"classes/About.html":{}}}],["now",{"_index":327,"title":{},"body":{"classes/Token.html":{}}}],["now.diff(createdat",{"_index":329,"title":{},"body":{"classes/Token.html":{}}}],["null",{"_index":322,"title":{},"body":{"classes/Token.html":{}}}],["number",{"_index":117,"title":{},"body":{"classes/Currency.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"miscellaneous/variables.html":{}}}],["number(process.env.expire_time",{"_index":212,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["office_mail",{"_index":195,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["office_token",{"_index":196,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["office_user",{"_index":507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["officeuser",{"_index":510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["open",{"_index":85,"title":{},"body":{"classes/About.html":{}}}],["opendoor",{"_index":135,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["opendoor(req",{"_index":144,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["optional",{"_index":19,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["outlook_mail",{"_index":277,"title":{},"body":{"classes/Profile.html":{}}}],["overview",{"_index":430,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":409,"title":{"dependencies.html":{}},"body":{}}],["parameters",{"_index":15,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":43,"title":{},"body":{"classes/About.html":{}}}],["partners",{"_index":79,"title":{},"body":{"classes/About.html":{}}}],["password",{"_index":198,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":284,"title":{},"body":{"classes/ProfileUpdate.html":{},"classes/WidgetsDB.html":{}}}],["patch(req",{"_index":285,"title":{},"body":{"classes/ProfileUpdate.html":{},"classes/WidgetsDB.html":{}}}],["payload",{"_index":214,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["photo",{"_index":250,"title":{},"body":{"classes/Nasa.html":{}}}],["photos/api/v1/rovers/curiosity/photos?earth_date=${date}&camera=${camera}&api_key=${api_key",{"_index":247,"title":{},"body":{"classes/Nasa.html":{}}}],["picture",{"_index":62,"title":{},"body":{"classes/About.html":{}}}],["plain_user",{"_index":538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plainuser",{"_index":539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["possible",{"_index":338,"title":{},"body":{"classes/Utils.html":{}}}],["post",{"_index":96,"title":{},"body":{"classes/Authentication.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["post(req",{"_index":97,"title":{},"body":{"classes/Authentication.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{}}}],["process.env.jwt_secret",{"_index":217,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["process.env.my_sql_database",{"_index":491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_host",{"_index":487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_password",{"_index":489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.my_sql_user",{"_index":488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.nasa_api_key",{"_index":243,"title":{},"body":{"classes/Nasa.html":{}}}],["process.env.weather_api_key",{"_index":310,"title":{},"body":{"classes/Temperature.html":{}}}],["profile",{"_index":75,"title":{"classes/Profile.html":{}},"body":{"classes/About.html":{},"classes/Profile.html":{},"coverage.html":{}}}],["profileactions",{"_index":288,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["profilepicture",{"_index":157,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}}}],["profileupdate",{"_index":282,"title":{"classes/ProfileUpdate.html":{}},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{}}}],["promise",{"_index":524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise(async",{"_index":525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promo",{"_index":159,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}}}],["properties",{"_index":186,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}}}],["query",{"_index":444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["querystring",{"_index":483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rate",{"_index":57,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{}}}],["rc.0",{"_index":420,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":290,"title":{"classes/Register.html":{}},"body":{"classes/Register.html":{},"coverage.html":{}}}],["registeractions",{"_index":294,"title":{},"body":{"classes/Register.html":{}}}],["registerbasicuser",{"_index":293,"title":{},"body":{"classes/Register.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registerbasicuser(infos",{"_index":296,"title":{},"body":{"classes/Register.html":{}}}],["register|login",{"_index":535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reject",{"_index":527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req",{"_index":20,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["req.body",{"_index":110,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["req.body.mail",{"_index":540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.body.password",{"_index":541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":256,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["req.ip",{"_index":28,"title":{},"body":{"classes/About.html":{}}}],["req.params.type",{"_index":344,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesthandler",{"_index":394,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["requesthandler(req",{"_index":428,"title":{},"body":{"miscellaneous/functions.html":{}}}],["require(\"http\").server(app",{"_index":482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":209,"title":{},"body":{"classes/Login.html":{}}}],["res",{"_index":11,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["res.status(200).json",{"_index":32,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["res.status(200).json(photo",{"_index":252,"title":{},"body":{"classes/Nasa.html":{}}}],["res.status(200).json(response.data",{"_index":245,"title":{},"body":{"classes/Nasa.html":{}}}],["res.status(200).json(response.data['main",{"_index":312,"title":{},"body":{"classes/Temperature.html":{}}}],["res.status(200).json(response.data['weather",{"_index":313,"title":{},"body":{"classes/Temperature.html":{}}}],["res.status(200).json(response2.data",{"_index":174,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(response2.data['binomes",{"_index":172,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(response2.data['modules",{"_index":176,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(200).json(user",{"_index":169,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["res.status(400).json",{"_index":206,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["res.status(401).json",{"_index":257,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["res.status(403).json",{"_index":301,"title":{},"body":{"classes/Register.html":{}}}],["res.status(404).json",{"_index":269,"title":{},"body":{"classes/Profile.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["res.status(500).json",{"_index":125,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["res.status(response.status).json(response.data",{"_index":182,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["resolve",{"_index":526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":114,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["response.data",{"_index":501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response.data.data[to",{"_index":118,"title":{},"body":{"classes/Currency.html":{}}}],["response.data.photos",{"_index":249,"title":{},"body":{"classes/Nasa.html":{}}}],["response.data['credits",{"_index":166,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['firstname",{"_index":154,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['gpa'][0]['gpa",{"_index":168,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['groups'][0]['name",{"_index":162,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['lastname",{"_index":156,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['login",{"_index":152,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['picture",{"_index":158,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['promo",{"_index":160,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response.data['semester_code",{"_index":164,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["response2",{"_index":171,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["result",{"_index":220,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["result.affectedrows",{"_index":331,"title":{},"body":{"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["result.error",{"_index":297,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["result.length",{"_index":222,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/Token.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["result.message",{"_index":298,"title":{},"body":{"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["result.result",{"_index":302,"title":{},"body":{"classes/Register.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["result[0",{"_index":272,"title":{},"body":{"classes/Profile.html":{}}}],["result[addusers",{"_index":532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[getusers",{"_index":533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[updateuserauthtoken",{"_index":523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["results",{"_index":92,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":31,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":21,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["routes",{"_index":398,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rover",{"_index":67,"title":{},"body":{"classes/About.html":{}}}],["row",{"_index":468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rows",{"_index":473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rslt",{"_index":273,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['apple_mail",{"_index":279,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['facebook_mail",{"_index":276,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['google_mail",{"_index":275,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['mail",{"_index":274,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['office_mail",{"_index":280,"title":{},"body":{"classes/Profile.html":{}}}],["rslt['outlook_mail",{"_index":278,"title":{},"body":{"classes/Profile.html":{}}}],["seconds",{"_index":330,"title":{},"body":{"classes/Token.html":{}}}],["select",{"_index":469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["semestercode",{"_index":163,"title":{},"body":{"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{}}}],["server",{"_index":35,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":426,"title":{},"body":{"miscellaneous/functions.html":{}}}],["services",{"_index":38,"title":{},"body":{"classes/About.html":{}}}],["set",{"_index":479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":3,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["src/.../authactions.ts",{"_index":439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.ts",{"_index":438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../databaseactions.ts",{"_index":435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../profileactions.ts",{"_index":441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../registeractions.ts",{"_index":440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../request_handler.ts",{"_index":424,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../routes.ts",{"_index":423,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../tokenaction.ts",{"_index":437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/database/database.ts",{"_index":378,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/databaseactions.ts",{"_index":382,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/interfaces.ts",{"_index":185,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"interfaces/UserInformations.html":{},"coverage.html":{}}}],["src/index.ts",{"_index":390,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/request_handler.ts",{"_index":392,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/routes.ts",{"_index":396,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/routes/about/about.ts",{"_index":5,"title":{},"body":{"classes/About.html":{},"coverage.html":{}}}],["src/routes/about/about.ts:5",{"_index":14,"title":{},"body":{"classes/About.html":{}}}],["src/routes/auth/authactions.ts",{"_index":400,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/auth/login.ts",{"_index":199,"title":{},"body":{"classes/Login.html":{},"coverage.html":{}}}],["src/routes/auth/login.ts:8",{"_index":200,"title":{},"body":{"classes/Login.html":{}}}],["src/routes/auth/oauth.ts",{"_index":95,"title":{},"body":{"classes/Authentication.html":{},"coverage.html":{}}}],["src/routes/auth/oauth.ts:5",{"_index":98,"title":{},"body":{"classes/Authentication.html":{}}}],["src/routes/auth/register.ts",{"_index":291,"title":{},"body":{"classes/Register.html":{},"coverage.html":{}}}],["src/routes/auth/register.ts:6",{"_index":292,"title":{},"body":{"classes/Register.html":{}}}],["src/routes/auth/registeractions.ts",{"_index":402,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/auth/token.ts",{"_index":314,"title":{},"body":{"classes/Token.html":{},"coverage.html":{}}}],["src/routes/auth/token.ts:42",{"_index":316,"title":{},"body":{"classes/Token.html":{}}}],["src/routes/auth/token.ts:9",{"_index":315,"title":{},"body":{"classes/Token.html":{}}}],["src/routes/auth/tokenaction.ts",{"_index":404,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/profile/profile.ts",{"_index":253,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{}}}],["src/routes/profile/profile.ts:6",{"_index":254,"title":{},"body":{"classes/Profile.html":{}}}],["src/routes/profile/profileactions.ts",{"_index":405,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/routes/profile/profileupdate.ts",{"_index":283,"title":{},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{}}}],["src/routes/profile/profileupdate.ts:6",{"_index":286,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["src/routes/widgets/currency.ts",{"_index":102,"title":{},"body":{"classes/Currency.html":{},"coverage.html":{}}}],["src/routes/widgets/currency.ts:5",{"_index":105,"title":{},"body":{"classes/Currency.html":{}}}],["src/routes/widgets/intraepitech.ts",{"_index":130,"title":{},"body":{"classes/IntraEpitech.html":{},"coverage.html":{}}}],["src/routes/widgets/intraepitech.ts:105",{"_index":137,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:134",{"_index":145,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:43",{"_index":141,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:6",{"_index":143,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/intraepitech.ts:74",{"_index":139,"title":{},"body":{"classes/IntraEpitech.html":{}}}],["src/routes/widgets/nasa.ts",{"_index":235,"title":{},"body":{"classes/Nasa.html":{},"coverage.html":{}}}],["src/routes/widgets/nasa.ts:24",{"_index":241,"title":{},"body":{"classes/Nasa.html":{}}}],["src/routes/widgets/nasa.ts:5",{"_index":239,"title":{},"body":{"classes/Nasa.html":{}}}],["src/routes/widgets/temperature.ts",{"_index":303,"title":{},"body":{"classes/Temperature.html":{},"coverage.html":{}}}],["src/routes/widgets/temperature.ts:24",{"_index":309,"title":{},"body":{"classes/Temperature.html":{}}}],["src/routes/widgets/temperature.ts:5",{"_index":307,"title":{},"body":{"classes/Temperature.html":{}}}],["src/routes/widgets/widget.ts",{"_index":341,"title":{},"body":{"classes/Widget.html":{},"coverage.html":{}}}],["src/routes/widgets/widget.ts:9",{"_index":342,"title":{},"body":{"classes/Widget.html":{}}}],["src/routes/widgets/widgetsdb.ts",{"_index":358,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{}}}],["src/routes/widgets/widgetsdb.ts:6",{"_index":359,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["src/routes/widgets/widgetsdb.ts:66",{"_index":360,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["src/utils/utils.ts",{"_index":332,"title":{},"body":{"classes/Utils.html":{},"coverage.html":{}}}],["src/utils/utils.ts:2",{"_index":335,"title":{},"body":{"classes/Utils.html":{}}}],["statements",{"_index":377,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":27,"title":{},"body":{"classes/About.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["success",{"_index":371,"title":{},"body":{"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":345,"title":{},"body":{"classes/Widget.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":408,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":407,"title":{},"body":{"coverage.html":{}}}],["target_currency",{"_index":121,"title":{},"body":{"classes/Currency.html":{}}}],["temperature",{"_index":48,"title":{"classes/Temperature.html":{}},"body":{"classes/About.html":{},"classes/Temperature.html":{},"classes/Widget.html":{},"coverage.html":{}}}],["temperature.gettemperature(req",{"_index":348,"title":{},"body":{"classes/Widget.html":{}}}],["temperature.getweather(req",{"_index":349,"title":{},"body":{"classes/Widget.html":{}}}],["text",{"_index":337,"title":{},"body":{"classes/Utils.html":{}}}],["token",{"_index":234,"title":{"classes/Token.html":{}},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token.split",{"_index":259,"title":{},"body":{"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["token_created_at",{"_index":232,"title":{},"body":{"classes/Login.html":{},"miscellaneous/variables.html":{}}}],["token_wl",{"_index":395,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenaction",{"_index":320,"title":{},"body":{"classes/Token.html":{}}}],["true",{"_index":281,"title":{},"body":{"classes/Profile.html":{},"classes/Register.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":108,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":18,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"interfaces/UserInformations.html":{},"classes/Utils.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":210,"title":{},"body":{"classes/Login.html":{},"classes/Register.html":{},"classes/Token.html":{},"miscellaneous/variables.html":{}}}],["unknown",{"_index":22,"title":{},"body":{"classes/About.html":{},"classes/Authentication.html":{},"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Nasa.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Register.html":{},"classes/Temperature.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["update",{"_index":478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updated",{"_index":545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos",{"_index":202,"title":{},"body":{"classes/Login.html":{},"classes/Token.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateinfos(['facebook_mail",{"_index":547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['google_mail",{"_index":542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['mail",{"_index":548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['office_mail",{"_index":546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateinfos(['token",{"_index":231,"title":{},"body":{"classes/Login.html":{}}}],["updates",{"_index":480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuserauthtoken",{"_index":387,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateuserauthtoken(infos",{"_index":520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuserinformations",{"_index":287,"title":{},"body":{"classes/ProfileUpdate.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateuserinformations(req",{"_index":289,"title":{},"body":{"classes/ProfileUpdate.html":{}}}],["updatewidget",{"_index":364,"title":{},"body":{"classes/WidgetsDB.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updatewidget(userid",{"_index":373,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["url",{"_index":112,"title":{},"body":{"classes/Currency.html":{},"classes/IntraEpitech.html":{},"classes/Nasa.html":{},"classes/Temperature.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":76,"title":{},"body":{"classes/About.html":{},"classes/IntraEpitech.html":{},"classes/Login.html":{},"classes/Profile.html":{},"classes/Register.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["user.length",{"_index":367,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["user.type",{"_index":513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.email",{"_index":514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.mail",{"_index":516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.userjson.password",{"_index":549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user[0]['id",{"_index":369,"title":{},"body":{"classes/WidgetsDB.html":{}}}],["user_id",{"_index":463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":368,"title":{},"body":{"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["userinformations",{"_index":187,"title":{"interfaces/UserInformations.html":{}},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userjson",{"_index":493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["username",{"_index":197,"title":{},"body":{"interfaces/IntraEpitechUser.html":{},"classes/Login.html":{},"classes/Register.html":{},"interfaces/UserInformations.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils",{"_index":317,"title":{"classes/Utils.html":{}},"body":{"classes/Token.html":{},"classes/Utils.html":{},"coverage.html":{}}}],["utils/utils",{"_index":318,"title":{},"body":{"classes/Token.html":{}}}],["valid",{"_index":207,"title":{},"body":{"classes/Login.html":{},"classes/Profile.html":{},"classes/ProfileUpdate.html":{},"classes/Token.html":{},"classes/Widget.html":{},"classes/WidgetsDB.html":{}}}],["value",{"_index":442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["values",{"_index":449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":379,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":434,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["wasfound",{"_index":447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["weather",{"_index":39,"title":{},"body":{"classes/About.html":{}}}],["whererow",{"_index":476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wherevalue",{"_index":477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["widget",{"_index":340,"title":{"classes/Widget.html":{}},"body":{"classes/Widget.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["widgetid",{"_index":465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["widgets",{"_index":45,"title":{},"body":{"classes/About.html":{},"classes/WidgetsDB.html":{},"miscellaneous/variables.html":{}}}],["widgetsdb",{"_index":357,"title":{"classes/WidgetsDB.html":{}},"body":{"classes/WidgetsDB.html":{},"coverage.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/About.html":{"url":"classes/About.html","title":"class - About","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  About\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/about/about.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/about/about.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport moment from \"moment\";\n\nclass About {\n  async get(req: express.Request, res: express.Response) {\n    let ip: string = req.ip;\n    ip = ip.split(':')[3];\n    console.log('ip == ', ip);\n\n    return res.status(200).json({\n      \"client\": {\n        \"host\": ip,\n      },\n      \"server\": {\n        \"current_time\": moment().unix(),\n        \"services\": [\n          {\n            \"name\": \"weather\",\n            \"display_name\": \"Weather\",\n            \"api_url\": \"http://api.openweathermap.org\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"widgets\": [\n              {\n                \"name\": \"city_temperature\",\n                \"display_name\": \"City temperature\",\n                \"description\": \"Display temperature for a city\",\n                \"params\": [\n                  {\n                    \"name\": \"city\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },\n              {\n                \"name\": \"city_weather\",\n                \"display_name\": \"City weather\",\n                \"description\": \"Display weather for a city\",\n                \"params\": [\n                  {\n                    \"name\": \"city\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"currency\",\n            \"display_name\": \"Currency Converter\",\n            \"api_url\": \"https://freecurrencyapi.net/\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"widgets\": [\n              {\n                \"name\": \"currency_converter\",\n                \"display_name\": \"Currency Converter\",\n                \"description\": \"Display the exchange rate of a currency\",\n                \"params\": [\n                  {\n                    \"name\": \"from\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"to\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"nasa\",\n            \"display_name\": \"NASA\",\n            \"api_url\": \"https://api.nasa.gov/\",\n            \"params\": [\n              {\n                \"name\": \"api_key\",\n                \"type\": \"string\",\n              }\n            ],\n            \"widgets\": [\n              {\n                \"name\": \"apod\",\n                \"display_name\": \"Astronomy Picture of the Day\",\n                \"description\": \"Display the Astronomy Picture of the Day\",\n                \"params\": [\n                  {\n                    \"name\": \"date\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },\n              {\n                \"name\": \"curiosity_image\",\n                \"display_name\": \"Curiosity Rover Image\",\n                \"description\": \"Display an image from a curiosity\",\n                \"params\": [\n                  {\n                    \"name\": \"date\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"camera\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          },{\n            \"name\": \"intra_epitech\",\n            \"display_name\": \"Intra Epitech\",\n            \"params\": [],\n            \"api_url\": \"https://intra.epitech.eu/\",\n            \"widgets\": [\n              {\n                \"name\": \"intra_epitech_profile\",\n                \"display_name\": \"Profile\",\n                \"description\": \"Display the profile of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_partners\",\n                \"display_name\": \"Partners\",\n                \"description\": \"Display the partners of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_notifications\",\n                \"display_name\": \"Notifications\",\n                \"description\": \"Display the notifications of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_grades\",\n                \"display_name\": \"Grades\",\n                \"description\": \"Display the grades of an intra epitech user\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  }\n                ]\n              },{\n                \"name\": \"intra_epitech_doors\",\n                \"display_name\": \"Open doors\",\n                \"description\": \"Open the door in epitech montpellier\",\n                \"params\": [\n                  {\n                    \"name\": \"autologin\",\n                    \"type\": \"string\",\n                  },{\n                    \"name\": \"door_name\",\n                    \"type\": \"string\",\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    });\n  }\n};\n\nmodule.exports = new About();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Authentication.html":{"url":"classes/Authentication.html","title":"class - Authentication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Authentication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/OAuth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/OAuth.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport { handleOAuthUsers } from './authActions';\n\nclass Authentication {\n    async post(req: express.Request, res: express.Response) {\n        return handleOAuthUsers(req, res);\n    }\n}\n\nmodule.exports = new Authentication();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Currency.html":{"url":"classes/Currency.html","title":"class - Currency","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Currency\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/currency.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getExchangeRate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getExchangeRate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getExchangeRate(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/currency.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Currency {\n    async getExchangeRate(req: express.Request, res: express.Response) {\n        try {\n            const { from, to, api_key } = req.body;\n            console.log(from, to);\n            const url: string = `https://freecurrencyapi.net/api/v2/latest?base_currency=${from}&apikey=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            let currency: number = response.data.data[to];\n            console.log('currency == ', currency);\n            return res.status(200).json({\n                \"base_currency\": from,\n                \"target_currency\": to,\n                \"rate\": currency\n            });\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Currency();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IntraEpitech.html":{"url":"classes/IntraEpitech.html","title":"class - IntraEpitech","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IntraEpitech\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/intraEpitech.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getGrades\n                            \n                            \n                                    Async\n                                getNotifications\n                            \n                            \n                                    Async\n                                getPartners\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                openDoor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getGrades\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGrades(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNotifications(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPartners\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPartners(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        openDoor\n                        \n                    \n                \n            \n            \n                \n                    \n                    openDoor(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/intraEpitech.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\nimport { IntraEpitechUser } from '../../database/interfaces';\n\nclass IntraEpitech {\n    async getProfile(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n            url = `https://intra.epitech.eu/${autoLogin}/user?format=json`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            const user: IntraEpitechUser = {\n                login: response.data['login'],\n                firstname: response.data['firstname'],\n                lastname: response.data['lastname'],\n                profilePicture: response.data['picture'],\n                promo: response.data['promo'],\n                location: response.data['groups'][0]['name'],\n                semesterCode: response.data['semester_code'],\n                credits: response.data['credits'],\n                gpa: response.data['gpa'][0]['gpa'],\n            };\n            return res.status(200).json(user);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getPartners(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n    \n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n    \n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: `https://intra.epitech.eu/${autoLogin}/user?format=json`\n            });\n            const login: string = response.data['login'];\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/binome/?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response2.data['binomes']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getNotifications(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;            \n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autologin) {\n                if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                    autoLogin = autoLogin.substring(25);\n                }\n            }\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: `https://intra.epitech.eu/${autoLogin}/user?format=json`\n            });\n            const login: string = response.data['login'];\n\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/notification/message?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(200).json(response2.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getGrades(req: express.Request, res: express.Response) {\n        try {\n            const { autologin } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autoLogin.startsWith(\"https://intra.epitech.eu/\")) {\n                autoLogin = autoLogin.substring(25);\n            }\n            url = `https://intra.epitech.eu/${autoLogin}/user?format=json`;\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            const login: string = response.data['login'];\n            url = `https://intra.epitech.eu/${autoLogin}/user/${login}/notes?format=json`;\n            let response2: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(200).json(response2.data['modules']);            \n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async openDoor(req: express.Request, res: express.Response) {\n        try {\n            const { autologin, door_name } = req.body;\n            let autoLogin: string = autologin;\n            let url: string = \"\";\n\n            if (autoLogin.startsWith(\"https://intra.epitech.eu/\") == false) {\n                autoLogin = `https://intra.epitech.eu/${autologin}`;\n            }\n            console.log('autologin == ', autoLogin);\n            url = `https://epi-logue.eu/api/doors_open?login=${autologin}&door_name=${door_name}`;\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url,\n            });\n            return res.status(response.status).json(response.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new IntraEpitech();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IntraEpitechUser.html":{"url":"interfaces/IntraEpitechUser.html","title":"interface - IntraEpitechUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IntraEpitechUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            credits\n                                        \n                                \n                                \n                                        \n                                            firstname\n                                        \n                                \n                                \n                                        \n                                            gpa\n                                        \n                                \n                                \n                                        \n                                            lastname\n                                        \n                                \n                                \n                                        \n                                            location\n                                        \n                                \n                                \n                                        \n                                            login\n                                        \n                                \n                                \n                                        \n                                            profilePicture\n                                        \n                                \n                                \n                                        \n                                            promo\n                                        \n                                \n                                \n                                        \n                                            semesterCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        credits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        credits:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gpa\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gpa:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        location:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profilePicture\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        profilePicture:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        promo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        promo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        semesterCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        semesterCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Login.html":{"url":"classes/Login.html","title":"class - Login","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Login\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/login.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/login.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport { getUsers, updateInfos } from \"../../database/databaseActions\";\nimport { UserInformations } from \"../../database/interfaces\";\nimport jwt from 'jsonwebtoken';\nimport moment from \"moment\";\n\nclass Login {\n    async post(req: express.Request, res: express.Response) {\n        const { mail, password } = req.body;\n\n        if (!mail || !password) {\n            return res.status(400).json({\n                valid: false,\n                message: \"mail and password are required\"\n            });\n        }\n\n        const user: UserInformations = {\n            mail: mail,\n            google_mail: undefined,\n            google_token: undefined,\n            facebook_mail: undefined,\n            facebook_token: undefined,\n            apple_mail: undefined,\n            apple_token: undefined,\n            office_mail: undefined,\n            office_token: undefined,\n            username: undefined,\n            password: password\n        };\n\n        const expiresIn: number = Number(process.env.EXPIRE_TIME) || 60 * 60;\n        const payload = {\n            mail: mail\n        };\n        const newToken: string = jwt.sign(\n            payload,\n            process.env.JWT_SECRET,\n            { expiresIn: expiresIn }\n        );\n\n        await getUsers(user, async (err: any, result: any) => {\n            if (err) {\n                return res.status(500).json({\n                    valid: false,\n                    message: err\n                });\n            } else {\n                let _result = result;\n                if (result.length === 0) {\n                    return res.status(400).json({\n                        valid: false,\n                        message: \"mail or password is incorrect\"\n                    });\n                } else {\n                    _result['token'] = newToken;\n                    _result['token_created_at'] = moment().format('YYYY-MM-DD HH:mm:ss');\n                    await updateInfos(['token', 'token_created_at'], [newToken, moment().format('YYYY-MM-DD HH:mm:ss')], 'mail', mail, (err: any, result: any) => {\n                        if (err) {\n                            return res.status(500).json({\n                                valid: false,\n                                message: err\n                            });\n                        } else {\n                            return res.status(200).json({ error: false, message: \"user logged in\", token: newToken, expiresIn: expiresIn, result: _result });\n                        }\n                    });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Login();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Nasa.html":{"url":"classes/Nasa.html","title":"class - Nasa","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Nasa\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/nasa.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getNasaDayImage\n                            \n                            \n                                    Async\n                                getNasaRoverImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNasaDayImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNasaDayImage(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/nasa.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNasaRoverImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNasaRoverImage(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/nasa.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport axios, { AxiosResponse } from \"axios\";\n\nclass Nasa {\n    async getNasaDayImage(req: express.Request, res: express.Response) {\n        try {\n            const { date, api_key } = req.body;\n            // const apiKey: string = process.env.NASA_API_KEY;\n            const url = `https://api.nasa.gov/planetary/apod?api_key=${api_key}&date=${date}`;\n\n            let response: AxiosResponse = await axios({\n                method: \"get\",\n                url: url\n            });\n            return res.status(200).json(response.data);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getNasaRoverImage(req: express.Request, res: express.Response) {\n        try {\n            const { date, camera, api_key } = req.body;\n            // const apiKey: string = process.env.NASA_API_KEY;\n            const url = `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=${date}&camera=${camera}&api_key=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: \"get\",\n                url: url\n            });\n            let data = response.data.photos;\n            let photo: any = data[0] ? data[0] : {};\n\n            return res.status(200).json(photo);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n}\n\nexport default new Nasa();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/profile/profile.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/profile/profile.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport { getRow, getUsers } from '../../database/databaseActions';\n\nclass Profile {\n    async get(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                console.log(\"heeeeeeeeeeeeeeeeeeeeere\");\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            console.log(\"heeeeeeeeeeeeeeeeeeeeere2\");\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n        await getRow('token', token, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                return res.status(500).json({ error: false, message: \"internal server error\" });\n            } else {\n                if (result.length === 0) {\n                    return res.status(404).json({ error: false, message: \"user not found\" });\n                } else {\n                    console.log(\"result == \", result);\n                    console.log(\"result[0] == \", result[0]);\n                    let rslt = result[0];\n                    let user = {\n                        mail: rslt['mail'],\n                        google_mail: rslt['google_mail'],\n                        facebook_mail: rslt['facebook_mail'],\n                        outlook_mail: rslt['outlook_mail'],\n                        apple_mail: rslt['apple_mail'],\n                        office_mail: rslt['office_mail'],\n                    };\n\n                    return res.status(200).json({ error: true, message: \"user found\", result: user });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Profile();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileUpdate.html":{"url":"classes/ProfileUpdate.html","title":"class - ProfileUpdate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileUpdate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/profile/profileUpdate.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/profile/profileUpdate.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { updateUserInformations } from \"./profileActions\";\n\nclass ProfileUpdate {\n    async patch(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                console.log(\"heeeeeeeeeeeeeeeeeeeeere\");\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            console.log(\"heeeeeeeeeeeeeeeeeeeeere2\");\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n        await updateUserInformations(req, res);\n    }\n}\n\nmodule.exports = new ProfileUpdate();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Register.html":{"url":"classes/Register.html","title":"class - Register","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Register\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/register.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/register.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from \"express\"\nimport { UserInformations } from \"../../database/interfaces\";\nimport { registerBasicUser } from \"./registerActions\";\n\nclass Register {\n    async post(req: express.Request, res: express.Response) {\n        const { mail, password } = req.body;\n\n        const infos: UserInformations = {\n            mail: mail,\n            google_mail: undefined,\n            google_token: undefined,\n            facebook_mail: undefined,\n            facebook_token: undefined,\n            apple_mail: undefined,\n            apple_token: undefined,\n            office_mail: undefined,\n            office_token: undefined,\n            username: undefined,\n            password: password,\n        };\n        let result = await registerBasicUser(infos);\n\n        if (result.error === true) {\n            return res.status(500).json({\n                error: true,\n                message: result.message,\n            });\n        }\n        if (result.error === false && result.message === \"user already exists\") {\n            return res.status(403).json({ error: true, message: result.message });\n        }\n        return res.status(200).json({ error: false, message: result.message, result: result.result });\n    }\n}\n\nmodule.exports = new Register();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Temperature.html":{"url":"classes/Temperature.html","title":"class - Temperature","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Temperature\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/temperature.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTemperature\n                            \n                            \n                                    Async\n                                getWeather\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTemperature\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTemperature(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/temperature.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getWeather\n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeather(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/temperature.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport axios, { AxiosResponse } from 'axios';\n\nclass Temperature {\n    async getTemperature(req: express.Request, res: express.Response) {\n        try {\n            const { city, api_key } = req.body;\n            // const apikey: string = process.env.WEATHER_API_KEY;\n            const url: string = `http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response.data['main']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n\n    async getWeather(req: express.Request, res: express.Response) {\n        try {\n            const { city, api_key } = req.body;\n            // const apikey: string = process.env.WEATHER_API_KEY;\n            const url: string = `http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=fr&units=metric&appid=${api_key}`;\n\n            let response: AxiosResponse = await axios({\n                method: 'get',\n                url: url\n            });\n            return res.status(200).json(response.data['weather']);\n        } catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                error: 'Internal server error'\n            });\n        }\n    }\n};\n\nexport default new Temperature();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Token.html":{"url":"classes/Token.html","title":"class - Token","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Token\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/auth/token.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/token.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/auth/token.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport moment from 'moment';\nimport { updateInfos } from '../../database/databaseActions';\nimport Utils from '../../utils/utils';\nimport { checkToken } from './tokenAction';\n\nclass Token {\n    async get(req: express.Request, res: express.Response) {\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                console.log(\"heeeeeeeeeeeeeeeeeeeeere\");\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            console.log(\"heeeeeeeeeeeeeeeeeeeeere2\");\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n        checkToken(token, (err: any, result: any) => {\n            if (err || result === [] || result === null || result === undefined || result.length === 0) {\n                console.debug(result);\n                return res.status(401).json({ valid: false, message: \"token invalid or not found\" });\n            } else {\n                let createdAt: moment.Moment = moment(result[0].token_created_at);\n                let now: moment.Moment = moment();\n                let diff: number = now.diff(createdAt, 'seconds');\n                if (diff  {\n            if (err) {\n                console.debug(err);\n                return res.status(500).json({ valid: false, message: \"internal server error\" });\n            } else {\n                if (result.affectedRows === 0) {\n                    return res.status(401).json({ valid: false, message: \"token invalid or not found\" });\n                } else {\n                    return res.status(200).json({ valid: true, message: \"token valid\", expiresIn: expiresIn, token: newToken, result: result.result });\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = new Token();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserInformations.html":{"url":"interfaces/UserInformations.html","title":"interface - UserInformations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserInformations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apple_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            apple_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            facebook_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            facebook_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            google_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            google_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            office_mail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            office_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apple_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apple_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        apple_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apple_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        facebook_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        facebook_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        google_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        google_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        office_mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        office_mail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        office_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        office_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInformations {\n    mail?: string,\n    google_mail?: string,\n    google_token?: string,\n    facebook_mail?: string,\n    facebook_token?: string,\n    apple_mail?: string,\n    apple_token?: string,\n    office_mail?: string,\n    office_token?: string,\n    username?: string,\n    password?: string,\n};\n\nexport interface IntraEpitechUser {\n    login: string,\n    firstname: string,\n    lastname: string,\n    profilePicture: string,\n    promo: string,\n    location: string,\n    semesterCode: string,\n    credits: number,\n    gpa: number,\n};\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Utils.html":{"url":"classes/Utils.html","title":"class - Utils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Utils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/utils.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRandomString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRandomString\n                        \n                    \n                \n            \n            \n                \ngetRandomString(length: number)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/utils.ts:2\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        class Utils {\n    getRandomString(length: number): string {\n        let text: string = \"\";\n        let possible: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!$&#@.\";\n        for (let i: number = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Widget.html":{"url":"classes/Widget.html","title":"class - Widget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Widget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/widget.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widget.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport Currency from './currency';\nimport Nasa from './nasa';\nimport Temperature from './temperature';\nimport IntraEpitech from './intraEpitech';\n\nclass Widget {\n    async post(req: express.Request, res: express.Response) {\n        let valid: boolean = true;\n        const type: string = req.params.type;\n        let token: string = req.headers.authorization;\n        if (!token) {\n            return res.status(401).json({ valid: false, message: \"token not found\" });\n        }\n        token = token.split(\" \")[1];\n\n        try {\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n    \n            if (!decoded) {\n                return res.status(401).json({ valid: false, message: \"token invalid\" });\n            }\n        } catch (error) {\n            return res.status(401).json({ valid: false, message: \"token invalid\" });\n        }\n\n\n        switch (type) {\n            case 'currency_converter':\n                return await Currency.getExchangeRate(req, res);\n            case 'city_temperature':\n                return await Temperature.getTemperature(req, res);\n            case 'city_weather':\n                return await Temperature.getWeather(req, res);\n            case 'apod':\n                return await Nasa.getNasaDayImage(req, res);\n            case 'curiosity_image':\n                return await Nasa.getNasaRoverImage(req, res);\n            case 'intra_epitech_profile':\n                return await IntraEpitech.getProfile(req, res);\n            case 'intra_epitech_partners':\n                return await IntraEpitech.getPartners(req, res);\n            case 'intra_epitech_notifications':\n                return await IntraEpitech.getNotifications(req, res);\n            case 'intra_epitech_doors':\n                return await IntraEpitech.openDoor(req, res);\n            case 'intra_epitech_grades':\n                return await IntraEpitech.getGrades(req, res);\n            default:\n                return res.status(404).json({ error: true, message: \"widget not found\" });\n        }\n    }\n}\n\nmodule.exports = new Widget();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WidgetsDB.html":{"url":"classes/WidgetsDB.html","title":"class - WidgetsDB","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WidgetsDB\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routes/widgets/widgetsdb.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widgetsdb.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(req: express.Request, res: express.Response)\n                \n            \n\n\n            \n                \n                    Defined in src/routes/widgets/widgetsdb.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            express.Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            express.Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import express from 'express';\nimport { getWidgetsByUserId, getUserByToken, addWidget, updateWidget } from '../../database/databaseActions';\nimport jwt from 'jsonwebtoken';\n\nclass WidgetsDB {\n    async get(req: express.Request, res: express.Response) {\n        try {\n            let token: string = req.headers.authorization;\n\n            if (!token) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token not found\"\n                });\n            }\n            token = token.split(\" \")[1];\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n\n            if (!decoded) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token invalid\"\n                });\n            }\n            await getUserByToken(token, async(err: any, user: any) => {\n                if (err) {\n                    console.debug(err);\n                    return res.status(500).json({\n                        valid: false,\n                        message: \"error\"\n                    });\n                } else {\n                    if (user.length === 0) {\n                        return res.status(404).json({\n                            valid: false,\n                            message: \"user not found\"\n                        });\n                    } else {\n                        let userId = user[0]['id'];\n                        await getWidgetsByUserId(userId, (err: any, result: any) => {\n                            if (err) {\n                                console.debug(err);\n                                return res.status(500).json({\n                                    valid: false,\n                                    message: \"error\"\n                                });\n                            }\n                            return res.status(200).json({\n                                valid: true,\n                                message: \"success\",\n                                data: result\n                            });\n                        });\n                    }\n                }\n            });\n        } catch (error) {\n            console.log(error);\n            return res.status(401).json({\n                valid: false,\n                message: \"token invalid\"\n            });\n        }\n    }\n\n    async patch(req: express.Request, res: express.Response) {\n        try {\n            let token: string = req.headers.authorization;\n            const { widgets } = req.body;            \n\n            if (!token) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token not found\"\n                });\n            }\n            token = token.split(\" \")[1];\n            const decoded: string | jwt.JwtPayload = jwt.verify(token, process.env.JWT_SECRET);\n\n            if (!decoded) {\n                return res.status(401).json({\n                    valid: false,\n                    message: \"token invalid\"\n                });\n            }\n            await getUserByToken(token, async(err: any, user: any) => {\n                if (err) {\n                    console.debug(err);\n                    return res.status(500).json({\n                        valid: false,\n                        message: \"error\"\n                    });\n                } else {\n                    if (user.length === 0) {\n                        return res.status(404).json({\n                            valid: false,\n                            message: \"user not found\"\n                        });\n                    } else {\n                        let userId = user[0]['id'];\n                        await getWidgetsByUserId(userId, async(err: any, result: any) => {\n                            if (err) {\n                                console.debug(err);\n                                return res.status(500).json({\n                                    valid: false,\n                                    message: \"error\"\n                                });\n                            }\n                            if (result.length === 0) {\n                                await addWidget(userId, widgets, (err: any, result: any) => {\n                                    if (err) {\n                                        console.debug(err);\n                                        return res.status(500).json({\n                                            valid: false,\n                                            message: \"error\"\n                                        });\n                                    }\n                                    return res.status(200).json({\n                                        valid: true,\n                                        message: \"success\",\n                                        data: result\n                                    });\n                                });\n                            }\n                            else {\n                                await updateWidget(userId, widgets, (err: any, result: any) => {\n                                    if (err) {\n                                        console.debug(err);\n                                        return res.status(500).json({\n                                            valid: false,\n                                            message: \"error\"\n                                        });\n                                    }\n                                    return res.status(200).json({\n                                        valid: true,\n                                        message: \"success\",\n                                        data: result\n                                    });\n                                });\n                            }\n                        });\n                    }\n                }\n            }\n        )}\n        catch (error) {\n            console.log(error);\n            return res.status(500).json({\n                valid: false,\n                message: \"error\"\n            });\n        }\n    }\n};\n\nmodule.exports = new WidgetsDB();\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/database/database.ts\n            \n            variable\n            db\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            addUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            addWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            deleteWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getRow\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getUserByToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            getWidgetsByUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateInfos\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateUserAuthToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/databaseActions.ts\n            \n            variable\n            updateWidget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            IntraEpitechUser\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/database/interfaces.ts\n            \n            interface\n            UserInformations\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            app\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            server\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/request_handler.ts\n            \n            function\n            requestHandler\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/request_handler.ts\n            \n            variable\n            TOKEN_WL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes.ts\n            \n            function\n            addRoute\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/about/about.ts\n            \n            class\n            About\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/OAuth.ts\n            \n            class\n            Authentication\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/authActions.ts\n            \n            variable\n            handleOAuthUsers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/authActions.ts\n            \n            variable\n            handleOAuthUsersAction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/login.ts\n            \n            class\n            Login\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/register.ts\n            \n            class\n            Register\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/auth/registerActions.ts\n            \n            variable\n            registerBasicUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/auth/token.ts\n            \n            class\n            Token\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/auth/tokenAction.ts\n            \n            variable\n            checkToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/profile/profile.ts\n            \n            class\n            Profile\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/profile/profileActions.ts\n            \n            variable\n            updateUserInformations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes/profile/profileUpdate.ts\n            \n            class\n            ProfileUpdate\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/currency.ts\n            \n            class\n            Currency\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/intraEpitech.ts\n            \n            class\n            IntraEpitech\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/routes/widgets/nasa.ts\n            \n            class\n            Nasa\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/widgets/temperature.ts\n            \n            class\n            Temperature\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/routes/widgets/widget.ts\n            \n            class\n            Widget\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/routes/widgets/widgetsdb.ts\n            \n            class\n            WidgetsDB\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/utils.ts\n            \n            class\n            Utils\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            cors : ^2.8.5\n        \n            dotenv : ^10.0.0\n        \n            express : ^4.17.1\n        \n            jsonwebtoken : ^8.5.1\n        \n            moment : ^2.29.1\n        \n            mysql2 : ^2.3.3-rc.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addRoute   (src/.../routes.ts)\n                        \n                        \n                            requestHandler   (src/.../request_handler.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addRoute\n                        \n                    \n                \n            \n            \n                \naddRoute(endpoint: string, service: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    service\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/request_handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        requestHandler\n                        \n                    \n                \n            \n            \n                \nrequestHandler(req, res, next)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addUsers   (src/.../databaseActions.ts)\n                        \n                        \n                            addWidget   (src/.../databaseActions.ts)\n                        \n                        \n                            app   (src/.../index.ts)\n                        \n                        \n                            checkToken   (src/.../tokenAction.ts)\n                        \n                        \n                            db   (src/.../database.ts)\n                        \n                        \n                            deleteWidget   (src/.../databaseActions.ts)\n                        \n                        \n                            getRow   (src/.../databaseActions.ts)\n                        \n                        \n                            getUserByToken   (src/.../databaseActions.ts)\n                        \n                        \n                            getUsers   (src/.../databaseActions.ts)\n                        \n                        \n                            getWidgetsByUserId   (src/.../databaseActions.ts)\n                        \n                        \n                            handleOAuthUsers   (src/.../authActions.ts)\n                        \n                        \n                            handleOAuthUsersAction   (src/.../authActions.ts)\n                        \n                        \n                            registerBasicUser   (src/.../registerActions.ts)\n                        \n                        \n                            routes   (src/.../routes.ts)\n                        \n                        \n                            server   (src/.../index.ts)\n                        \n                        \n                            TOKEN_WL   (src/.../request_handler.ts)\n                        \n                        \n                            updateInfos   (src/.../databaseActions.ts)\n                        \n                        \n                            updateUserAuthToken   (src/.../databaseActions.ts)\n                        \n                        \n                            updateUserInformations   (src/.../profileActions.ts)\n                        \n                        \n                            updateWidget   (src/.../databaseActions.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/databaseActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, callback: Function) => {\n    let query: string = \"INSERT into users (\";\n    let wasFound: boolean = false;\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"mail, password) VALUES ('\"\n                + infos.mail + \"', '\" + infos.password + \"');\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"google_mail, google_token) VALUES ('\"\n                + infos.google_mail + \"', '\" + infos.google_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"facebook_mail, facebook_token) VALUES ('\"\n                + infos.facebook_mail + \"', '\" + infos.facebook_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"apple_mail, apple_token) VALUES ('\"\n                + infos.apple_mail + \"', '\" + infos.apple_token + \"');\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"office_mail, office_token) VALUES ('\"\n                + infos.office_mail + \"', '\" + infos.office_token + \"');\";\n            wasFound = true;\n        }\n\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widget: string, callback: Function) => {\n    let query: string = \"INSERT INTO widgets (user_id, data) VALUES ('\" + userId + \"', '\" + JSON.stringify(widget) + \"');\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widgetId: string, callback: Function) => {\n    let query: string = \"DELETE FROM widgets WHERE user_id = '\" + userId + \"' AND id = '\" + widgetId + \"';\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRow\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (row: string, value: string, callback: Function) => {\n    let query: string = \"SELECT * FROM users WHERE \" + row + \" = '\" + value + \"' LIMIT 1;\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserByToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (token: string, callback: Function) => {\n    let query: string = \"SELECT * FROM users WHERE token = '\" + token + \"';\";\n    try {\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(\"[getUserByToken] err \", err);\n                callback(err);\n            } else {\n                console.debug(\"[getUserByToken] success \", result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, callback: Function) => {\n    let wasFound: boolean = false;\n    let query: string = \"SELECT * FROM users WHERE \";\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"mail = '\" + infos.mail + \"' AND password = '\" + infos.password + \"';\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"google_mail = '\" + infos.google_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"facebook_mail = '\" + infos.facebook_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"apple_mail = '\" + infos.apple_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"office_mail = '\" + infos.office_mail + \"';\";\n            wasFound = true;\n        }\n\n        console.debug(\"query == \", query);\n\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(\"[getUser] err \", err);\n                callback(err);\n            } else {\n                console.debug(\"[getUser] success \", result);\n                callback(null, result);\n            }\n        });\n\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getWidgetsByUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, callback: Function) => {\n    let query: string = \"SELECT * FROM widgets WHERE user_id = '\" + userId + \"';\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateInfos\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n    rows: Array, newValues: Array,\n    whereRow: string, whereValue: string, callback: Function) => {\n    let query: string = 'UPDATE users SET ';\n\n    for (let i = 0; i  {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n            \n                \n                    updates a row in the users table\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserAuthToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations, jwtToken: string, callback: Function) => {\n    let query: string = \"UPDATE users SET \";\n    let wasFound: boolean = false;\n\n    try {\n        if (infos.mail !== undefined) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE mail = '\" + infos.mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.google_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE google_mail = '\" + infos.google_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.facebook_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE facebook_mail = '\" + infos.facebook_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.apple_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE apple_mail = '\" + infos.apple_mail + \"';\";\n            wasFound = true;\n        }\n        if (infos.office_mail !== undefined && wasFound === false) {\n            query += \"token = '\" + jwtToken + \"', token_created_at = '\"\n                + moment().format('YYYY-MM-DD HH:mm:ss') + \"' WHERE office_mail = '\" + infos.office_mail + \"';\";\n            wasFound = true;\n        }\n\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err || result.affectedRows === 0) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    } catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateWidget\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (userId: string, widget: string, callback: Function) => {\n    let query: string = \"UPDATE widgets SET data = '\" + widget + \"' WHERE user_id = '\" + userId + \"';\";\n\n    try {\n        console.debug(\"query == \", query);\n        db.query(query, (err: any, result: any) => {\n            if (err) {\n                console.debug(err);\n                callback(err);\n            } else {\n                console.debug(result);\n                callback(null, result);\n            }\n        });\n    }\n    catch (err) {\n        callback(err);\n    }\n}\n                    \n                \n\n\n        \n    \n\n    src/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        app\n                        \n                    \n                \n            \n                \n                    \n                        Default value : express()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"http\").Server(app)\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/tokenAction.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        checkToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (token: string, callback: Function) => {\n    const queryString: string = \"SELECT * FROM users WHERE token = '\" + token + \"' LIMIT 1;\";\n    db.query(queryString, (err: any, result: any) => {\n        if (err) {\n            callback(err);\n        } else {\n            console.log(\"res == \", result);\n            callback(null, result);\n        }\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/database/database.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mysql.createConnection({\n    host: process.env.MY_SQL_HOST,\n    user: process.env.MY_SQL_USER,\n    password: process.env.MY_SQL_PASSWORD,\n    database: process.env.MY_SQL_DATABASE,\n})\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/authActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleOAuthUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (req: express.Request, res: express.Response) => {\n    try {\n        const type: string = req.params.type;\n        const { access_token } = req.body;\n        let user: { type: string, userJson: any } = { type: '', userJson: {} };\n        let response: AxiosResponse;\n\n        switch (type) {\n            case 'google_user':\n                console.log('bearer token == ', access_token);\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.debug(\"response == \", response.data);\n                let googleUser = response.data;\n                user = { type: 'google_user', userJson: googleUser };\n                break;\n            case 'facebook_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.facebook.com/me/?fields=id,name,email',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let facebookUser = response.data;\n                user = { type: 'facebook_user', userJson: facebookUser };\n                break;\n            case 'office_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.microsoft.com/v1.0/me',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.log(\"response == \", response.data);\n                let officeUser = response.data;\n                user = { type: 'office_user', userJson: officeUser };\n                break;\n            default:\n                return res.status(400).json({ message: 'Bad request' });\n        }\n\n        const infos: UserInformations = {\n            mail: undefined,\n            google_mail: (user.type === 'google_user') ? user.userJson.email : undefined,\n            google_token: (user.type === 'google_user') ? access_token : undefined,\n            facebook_mail: (user.type === 'facebook_user') ? user.userJson.email : undefined,\n            facebook_token: (user.type === 'facebook_user') ? access_token : undefined,\n            apple_mail: (user.type === 'apple_user') ? user.userJson.email : undefined,\n            apple_token: (user.type === 'apple_user') ? access_token : undefined,\n            office_mail: (user.type === 'office_user') ? user.userJson.mail : undefined,\n            office_token: (user.type === 'office_user') ? access_token : undefined,\n            username: undefined,\n            password: undefined,\n        };\n\n        const result = await handleOAuthUsersAction(infos);\n        if (result.error === true) {\n            return res.status(500).json({\n                error: result.error,\n                message: result.message,\n            });\n        }\n        if (result.message === \"user created\") {\n            return res.status(200).json({ error: false, message: \"user created\", result: result.result });\n        }\n        if (result.message === \"user already exists\") {\n            const expiresIn: number = Number(process.env.EXPIRE_TIME) || 60 * 60;\n            const payload = {\n                mail: (user.type === 'google_user') ? user.userJson.email : (user.type === 'facebook_user') ? user.userJson.email : (user.type === 'apple_user') ? user.userJson.email : (user.type === 'office_user') ? user.userJson.email : \"none\",\n            };\n            const token: string = jwt.sign(\n                payload,\n                process.env.JWT_SECRET,\n                { expiresIn: expiresIn }\n            );\n            await updateUserAuthToken(infos, token, (err: any, result: any) => {\n                if (err) {\n                    console.debug('[handleOAuthUsersAction] | error[updateUserAuthToken] = ', err);\n                } else {\n                    console.debug('[handleOAuthUsersAction] | result[updateUserAuthToken] = ', result);\n                }\n            });\n            return res.status(200).json({ error: false, message: \"user logged in\", expiresIn: expiresIn, token: token, result: result.result });\n        }\n    } catch (err) {\n        console.debug('[handleOAuthUsersAction] | error = ', err);\n        return res.status(500).json({ error: true, message: \"server error\" });\n    }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleOAuthUsersAction\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations): Promise => {\n    return new Promise(async (resolve, reject) => {\n        await getUsers(infos, async (err: any, result: any) => {\n            if (err) {\n                console.debug('[handleOAuthUsersAction] | error[getUsers] = ', err);\n                await addUsers(infos, (err: any, result: any) => {\n                    if (err) {\n                        console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                        return resolve({ error: true, message: \"internal error\" });\n                    } else {\n                        console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                        return resolve({ error: false, message: \"user created\", result: result });\n                    }\n                });\n            } else {\n                console.debug('[handleOAuthUsersAction] | result[getUsers] = ', result);\n                if (result.length === 0) {\n                    await addUsers(infos, (err: any, result: any) => {\n                        if (err) {\n                            console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                            return resolve({ error: true, message: \"internal error\" });\n                        } else {\n                            console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                            return resolve({ error: false, message: \"user created\", result: result });\n                        }\n                    });\n                } else {\n                    return resolve({ error: false, message: \"user already exists\", result: result });\n                }\n            }\n        });\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/routes/auth/registerActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        registerBasicUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (infos: UserInformations): Promise => {\n    return new Promise(async (resolve, reject) => {\n        await getUsers(infos, async (err: any, result: any) => {\n            if (err) {\n                console.debug('[handleOAuthUsersAction] | error[getUsers] = ', err);\n                await addUsers(infos, (err: any, result: any) => {\n                    if (err) {\n                        console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                        return resolve({ error: true, message: \"internal error\" });\n                    } else {\n                        console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                        return resolve({ error: false, message: \"user created\", result: result });\n                    }\n                });\n            } else {\n                console.debug('[handleOAuthUsersAction] | result[getUsers] = ', result);\n                if (result.length === 0) {\n                    await addUsers(infos, (err: any, result: any) => {\n                        if (err) {\n                            console.debug('[handleOAuthUsersAction] | error[addUsers] = ', err);\n                            return resolve({ error: true, message: \"internal error\" });\n                        } else {\n                            console.debug('[handleOAuthUsersAction] | result[addUsers] = ', result);\n                            return resolve({ error: false, message: \"user created\", result: result });\n                        }\n                    });\n                } else {\n                    return resolve({ error: false, message: \"user already exists\", result: result });\n                }\n            }\n        });\n    });\n}\n                    \n                \n\n\n        \n    \n\n    src/routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        routes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n\n\n        \n    \n\n    src/request_handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TOKEN_WL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /(register|login)/\n                    \n                \n\n\n        \n    \n\n    src/routes/profile/profileActions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        updateUserInformations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (req: express.Request, res: express.Response) => {\n    try {\n        const type: string = req.params.type;\n        const { access_token, existingInformation, existingInformationType } = req.body;\n        let response: AxiosResponse;\n        let user: { type: string, userJson: any } = { type: '', userJson: {} };\n\n        switch (type) {\n            case 'google_user':\n                console.log('bearer token == ', access_token);\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.debug(\"response == \", response.data);\n                let googleUser = response.data;\n                user = { type: 'google_user', userJson: googleUser };\n                break;\n            case 'facebook_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.facebook.com/me/?fields=id,name,email',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                let facebookUser = response.data;\n                user = { type: 'facebook_user', userJson: facebookUser };\n                break;\n            case 'office_user':\n                response = await axios({\n                    method: 'GET',\n                    url: 'https://graph.microsoft.com/v1.0/me',\n                    headers: {\n                        'Authorization': `Bearer ${access_token}`\n                    },\n                });\n                console.log(\"response == \", response.data);\n                let officeUser = response.data;\n                user = { type: 'office_user', userJson: officeUser };\n                break;\n            case 'plain_user':\n                let plainUser = {\n                    mail: req.body.mail,\n                    password: req.body.password,\n                };\n                user = { type: 'plain_user', userJson: plainUser };\n                break;\n            default:\n                return res.status(400).json({ message: 'Bad request' });\n        };\n\n        if (user.type === 'google_user') {\n            await updateInfos(['google_mail', 'google_token'], [user.userJson.email, access_token], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n        if (user.type === 'office_user') {\n            await updateInfos(['office_mail', 'office_token'], [user.userJson.email, access_token], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n        if (user.type === 'facebook_user') {\n            await updateInfos(['facebook_mail', 'facebook_token'], [user.userJson.email, access_token], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n        if (user.type === 'plain_user') {\n            await updateInfos(['mail', 'password'], [user.userJson.mail, user.userJson.password], existingInformationType, existingInformation, (err: Error, result: any) => {\n                if (err) {\n                    console.error(\"Error == \", err);\n                    return res.status(500).json({ message: 'Internal server error' });\n                }\n                return res.status(200).json({ message: 'User informations updated' });\n            });\n        }\n    } catch (error) {\n        console.error(error);\n        return res.status(500).json({ message: 'server error' });\n    }\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
